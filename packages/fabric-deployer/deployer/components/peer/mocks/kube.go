// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/IBM-Blockchain/fabric-deployer/deployer/components/peer"
	v1 "k8s.io/api/core/v1"
)

type Kube struct {
	CreateSecretStub        func(string, *v1.Secret) (*v1.Secret, error)
	createSecretMutex       sync.RWMutex
	createSecretArgsForCall []struct {
		arg1 string
		arg2 *v1.Secret
	}
	createSecretReturns struct {
		result1 *v1.Secret
		result2 error
	}
	createSecretReturnsOnCall map[int]struct {
		result1 *v1.Secret
		result2 error
	}
	DeleteAndCreateSecretStub        func(string, *v1.Secret) (*v1.Secret, error)
	deleteAndCreateSecretMutex       sync.RWMutex
	deleteAndCreateSecretArgsForCall []struct {
		arg1 string
		arg2 *v1.Secret
	}
	deleteAndCreateSecretReturns struct {
		result1 *v1.Secret
		result2 error
	}
	deleteAndCreateSecretReturnsOnCall map[int]struct {
		result1 *v1.Secret
		result2 error
	}
	DeleteSecretStub        func(string, string) error
	deleteSecretMutex       sync.RWMutex
	deleteSecretArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteSecretReturns struct {
		result1 error
	}
	deleteSecretReturnsOnCall map[int]struct {
		result1 error
	}
	GetConfigMapStub        func(string, string) (*v1.ConfigMap, error)
	getConfigMapMutex       sync.RWMutex
	getConfigMapArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getConfigMapReturns struct {
		result1 *v1.ConfigMap
		result2 error
	}
	getConfigMapReturnsOnCall map[int]struct {
		result1 *v1.ConfigMap
		result2 error
	}
	GetPortStub        func(string, string) (int32, error)
	getPortMutex       sync.RWMutex
	getPortArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPortReturns struct {
		result1 int32
		result2 error
	}
	getPortReturnsOnCall map[int]struct {
		result1 int32
		result2 error
	}
	GetPortsStub        func(string, string) ([]v1.ServicePort, error)
	getPortsMutex       sync.RWMutex
	getPortsArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPortsReturns struct {
		result1 []v1.ServicePort
		result2 error
	}
	getPortsReturnsOnCall map[int]struct {
		result1 []v1.ServicePort
		result2 error
	}
	GetServiceStub        func(string, string) (*v1.Service, error)
	getServiceMutex       sync.RWMutex
	getServiceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getServiceReturns struct {
		result1 *v1.Service
		result2 error
	}
	getServiceReturnsOnCall map[int]struct {
		result1 *v1.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Kube) CreateSecret(arg1 string, arg2 *v1.Secret) (*v1.Secret, error) {
	fake.createSecretMutex.Lock()
	ret, specificReturn := fake.createSecretReturnsOnCall[len(fake.createSecretArgsForCall)]
	fake.createSecretArgsForCall = append(fake.createSecretArgsForCall, struct {
		arg1 string
		arg2 *v1.Secret
	}{arg1, arg2})
	stub := fake.CreateSecretStub
	fakeReturns := fake.createSecretReturns
	fake.recordInvocation("CreateSecret", []interface{}{arg1, arg2})
	fake.createSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Kube) CreateSecretCallCount() int {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	return len(fake.createSecretArgsForCall)
}

func (fake *Kube) CreateSecretCalls(stub func(string, *v1.Secret) (*v1.Secret, error)) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = stub
}

func (fake *Kube) CreateSecretArgsForCall(i int) (string, *v1.Secret) {
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	argsForCall := fake.createSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Kube) CreateSecretReturns(result1 *v1.Secret, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	fake.createSecretReturns = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *Kube) CreateSecretReturnsOnCall(i int, result1 *v1.Secret, result2 error) {
	fake.createSecretMutex.Lock()
	defer fake.createSecretMutex.Unlock()
	fake.CreateSecretStub = nil
	if fake.createSecretReturnsOnCall == nil {
		fake.createSecretReturnsOnCall = make(map[int]struct {
			result1 *v1.Secret
			result2 error
		})
	}
	fake.createSecretReturnsOnCall[i] = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *Kube) DeleteAndCreateSecret(arg1 string, arg2 *v1.Secret) (*v1.Secret, error) {
	fake.deleteAndCreateSecretMutex.Lock()
	ret, specificReturn := fake.deleteAndCreateSecretReturnsOnCall[len(fake.deleteAndCreateSecretArgsForCall)]
	fake.deleteAndCreateSecretArgsForCall = append(fake.deleteAndCreateSecretArgsForCall, struct {
		arg1 string
		arg2 *v1.Secret
	}{arg1, arg2})
	stub := fake.DeleteAndCreateSecretStub
	fakeReturns := fake.deleteAndCreateSecretReturns
	fake.recordInvocation("DeleteAndCreateSecret", []interface{}{arg1, arg2})
	fake.deleteAndCreateSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Kube) DeleteAndCreateSecretCallCount() int {
	fake.deleteAndCreateSecretMutex.RLock()
	defer fake.deleteAndCreateSecretMutex.RUnlock()
	return len(fake.deleteAndCreateSecretArgsForCall)
}

func (fake *Kube) DeleteAndCreateSecretCalls(stub func(string, *v1.Secret) (*v1.Secret, error)) {
	fake.deleteAndCreateSecretMutex.Lock()
	defer fake.deleteAndCreateSecretMutex.Unlock()
	fake.DeleteAndCreateSecretStub = stub
}

func (fake *Kube) DeleteAndCreateSecretArgsForCall(i int) (string, *v1.Secret) {
	fake.deleteAndCreateSecretMutex.RLock()
	defer fake.deleteAndCreateSecretMutex.RUnlock()
	argsForCall := fake.deleteAndCreateSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Kube) DeleteAndCreateSecretReturns(result1 *v1.Secret, result2 error) {
	fake.deleteAndCreateSecretMutex.Lock()
	defer fake.deleteAndCreateSecretMutex.Unlock()
	fake.DeleteAndCreateSecretStub = nil
	fake.deleteAndCreateSecretReturns = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *Kube) DeleteAndCreateSecretReturnsOnCall(i int, result1 *v1.Secret, result2 error) {
	fake.deleteAndCreateSecretMutex.Lock()
	defer fake.deleteAndCreateSecretMutex.Unlock()
	fake.DeleteAndCreateSecretStub = nil
	if fake.deleteAndCreateSecretReturnsOnCall == nil {
		fake.deleteAndCreateSecretReturnsOnCall = make(map[int]struct {
			result1 *v1.Secret
			result2 error
		})
	}
	fake.deleteAndCreateSecretReturnsOnCall[i] = struct {
		result1 *v1.Secret
		result2 error
	}{result1, result2}
}

func (fake *Kube) DeleteSecret(arg1 string, arg2 string) error {
	fake.deleteSecretMutex.Lock()
	ret, specificReturn := fake.deleteSecretReturnsOnCall[len(fake.deleteSecretArgsForCall)]
	fake.deleteSecretArgsForCall = append(fake.deleteSecretArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteSecretStub
	fakeReturns := fake.deleteSecretReturns
	fake.recordInvocation("DeleteSecret", []interface{}{arg1, arg2})
	fake.deleteSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Kube) DeleteSecretCallCount() int {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	return len(fake.deleteSecretArgsForCall)
}

func (fake *Kube) DeleteSecretCalls(stub func(string, string) error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = stub
}

func (fake *Kube) DeleteSecretArgsForCall(i int) (string, string) {
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	argsForCall := fake.deleteSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Kube) DeleteSecretReturns(result1 error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = nil
	fake.deleteSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *Kube) DeleteSecretReturnsOnCall(i int, result1 error) {
	fake.deleteSecretMutex.Lock()
	defer fake.deleteSecretMutex.Unlock()
	fake.DeleteSecretStub = nil
	if fake.deleteSecretReturnsOnCall == nil {
		fake.deleteSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Kube) GetConfigMap(arg1 string, arg2 string) (*v1.ConfigMap, error) {
	fake.getConfigMapMutex.Lock()
	ret, specificReturn := fake.getConfigMapReturnsOnCall[len(fake.getConfigMapArgsForCall)]
	fake.getConfigMapArgsForCall = append(fake.getConfigMapArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetConfigMapStub
	fakeReturns := fake.getConfigMapReturns
	fake.recordInvocation("GetConfigMap", []interface{}{arg1, arg2})
	fake.getConfigMapMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Kube) GetConfigMapCallCount() int {
	fake.getConfigMapMutex.RLock()
	defer fake.getConfigMapMutex.RUnlock()
	return len(fake.getConfigMapArgsForCall)
}

func (fake *Kube) GetConfigMapCalls(stub func(string, string) (*v1.ConfigMap, error)) {
	fake.getConfigMapMutex.Lock()
	defer fake.getConfigMapMutex.Unlock()
	fake.GetConfigMapStub = stub
}

func (fake *Kube) GetConfigMapArgsForCall(i int) (string, string) {
	fake.getConfigMapMutex.RLock()
	defer fake.getConfigMapMutex.RUnlock()
	argsForCall := fake.getConfigMapArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Kube) GetConfigMapReturns(result1 *v1.ConfigMap, result2 error) {
	fake.getConfigMapMutex.Lock()
	defer fake.getConfigMapMutex.Unlock()
	fake.GetConfigMapStub = nil
	fake.getConfigMapReturns = struct {
		result1 *v1.ConfigMap
		result2 error
	}{result1, result2}
}

func (fake *Kube) GetConfigMapReturnsOnCall(i int, result1 *v1.ConfigMap, result2 error) {
	fake.getConfigMapMutex.Lock()
	defer fake.getConfigMapMutex.Unlock()
	fake.GetConfigMapStub = nil
	if fake.getConfigMapReturnsOnCall == nil {
		fake.getConfigMapReturnsOnCall = make(map[int]struct {
			result1 *v1.ConfigMap
			result2 error
		})
	}
	fake.getConfigMapReturnsOnCall[i] = struct {
		result1 *v1.ConfigMap
		result2 error
	}{result1, result2}
}

func (fake *Kube) GetPort(arg1 string, arg2 string) (int32, error) {
	fake.getPortMutex.Lock()
	ret, specificReturn := fake.getPortReturnsOnCall[len(fake.getPortArgsForCall)]
	fake.getPortArgsForCall = append(fake.getPortArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPortStub
	fakeReturns := fake.getPortReturns
	fake.recordInvocation("GetPort", []interface{}{arg1, arg2})
	fake.getPortMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Kube) GetPortCallCount() int {
	fake.getPortMutex.RLock()
	defer fake.getPortMutex.RUnlock()
	return len(fake.getPortArgsForCall)
}

func (fake *Kube) GetPortCalls(stub func(string, string) (int32, error)) {
	fake.getPortMutex.Lock()
	defer fake.getPortMutex.Unlock()
	fake.GetPortStub = stub
}

func (fake *Kube) GetPortArgsForCall(i int) (string, string) {
	fake.getPortMutex.RLock()
	defer fake.getPortMutex.RUnlock()
	argsForCall := fake.getPortArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Kube) GetPortReturns(result1 int32, result2 error) {
	fake.getPortMutex.Lock()
	defer fake.getPortMutex.Unlock()
	fake.GetPortStub = nil
	fake.getPortReturns = struct {
		result1 int32
		result2 error
	}{result1, result2}
}

func (fake *Kube) GetPortReturnsOnCall(i int, result1 int32, result2 error) {
	fake.getPortMutex.Lock()
	defer fake.getPortMutex.Unlock()
	fake.GetPortStub = nil
	if fake.getPortReturnsOnCall == nil {
		fake.getPortReturnsOnCall = make(map[int]struct {
			result1 int32
			result2 error
		})
	}
	fake.getPortReturnsOnCall[i] = struct {
		result1 int32
		result2 error
	}{result1, result2}
}

func (fake *Kube) GetPorts(arg1 string, arg2 string) ([]v1.ServicePort, error) {
	fake.getPortsMutex.Lock()
	ret, specificReturn := fake.getPortsReturnsOnCall[len(fake.getPortsArgsForCall)]
	fake.getPortsArgsForCall = append(fake.getPortsArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPortsStub
	fakeReturns := fake.getPortsReturns
	fake.recordInvocation("GetPorts", []interface{}{arg1, arg2})
	fake.getPortsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Kube) GetPortsCallCount() int {
	fake.getPortsMutex.RLock()
	defer fake.getPortsMutex.RUnlock()
	return len(fake.getPortsArgsForCall)
}

func (fake *Kube) GetPortsCalls(stub func(string, string) ([]v1.ServicePort, error)) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = stub
}

func (fake *Kube) GetPortsArgsForCall(i int) (string, string) {
	fake.getPortsMutex.RLock()
	defer fake.getPortsMutex.RUnlock()
	argsForCall := fake.getPortsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Kube) GetPortsReturns(result1 []v1.ServicePort, result2 error) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = nil
	fake.getPortsReturns = struct {
		result1 []v1.ServicePort
		result2 error
	}{result1, result2}
}

func (fake *Kube) GetPortsReturnsOnCall(i int, result1 []v1.ServicePort, result2 error) {
	fake.getPortsMutex.Lock()
	defer fake.getPortsMutex.Unlock()
	fake.GetPortsStub = nil
	if fake.getPortsReturnsOnCall == nil {
		fake.getPortsReturnsOnCall = make(map[int]struct {
			result1 []v1.ServicePort
			result2 error
		})
	}
	fake.getPortsReturnsOnCall[i] = struct {
		result1 []v1.ServicePort
		result2 error
	}{result1, result2}
}

func (fake *Kube) GetService(arg1 string, arg2 string) (*v1.Service, error) {
	fake.getServiceMutex.Lock()
	ret, specificReturn := fake.getServiceReturnsOnCall[len(fake.getServiceArgsForCall)]
	fake.getServiceArgsForCall = append(fake.getServiceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetServiceStub
	fakeReturns := fake.getServiceReturns
	fake.recordInvocation("GetService", []interface{}{arg1, arg2})
	fake.getServiceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Kube) GetServiceCallCount() int {
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	return len(fake.getServiceArgsForCall)
}

func (fake *Kube) GetServiceCalls(stub func(string, string) (*v1.Service, error)) {
	fake.getServiceMutex.Lock()
	defer fake.getServiceMutex.Unlock()
	fake.GetServiceStub = stub
}

func (fake *Kube) GetServiceArgsForCall(i int) (string, string) {
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	argsForCall := fake.getServiceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Kube) GetServiceReturns(result1 *v1.Service, result2 error) {
	fake.getServiceMutex.Lock()
	defer fake.getServiceMutex.Unlock()
	fake.GetServiceStub = nil
	fake.getServiceReturns = struct {
		result1 *v1.Service
		result2 error
	}{result1, result2}
}

func (fake *Kube) GetServiceReturnsOnCall(i int, result1 *v1.Service, result2 error) {
	fake.getServiceMutex.Lock()
	defer fake.getServiceMutex.Unlock()
	fake.GetServiceStub = nil
	if fake.getServiceReturnsOnCall == nil {
		fake.getServiceReturnsOnCall = make(map[int]struct {
			result1 *v1.Service
			result2 error
		})
	}
	fake.getServiceReturnsOnCall[i] = struct {
		result1 *v1.Service
		result2 error
	}{result1, result2}
}

func (fake *Kube) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSecretMutex.RLock()
	defer fake.createSecretMutex.RUnlock()
	fake.deleteAndCreateSecretMutex.RLock()
	defer fake.deleteAndCreateSecretMutex.RUnlock()
	fake.deleteSecretMutex.RLock()
	defer fake.deleteSecretMutex.RUnlock()
	fake.getConfigMapMutex.RLock()
	defer fake.getConfigMapMutex.RUnlock()
	fake.getPortMutex.RLock()
	defer fake.getPortMutex.RUnlock()
	fake.getPortsMutex.RLock()
	defer fake.getPortsMutex.RUnlock()
	fake.getServiceMutex.RLock()
	defer fake.getServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Kube) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ peer.Kube = new(Kube)
