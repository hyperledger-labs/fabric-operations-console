openapi: 3.0.0

info:
  title: IBM Blockchain Platform APIs
  description: This doc lists APIs that you can use to interact with your IBM Blockchain Platform console (IBP console)
  contact:
    name: Blockchain Service Support
    url: https://cloud.ibm.com/docs/blockchain/ibmblockchain_support.html#ibmblockchain_support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 3.0.0
  x-alternate-name: blockchain
  x-codegen-config:
    go:
      apiPackage: 'github.com/IBM-Blockchain/ibp-go-sdk'
    node:
      apiPackage: 'github.com/IBM-Blockchain/ibp-node-sdk'
  x-try-it-out-enabled:
    enabled: false

externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io

servers:
  - url: https://{instance_id}.{cluster_id}.blockchain.cloud.ibm.com
    variables:
      instance_id:
        description: The id of the instance of the blockchain service
        default: my-instance-id
      cluster_id:
        description: The id of the cluster where the blockchain service is located
        default: my-cluster-id

security:
  - BearerAuth: []

tags:
  - name: Manage component
    description: APIs to get, create, import, edit, or delete a component.
  - name: Manage multiple components
    description: APIs to get & delete multiple components.
  - name: Administer the IBP console
    description: APIs to change or monitor the IBP console.
  - name: Download examples
    description: APIs to get postman collections and swagger files.
  - name: IBP Software APIs
    description: APIs that are only available for IBP Software (OpenShift Container Platform or IBM Cloud Private)
#
#
#
#.
# -------------------------------------------------------------------------------------------------------------------------------------------------------------
# All the error messages from input validation
# -------------------------------------------------------------------------------------------------------------------------------------------------------------
x-validate_error_messages:
  # when a required key is not sent
  missing_required: "Expected parameter '$PROPERTY_NAME' to exist."

  # when the sent value is of the wrong datatype
  invalid_type: "Expected parameter '$PROPERTY_NAME' to be of type: '$PROPERTY_TYPE', but instead was: '$TYPE'."

  # when the numeric value is too large or too small
  too_large: "Parameter '$PROPERTY_NAME' is out of range. Must be <= $MAX."
  too_small: "Parameter '$PROPERTY_NAME' is out of range. Must be >= $MIN."

  # when the value is not one of the approved values
  invalid_value: "Expected parameter '$PROPERTY_NAME' to be one of these values: $VALUES."

  # when the value is one of the not-allowed values
  illegal_value: "Parameter '$PROPERTY_NAME' cannot be any of these values: $VALUES."

  # when the value for key cannot be set or edited
  illegal_key: "Parameter '$PROPERTY_NAME' is automatically populated. It can not be set."
  illegal_key_edit: "Parameter '$PROPERTY_NAME' is either never editable or not editable via this api."

  # when the string length is too short or too long
  str_too_small: "Expected parameter '$PROPERTY_NAME' is too short. Must be >= $MIN characters."
  str_too_large: "Expected parameter '$PROPERTY_NAME' is too long. Must be <= $MAX characters."

  # when the PEM cert is not parsable
  invalid_certificate: "Expected parameter '$PROPERTY_NAME' to be a Base64 encoded PEM-string."

  # when the resource units are bad, OR the value is crazy (too high or negative)
  invalid_cpu_units: "Parameter '$PROPERTY_NAME' must be a valid CPU value. Try values similar to '250m' or '0.25'."
  invalid_memory_units: "Parameter '$PROPERTY_NAME' must be a valid memory value. Try values similar to '1GiB' or '1024MiB'."
  invalid_storage_units: "Parameter '$PROPERTY_NAME' must be a valid storage value. Try values similar to '128GiB' or '131072MiB'."

  # when the deployment resource requests are less than the upper limits
  invalid_requests_for_limits: "Parameter '$PROPERTY_NAME' is invalid. 'requests' must be <= 'limits'. requests: '$REQUESTS', limits: '$LIMITS'."

  # when the duration string (like 1s) units are bad, or the value is crazy (too high or negative)
  invalid_duration_units: "Parameter '$PROPERTY_NAME' must be a valid duration string. Try values similar to '1h' or '3600s'."

  # regular expression failures on the value
  regex_fail_full_url: The field '$PROPERTY_NAME' must be a url including the protocol, hostname/ip and port.
  regex_invalid_msp_id: The field '$PROPERTY_NAME' can only contain alphanumerics characters, dashes, and dots.
  regex_invalid_enroll_chars: The field '$PROPERTY_NAME' cannot contain white space or these characters :\<>#{}%`[]\^~|"
  regex_fail_host_and_port: The field '$PROPERTY_NAME' must be a url including the hostname/ip and port. Do not include the protocol.
  regex_fail_start_non_letter: The field '$PROPERTY_NAME' must start with a letter.
  regex_fail_valid_id: The field '$PROPERTY_NAME' must start with a letter, be lowercase and only contain letters, numbers, dashes or underscores.

  # fall back regular expression failure (when the desired regex error message is not found, like I forgot to write one)
  regex_generic_error: "Parameter '$PROPERTY_NAME' is malformed."

  # when the object has an unknown key AND unknown keys are not allowed
  no_extra_keys: "Parameter '$PROPERTY_NAME' is an unknown key for object."

  # when the component type is not found anywhere, thus we don't know how to validate the request
  missing_type: "Expected the component 'type' to be in the body or route."

  # when the query parameter should have been a array of strings, but was not
  invalid_query_param_arr_str: "Expected the query parameter '$PROPERTY_NAME' to be an array of strings. Try values similar to ?filter_orderers=['my-orderer.ibp.us-south.containers.appdomain.cloud']"

  # when the array length is too short or too long
  arr_too_small: "Expected parameter '$PROPERTY_NAME' is too small. Array must have >= $MIN element(s)."
  arr_too_large: "Expected parameter '$PROPERTY_NAME' is too large. Array must have <= $MAX element(s)."

  # query parameter is not supported by api
  unsupported_query: "The query parameter '$PROPERTY_NAME' is not supported by this route."

  # query parameter is not applicable to the component in the api
  invalid_query_param_import: "The query parameter '$PROPERTY_NAME' with value '$VALUE' is not applicable on imported components."

  # this api is not applicable to imported components
  invalid_on_imported_comps: "This api is not applicable on imported components."

  # this array is not the same length as the master array field
  unmatched_lengths: "Expected array '$PROPERTY_NAME' to be the same length as '$MASTER_PROPERTY' ($LEN elements)."

  # it is invalid to have this parameter and another parameter in the same body.
  invalid_combo_not_exist: "Parameter '$PROPERTY_NAME' is incompatible with parameter '$CONFLICT_PROPERTY'. Only one of these fields can exist."

  # it is invalid to have this parameter and NOT have another parameter in the same body.
  invalid_combo_missing: "Parameter '$PROPERTY_NAME' is missing companion parameter '$COMPANION_PROPERTY'. Both fields must exist."

  # it is invalid to set this field if using a free k8s plan - doesn't apply to IBP software
  invalid_key_on_free_plan: "A *free* IBM Cloud Kubernetes cluster cannot use the parameter '$PROPERTY_NAME'."

  # it is invalid to set more than 1 key in this body
  too_many_keys: "Too many fields in body. This API only supports 1 field in the body. Use multiple apis to update multiple fields."

  # this value must be a known hostname, typically from an imported or deployed CA
  unknown_enroll_host: "The parameter '$PROPERTY_NAME' was not found in the list of known hostnames. Import the CA using this hostname or use a hostname that is already known."

  # it is invalid to upgrade fabric from version x to y
  invalid_fabric_upgrade: "Invalid '$PROPERTY_NAME' value. Upgrading Fabric from '$VALUE' to '$VALUE2' is a potentially breaking update. Read the Fabric docs for details. You can override this by setting \"ignore_warnings\" to true."


#
#
#
#.
# ------------------------------------------------------------------------------------------------------------------------------------------------------------
# Paths
# ------------------------------------------------------------------------------------------------------------------------------------------------------------
paths:
  /ak/api/v3/components/{id}:
    get:
      tags:
        - Manage component
      summary: Get component data
      description: Get the IBP console's data on a component (peer, CA, orderer, or MSP). The component might be imported or created.
      operationId: get_component
      parameters:
        - $ref: '#/components/parameters/PathIdGet'
        - $ref: '#/components/parameters/QueryDeploymentAttrs'
        - $ref: '#/components/parameters/QueryParsedCerts'
        - $ref: '#/components/parameters/QueryCache'
        - $ref: '#/components/parameters/QueryCaAttrs'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/components/{Component-ID}?cache=skip&deployment_attrs=included" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get data for component
                      opts := service.NewGetComponentOptions("{Component-ID}")
                      result, detailedResponse, err := service.GetComponent(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get data for component
                      try {
                        const response = await client.getComponent({ id: '{Component-ID}' });
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        // get all the peer components
                        GetComponentsOptions options = new GetComponentsOptions.Builder().id({id})
                              .build();
                        ServiceCall<GeResponse> call = bc.getComponents(options);
                        Response<GetResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        GenericComponentResponse l = response.getResult();

                        System.out.println(l);
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get data for component
                      try:
                        response = client.get_component(id='{Component-ID}')
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      #x-ibm-permissions:
      #  actions:
      #    - name: blockchain.optools.view
      x-ibm-events:
        events:
          - name: blockchain.components.read

      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericComponentResponse'
              examples:
                response:
                  value:
                    id: myca-2
                    type: fabric-ca
                    display_name: Example CA
                    grpcwp_url: >-
                      https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                    msp:
                      ca:
                        name: org1CA
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: org1tlsCA
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    location: ibmcloud
                    node_ou:
                      enabled: true
                    resources:
                      ca:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      peer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      orderer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      statedb:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    state_db: couchdb
                    storage:
                      ca:
                        size: 4GiB
                        class: default
                      peer:
                        size: 4GiB
                        class: default
                      orderer:
                        size: 4GiB
                        class: default
                      statedb:
                        size: 4GiB
                        class: default
                    timestamp: 1537262855753
                    tags:
                      - fabric-ca
                    version: 1.4.6-1
                    zone: '-'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

    delete:
      tags:
        - Manage component
      summary: Remove imported component
      description: |
        Remove a single component from the IBP console.
        - Using this api on an **imported** component removes it from the IBP console.
        - Using this api on a **created** component removes it from the IBP console **but** it will **not** delete the component from the Kubernetes cluster where it resides. Thus it orphans the Kubernetes deployment (if it exists). Instead use the [Delete component](#delete-component) API to delete the Kubernetes deployment and the IBP console data at once.
      operationId: remove_component
      parameters:
        - name: id
          in: path
          description: The `id` of the imported component to remove. Use the [Get all components](#list-components) API to determine the component id.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/components/{Component-ID}" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Remove imported component
                      opts := service.NewRemoveComponentOptions("{Component-ID}")
                      result, detailedResponse, err := service.RemoveComponent(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Remove imported component
                      try {
                        const response = await client.removeComponent({ id: '{Component-ID}' });
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        // get all the peer components
                        DeleteComponentOptions options = new DeleteComponentOptions.Builder().id({id})
                              .build();
                        ServiceCall<DeleteComponentResponse> call = bc.removeComponents(options);
                        Response<DeleteComponentResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        DeleteComponentResponse deleteResponse = response.getResult();
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Remove imported component
                      try:
                        response = client.remove_component(id='{Component-ID}')
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.remove
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteComponentResponse'
              examples:
                response:
                  value:
                    message: deleted
                    type: fabric-peer
                    id: component-1
                    display_name: My Peer
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/kubernetes/components/{id}:
    delete:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Delete component
      description: |
        Removes a single component from the IBP console **and** it deletes the Kubernetes deployment.
        - Using this api on an **imported** component will *error out* since its Kubernetes deployment is unknown and cannot be removed. Instead use the [Remove imported component](#remove-component) API to remove imported components.
        - Using this api on a **created** component removes it from the IBP console **and** it will delete the component from the Kubernetes cluster where it resides. The Kubernetes delete must succeed before the component will be removed from the IBP console.
      operationId: delete_component
      parameters:
        - name: id
          in: path
          description: The `id` of the component to delete. Use the [Get all components](#list_components) API to determine the id of the component to be deleted.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/kubernetes/components/{Component-ID}" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Delete component
                      opts := service.NewDeleteComponentOptions("{Component-ID}")
                      replace, detailedResponse, err := service.DeleteComponent(opts)
                      fmt.Println("result:", replace)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Delete component
                      try {
                        const response = await client.deleteComponent({ id: '{Component-ID}' });
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        DeleteComponentOptions options = new DeleteComponentOptions.Builder().id(createdCaId).build();

                        ServiceCall<DeleteComponentResponse> call = bc.deleteComponent(options);
                        Response<DeleteComponentResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        DeleteComponentResponse deleteResponse = response.getResult();
                        System.out.println(deleteResponse);
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Delete component
                      try:
                        response = client.delete_component(id='{Component-ID}')
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.delete
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteComponentResponse'
              examples:
                response:
                  value:
                    message: deleted
                    type: fabric-peer
                    id: component-1
                    display_name: My Peer
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/kubernetes/components/fabric-ca:
    post:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Create a CA
      description: Create a Hyperledger Fabric Certificate Authority (CA) in your Kubernetes cluster.
      operationId: create_ca
      requestBody:
        description: Create a CA in your Kubernetes cluster.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCaBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-ca" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"display_name\": \"My CA\",
                            \"config_override\":{
                              \"ca\":{
                                \"registry\":{
                                  \"maxenrollments\": -1,
                                  \"identities\": [{
                                    \"name\": \"admin\",
                                    \"pass\": \"password\",
                                    \"type\": \"client\",
                                    \"affiliation\": \"\",
                                    \"attrs\":{
                                            \"hf.Registrar.Roles\": \"*\",
                                            \"hf.Registrar.DelegateRoles\": \"*\",
                                            \"hf.Revoker\": true,
                                            \"hf.IntermediateCA\": true,
                                            \"hf.GenCRL\": true,
                                            \"hf.Registrar.Attributes\": \"*\",
                                            \"hf.AffiliationMgr\": true
                                    }
                                  }]
                                }
                              }
                            }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Create CA
                      var identities []blockchainv3.ConfigCARegistryIdentitiesItem
                      svc, err := service.NewConfigCARegistryIdentitiesItem("admin", "password", "client")
                      if err != nil {
                        return //err
                      }
                      identities = append(identities, *svc)
                      registry, err := service.NewConfigCARegistry(-1, identities)
                      if err != nil {
                        return
                      }
                      ca_config_create, err := service.NewConfigCACreate(registry)
                      if err != nil {
                        return
                      }
                      config_override, err := service.NewCreateCaBodyConfigOverride(ca_config_create)
                      if err != nil {
                        return
                      }
                      opts := service.NewCreateCaOptions("My CA", config_override)
                      result, detailedResponse, err := service.CreateCa(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Create CA parameters
                      const opts = {
                        "displayName": "My CA",
                        "configOverride": {
                          "ca": {
                            "registry": {
                              "maxenrollments": -1,
                              "identities": [
                                {
                                  "name": "admin",
                                  "pass": "password",
                                  "type": "client",
                                  "affiliation": "",
                                  "attrs": {
                                    "hf.Registrar.Roles": "*",
                                    "hf.Registrar.DelegateRoles": "*",
                                    "hf.Revoker": true,
                                    "hf.IntermediateCA": true,
                                    "hf.GenCRL": true,
                                    "hf.Registrar.Attributes": "*",
                                    "hf.AffiliationMgr": true
                                  }
                                }
                              ]
                            }
                          }
                        }
                      };

                      // Create CA
                      try {
                        const response = await client.createCa(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                              IdentityAttrs identityAttrsModel = new IdentityAttrs.Builder().hfRegistrarRoles("*")
                                              .hfRegistrarDelegateRoles("*").hfRevoker(true).hfIntermediateCa(true)
                                              .hfGenCrl(true).hfRegistrarAttributes("*").hfAffiliationMgr(true).build();

                              ConfigCARegistryIdentitiesItem configCaRegistryIdentitiesItemModel = new ConfigCARegistryIdentitiesItem.Builder()
                                              .name("admin").pass("password").type("client").affiliation("")
                                              .attrs(identityAttrsModel).build();

                              ConfigCARegistry configCaRegistryModel = new ConfigCARegistry.Builder()
                                              .maxenrollments(Double.valueOf("-1"))
                                              .identities(new java.util.ArrayList<ConfigCARegistryIdentitiesItem>(
                                                              java.util.Arrays.asList(configCaRegistryIdentitiesItemModel)))
                                              .build();

                              ConfigCACreate configCaCreateModel = new ConfigCACreate.Builder()
                                              .registry(configCaRegistryModel).build();

                              CreateCaBodyConfigOverride createCaBodyConfigOverrideModel = new CreateCaBodyConfigOverride.Builder()
                                              .ca(configCaCreateModel).build();

                              CreateCaOptions createCaOptions = new CreateCaOptions.Builder().displayName(prefix("My CA"))
                                              .configOverride(createCaBodyConfigOverrideModel).build();

                              // Invoke operation
                              Response<CaResponse> response = service.createCa(createCaOptions).execute();
                              if (response.getStatusCode() != 200) {
                                  throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                              }

                              CaResponse caResponseResult = response.getResult();
                              createdCaId = caResponseResult.getId();
                      } catch (ServiceResponseException e) {
                              Exception wrappedError = new Exception(e.getDebuggingInfo().toString());
                              wrappedError.initCause(e);
                              throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Create CA parameters
                      opts = {
                        'display_name': 'My CA',
                        'config_override': {
                            'ca': {
                                'registry': {
                                    'maxenrollments': -1,
                                    'identities': [
                                        {
                                            'name': 'admin',
                                            'pass': 'password',
                                            'type': 'client',
                                            'affiliation': '',
                                            'attrs': {
                                                'hf.Registrar.Roles': '*',
                                                'hf.Registrar.DelegateRoles': '*',
                                                'hf.Revoker': True,
                                                'hf.IntermediateCA': True,
                                                'hf.GenCRL': True,
                                                'hf.Registrar.Attributes': '*',
                                                'hf.AffiliationMgr': True
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                      }

                      # Create CA
                      try:
                        response = client.create_ca(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.create
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    display_name: My CA
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    operations_url: 'https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443'
                    config_override: {}
                    location: ibmcloud
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    resources:
                      ca:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    storage:
                      ca:
                        size: 4GiB
                        class: default
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/components/fabric-ca:
    post:
      tags:
        - Manage component
      summary: Import a CA
      description: Import an existing Certificate Authority (CA) to your IBP console. It is recommended to only import components that were created by this or another IBP console.
      operationId: import_ca
      requestBody:
        description: Import a CA.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportCaBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/components/fabric-ca" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"display_name\": \"My Imported CA\",
                            \"api_url\": \"https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:7054\",
                            \"operations_url\": \"https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443\",
                            \"location\": \"ibmcloud\",
                            \"msp\": {
                              \"ca\": {
                                \"name\": \"ca\"
                              },
                              \"tlsca\": {
                                \"name\": \"tlsca\"
                              },
                              \"component\": {
                                \"tls_cert\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo\"
                              }
                            }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // pre-req fields for the msp field ("ca", "tlsca", "component")
                      ca_name := "ca"
                      root_certs := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      ca := &blockchainv3.ImportCaBodyMspCa{
                        Name: &ca_name,
                        RootCerts: root_certs,
                      }

                      tlsca_name := "ca"
                      tlsca_root_certs := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      tlsca := &blockchainv3.ImportCaBodyMspTlsca{
                        Name: &tlsca_name,
                        RootCerts: tlsca_root_certs,
                      }

                      component, err := service.NewImportCaBodyMspComponent(
                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo",
                      )

                      // Create msp field
                      msp, err := service.NewImportCaBodyMsp(ca, tlsca, component)
                      if err != nil {
                          return
                      }

                      // Import CA
                      opts := service.NewImportCaOptions(
                        "My Imported CA",
                        "https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:7054",
                        msp,
                      )
                      result, detailedResponse, err := service.ImportCa(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Import CA parameters
                      const opts = {
                        displayName: 'My Imported CA',
                        apiUrl: 'https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:7054',
                        operationsUrl: 'https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443',
                        location: 'ibmcloud',
                        msp: {
                          ca: {
                            name: 'ca'
                          },
                          tlsca: {
                            name: 'tlsca'
                          },
                          component: {
                            tls_cert: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo'
                          }
                        }
                      };

                      // Import CA
                      try {
                        const response = await client.importCa(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        String cert = "===cert==";

                        ImportCaBodyMspComponent importCaBodyMspComponent = new ImportCaBodyMspComponent.Builder().tlsCert(cert)
                                        .build();
                        // tlscert().build();
                        ImportCaBodyMspTlsca importCaBodyMspTlsca = new ImportCaBodyMspTlsca.Builder().name("tlsca").build();
                        ImportCaBodyMspCa importCaBodyMspCa = new ImportCaBodyMspCa.Builder().name("ca").build();
                        ImportCaBodyMsp msp = new ImportCaBodyMsp.Builder().ca(importCaBodyMspCa).tlsca(importCaBodyMspTlsca)
                                        .component(importCaBodyMspComponent).build();

                        ImportCaOptions options = new ImportCaOptions.Builder().displayName(prefix("ImportedCA"))
                                        .apiUrl("https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:7054")
                                        .operationsUrl("https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443")
                                        .location("ibmcloud").msp(msp).build();

                        ServiceCall<CaResponse> call = service.importCa(options);
                        Response<CaResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        CaResponse ca = response.getResult();
                        createdFakeCa = ca.getId();
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Import CA parameters
                      opts = {
                        'display_name': 'My Imported CA',
                        'api_url': 'https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:7054',
                        'operations_url': 'https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443',
                        'location': 'ibmcloud',
                        'msp': {
                          'ca': {
                            'name': 'ca'
                          },
                          'tlsca': {
                            'name': 'tlsca'
                          },
                          'component': {
                            'tls_cert': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo'
                          }
                        }
                      };

                      # Import CA
                      try:
                        response = client.import_ca(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.import
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    display_name: My CA
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    operations_url: 'https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443'
                    config_override: {}
                    location: ibmcloud
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    resources:
                      ca:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    storage:
                      ca:
                        size: 4GiB
                        class: default
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/kubernetes/components/fabric-ca/{id}:
    put:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Update a CA
      description: Update Kubernetes deployment attributes of a Hyperledger Fabric Certificate Authority (CA) in your cluster.
      operationId: update_ca
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: Update a CA in your Kubernetes cluster. **Only set 1 root body field.** Use multiple API requests to change multiple fields.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCaBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-ca/{Component-ID}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"resources\":{
                              \"ca\":{
                                \"requests\":{
                                  \"cpu\": \"200m\",
                                  \"memory\":\"256Mi\"
                                }
                              }
                             }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Update CA
                      cpu := "200m"
                      memory := "256Mi"
                      resourceRequests := blockchainv3.ResourceRequests{Cpu: &cpu, Memory: &memory}
                      resourceObject, err := service.NewResourceObject(&resourceRequests)
                      if err != nil {
                        return
                      }

                      caBodyResources, err := service.NewUpdateCaBodyResources(resourceObject)
                      if err != nil {
                        return
                      }

                      opts := service.NewUpdateCaOptions("{Component-ID}")
                      opts.SetResources(caBodyResources)
                      result, detailedResponse, err := service.UpdateCa(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Update CA parameters
                      const opts = {
                        id: '{Component-ID}',
                        resources: {
                          ca: {
                            requests: {
                              cpu: '200m',
                              memory: '256Mi'
                            }
                          }
                        }
                      };

                      // Update CA
                      try {
                        const response = await client.updateCa(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ResourceRequests requests = new ResourceRequests.Builder().cpu("200m").memory("256Mi").build();
                        ResourceObject ca = new ResourceObject.Builder().requests(requests).build();
                        UpdateCaBodyResources resources = new UpdateCaBodyResources.Builder().ca(ca).build();
                        UpdateCaOptions options = new UpdateCaOptions.Builder().id(createdFakeCa)
                                    .resources(resources).build();
                        ServiceCall<CaResponse> call = service.updateCa(options);
                        Response<CaResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        CaResponse caresponse = response.getResult();
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Update CA parameters
                      opts = {
                        'id': '{Component-ID}',
                        'resources': {
                          'ca': {
                            'requests': {
                              'cpu': '200m',
                              'memory': '256Mi'
                            }
                          }
                        }
                      }

                      # Update CA
                      try:
                        response = client.update_ca(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    display_name: My CA
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    operations_url: 'https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443'
                    config_override: {}
                    location: ibmcloud
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    resources:
                      ca:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    storage:
                      ca:
                        size: 4GiB
                        class: default
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/components/fabric-ca/{id}:
    put:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Edit data about a CA
      description: Modify local metadata fields of a Certificate Authority (CA). For example, the "display_name" field. This API will **not** change any Kubernetes deployment attributes for the CA.
      operationId: edit_ca
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: Edit local metadata about a CA. All body fields are optional (only send the fields that you want to change).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCaDataBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/components/{Component-ID}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"display_name\": \"My Other CA\",
                            \"tags\": [\"fabric-ca\", \"ibm_saas\", \"blue_team\", \"dev\"]
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Edit CA Data
                      tags := [4]string{"fabric-ca", "ibm_sass", "blue_team", "dev"}
                      opts := service.NewEditCaOptions("{Component-ID}")
                      opts.SetCaName("My Ca Edited")
                      opts.SetTags(tags[:])
                      result, detailedResponse, err := service.EditCa(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Edit CA parameters
                      const opts = {
                        id: '{Component-ID}',
                        displayName: 'My Other CA',
                        tags: [
                          'fabric-ca',
                          'ibm_saas',
                          'blue_team',
                          'dev'
                        ]
                      };

                      // Edit CA
                      try {
                        const response = await client.editCa(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        List<String> tags = Arrays.asList(new String[] { "fabric-ca", "ibm_sass", "blue_team", "dev" });
                        EditCaOptions editCaOptions = new EditCaOptions.Builder().id(createdFakeCa)
                                        .displayName(prefix("Other ca")).tags(tags).build();
                        ServiceCall<CaResponse> call = service.editCa(editCaOptions);
                        Response<CaResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        CaResponse ca = response.getResult();

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Edit CA parameters
                      opts = {
                        'id': '{Component-ID}',
                        'display_name': 'My Other CA',
                        'tags': [
                          'fabric-ca',
                          'ibm_saas',
                          'blue_team',
                          'dev'
                        ]
                      }

                      # Edit CA
                      try:
                        response = client.edit_ca(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    display_name: My CA
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    operations_url: 'https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443'
                    config_override: {}
                    location: ibmcloud
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    resources:
                      ca:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    storage:
                      ca:
                        size: 4GiB
                        class: default
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/kubernetes/components/fabric-ca/{id}/actions:
    post:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Submit action to a CA
      description: Submit an action to a Fabric CA component. Actions such as restarting the component or certificate operations.
      operationId: ca_action
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: The action(s) to perform.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CaActionsBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-ca/{Component-ID}/actions" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"restart\": true
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      id := "myca"
                      restart := true
                      opts := &blockchainv3.CaActionOptions{
                        ID: &id,
                        Restart: &restart,
                      }

                      // Restart CA
                      result, detailedResponse, err := service.CaAction(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Send CA Action parameters
                      const opts = {
                        id: '{Component-ID}',
                        restart: true
                      };

                      // Send CA Action
                      try {
                        const response = await client.caAction(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        CaActionOptions caActionOptions = new CaActionOptions.Builder().restart(true).id(createdCaId).build();
                        ServiceCall<ActionsResponse> call = bc.caAction(caActionOptions);
                        Response<ActionsResponse> resp = call.execute();

                        ActionsResponse actionresp = resp.getResult();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        System.out.println(actionresp.getActions());

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Send CA Action
                      try:
                        response = client.ca_action(
                          'id'='{Component-ID}',
                          'restart'=True
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.configure
      responses:
        202:
          description: Request was received successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsResponse'
              examples:
                response:
                  value:
                    message: accepted
                    id: my-ca
                    actions:
                      - restart
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/kubernetes/components/fabric-peer:
    post:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Create a peer
      description: Create a Hyperledger Fabric peer in your Kubernetes cluster.
      operationId: create_peer
      requestBody:
        description: Create a Hyperledger Fabric peer in your Kubernetes cluster.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePeerBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-peer" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"display_name\": \"My Peer\",
                            \"msp_id\": \"org2\",
                            \"crypto\": {
                              \"enrollment\": {
                                \"ca\": {
                                  \"host\": \"n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud\",
                                  \"port\": \"7054\",
                                  \"name\": \"ca\",
                                  \"tls_cert\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo\",
                                  \"enroll_id\": \"admin\",
                                  \"enroll_secret\": \"password\"
                                },
                                \"tlsca\": {
                                  \"host\": \"n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud\",
                                  \"port\": \"7054\",
                                  \"name\": \"tlsca\",
                                  \"tls_cert\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo\",
                                  \"enroll_id\": \"admin\",
                                  \"enroll_secret\": \"password\"
                                },
                                \"component\": {
                                  \"admincerts\": [
                                    \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"
                                  ]
                                }
                              }
                            },
                            \"config_override\": {
                              \"chaincode\": {
                                \"startuptimeout\": \"480s\",
                                \"executetimeout\": \"120s\"
                              }
                            }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                        }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Create pre-req fields to ultimately build the "crypto" field ("component", "ca" & "tlsca")
                      admincerts := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      component := blockchainv3.CryptoObjectEnrollmentComponent{Admincerts: admincerts}

                      ca, err := service.NewCryptoObjectEnrollmentCa(
                        "n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud",
                        7054,
                        "ca",
                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo",
                        "admin",
                        "password",
                      )
                      if err != nil {
                        return
                      }

                      tlsca, err := service.NewCryptoObjectEnrollmentTlsca(
                        "n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud",
                        7054,
                        "tlsca",
                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo",
                        "admin",
                        "password",
                      )

                      // Create "crypto" field for a peer
                      enrollmentObj, err := service.NewCryptoObjectEnrollment(&component, ca, tlsca)
                      if err != nil {
                        return
                      }
                      cryptoObject := blockchainv3.CryptoObject{Enrollment: enrollmentObj}

                      // Create Peer
                      opts := service.NewCreatePeerOptions("org2", "My Peer", &cryptoObject)
                      result, detailedResponse, err := service.CreatePeer(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Create Peer parameters
                      const opts = {
                        displayName: 'My Peer',
                        mspId: 'org2',
                        crypto: {
                          enrollment: {
                            ca: {
                              host: 'n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud',
                              port: '7054',
                              name: 'ca',
                              tls_cert: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo',
                              enroll_id: 'admin',
                              enroll_secret: 'password'
                            },
                            tlsca: {
                              host: 'n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud',
                              port: '7054',
                              name: 'tlsca',
                              tls_cert: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo',
                              enroll_id: 'admin',
                              enroll_secret: 'password'
                            },
                            component: {
                              admincerts: [
                                'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
                              ]
                            }
                          }
                        },
                        configOverride: {
                          chaincode: {
                            startuptimeout: '480s',
                            executetimeout: '120s'
                          }
                        }
                      };

                      // Create Peer
                      try {
                        const response = await client.createPeer(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        CreatePeerOptions options = new CreatePeerOptions.Buider().build()

                        ServiceCall<PeerResponse> call = service.createPeer(ptions);
                        Response<PeerResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        PeerResponse peerResponse = response.getResult();

                        } catch (ServiceResponseException e) {
                          // essential to catch and get the debugging information
                          RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                          wrappedError.initCause(e);
                          throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Create Peer parameters
                      opts = {
                        'display_name': 'My Peer',
                        'msp_id': 'org2',
                        'crypto': {
                          'enrollment': {
                            'ca': {
                              'host': 'n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud',
                              'port': '7054',
                              'name': 'ca',
                              'tls_cert': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo',
                              'enroll_id': 'admin',
                              'enroll_secret': 'password'
                            },
                            'tlsca': {
                              'host': 'n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud',
                              'port': '7054',
                              'name': 'tlsca',
                              'tls_cert': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo',
                              'enroll_id': 'admin',
                              'enroll_secret': 'password'
                            },
                            'component': {
                              'admincerts': [
                                'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
                              ]
                            }
                          }
                        },
                        'config_override': {
                          'chaincode': {
                            'startuptimeout': '480s',
                            'executetimeout': '120s'
                          }
                        }
                      };

                      # Create Peer
                      try:
                        response = client.create_peer(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.create
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    display_name: My Peer
                    grpcwp_url: >-
                      https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                    location: ibmcloud
                    operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                    config_override: {}
                    node_ou:
                      enabled: true
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    resources:
                      peer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      statedb:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    state_db: couchdb
                    storage:
                      peer:
                        size: 4GiB
                        class: default
                      statedb:
                        size: 4GiB
                        class: default
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    type: fabric-peer
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/components/fabric-peer:
    post:
      tags:
        - Manage component
      summary: Import a peer
      description: Import an existing peer into your IBP console. It is recommended to only import components that were created by this or another IBP console.
      operationId: import_peer
      requestBody:
        description: Import a peer.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportPeerBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/components/fabric-peer" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"display_name\": \"My Imported Peer\",
                            \"location\": \"ibm cloud\",
                            \"api_url\": \"grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051\",
                            \"msp_id\": \"PeerOrg1\",
                            \"operations_url\": \"https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443\",
                            \"grpcwp_url\": \"https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084\",
                            \"msp\": {
                              \"component\": {
                                \"tls_cert\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClRscyBjZXJ0IGRhdGEgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\",
                                \"ecert\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCklkZW50aXR5IGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\",
                                \"admin_certs\": [
                                  \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"
                                ]
                              },
                              \"tlsca\": {
                                \"root_certs\": [
                                  \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg\"
                                ]
                              },
                              \"ca\": {
                                \"root_certs\": [
                                  \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg\"
                                ]
                              }
                            }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // pre-req fields for the msp field ("ca", "tlsca", "component")
                      ca_name := "ca"
                      root_certs := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      ca := &blockchainv3.MspCryptoFieldCa{
                        Name: &ca_name,
                        RootCerts: root_certs,
                      }

                      tlsca_name := "ca"
                      tlsca_root_certs := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      tlsca := &blockchainv3.MspCryptoFieldTlsca{
                        Name: &tlsca_name,
                        RootCerts: tlsca_root_certs,
                      }

                      tlscert := "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClRscyBjZXJ0IGRhdGEgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
                      ecert := "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCklkZW50aXR5IGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
                      admin_certs := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"}
                      component := &blockchainv3.MspCryptoFieldComponent{
                        TlsCert: &tlscert,
                        Ecert: &ecert,
                        AdminCerts: admin_certs,
                      }

                      // Create msp field
                      msp := &blockchainv3.MspCryptoField{
                        Ca: ca,                  // MspCryptoFieldCa
                        Tlsca: tlsca,            // MspCryptoFieldTlsca
                        Component: component,     // MspCryptoFieldComponent
                      }

                      // Import Peer
                      opts := service.NewImportPeerOptions(
                        "My Imported Peer",
                        "https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084",
                        msp,
                        "PeerOrg1",
                      )
                      result, detailedResponse, err := service.ImportPeer(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Import Peer parameters
                      const opts = {
                        displayName: 'My Imported Peer',
                        location: 'ibm cloud',
                        apiUrl: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051',
                        mspId: 'PeerOrg1',
                        operationsUrl: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443',
                        grpcwpUrl: 'https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084',
                        msp: {
                          component: {
                            tls_cert: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClRscyBjZXJ0IGRhdGEgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                            ecert: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCklkZW50aXR5IGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                            admin_certs: [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'
                            ]
                          },
                          tlsca: {
                            root_certs: [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg'
                            ]
                          },
                          ca: {
                            root_certs: [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg'
                            ]
                          }
                        }
                      };

                      // Import Peer
                      try {
                        const response = await client.importPeer(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");
                        String tlsCert = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHRENDQWI2Z0F3SUJBZ0lVSENXMzFhSWtxYVkxcFFSbmxPNldNNCtNb2t3d0NnWUlLb1pJemowRUF3SXcKWURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJFd0R3WURWUVFERXdoTmVVTkJMWFJzCmN6QWVGdzB4T1RFd01qRXlNREV4TURCYUZ3MHpOREV3TVRjeU1ERXhNREJhTUdBeEN6QUpCZ05WQkFZVEFsVlQKTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVVTUJJR0ExVUVDaE1MU0hsd1pYSnNaV1JuWlhJeApEekFOQmdOVkJBc1RCa1poWW5KcFl6RVJNQThHQTFVRUF4TUlUWGxEUVMxMGJITXdXVEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVFXYXc3M2FPV3dkMm1zMWxkQ0dBNEVpU212aHFlWTZzYi9RZWxQb0lZMVcwd3QKZ2RCUHFQQkVPN1lvRmdNandndmN1SjZjT3U4YWw0K0pVR0xFcW4wOW8xWXdWREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVUJhKzhpRUFFeEVHZXUzMzZEV0VLCmZ3ZmtBcFF3RHdZRFZSMFJCQWd3Qm9jRUNsNVRHVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdXozcWs0NEgKMHgrUWNFWk9CVk9pd2pManVFYXZVUEFDZU5CWmVhVkVHM1VDSUZLMjM1bUlwQTF5Q09OTXF2bE40RzI2TnZuWApvUFk4TDJGeWY3aTg0bm9lCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K";
                        String ecert = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHRENDQWI2Z0F3SUJBZ0lVSENXMzFhSWtxYVkxcFFSbmxPNldNNCtNb2t3d0NnWUlLb1pJemowRUF3SXcKWURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJFd0R3WURWUVFERXdoTmVVTkJMWFJzCmN6QWVGdzB4T1RFd01qRXlNREV4TURCYUZ3MHpOREV3TVRjeU1ERXhNREJhTUdBeEN6QUpCZ05WQkFZVEFsVlQKTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVVTUJJR0ExVUVDaE1MU0hsd1pYSnNaV1JuWlhJeApEekFOQmdOVkJBc1RCa1poWW5KcFl6RVJNQThHQTFVRUF4TUlUWGxEUVMxMGJITXdXVEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVFXYXc3M2FPV3dkMm1zMWxkQ0dBNEVpU212aHFlWTZzYi9RZWxQb0lZMVcwd3QKZ2RCUHFQQkVPN1lvRmdNandndmN1SjZjT3U4YWw0K0pVR0xFcW4wOW8xWXdWREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVUJhKzhpRUFFeEVHZXUzMzZEV0VLCmZ3ZmtBcFF3RHdZRFZSMFJCQWd3Qm9jRUNsNVRHVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdXozcWs0NEgKMHgrUWNFWk9CVk9pd2pManVFYXZVUEFDZU5CWmVhVkVHM1VDSUZLMjM1bUlwQTF5Q09OTXF2bE40RzI2TnZuWApvUFk4TDJGeWY3aTg0bm9lCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K";
                        String[] admin_certs = new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHRENDQWI2Z0F3SUJBZ0lVSENXMzFhSWtxYVkxcFFSbmxPNldNNCtNb2t3d0NnWUlLb1pJemowRUF3SXcKWURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJFd0R3WURWUVFERXdoTmVVTkJMWFJzCmN6QWVGdzB4T1RFd01qRXlNREV4TURCYUZ3MHpOREV3TVRjeU1ERXhNREJhTUdBeEN6QUpCZ05WQkFZVEFsVlQKTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVVTUJJR0ExVUVDaE1MU0hsd1pYSnNaV1JuWlhJeApEekFOQmdOVkJBc1RCa1poWW5KcFl6RVJNQThHQTFVRUF4TUlUWGxEUVMxMGJITXdXVEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVFXYXc3M2FPV3dkMm1zMWxkQ0dBNEVpU212aHFlWTZzYi9RZWxQb0lZMVcwd3QKZ2RCUHFQQkVPN1lvRmdNandndmN1SjZjT3U4YWw0K0pVR0xFcW4wOW8xWXdWREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVUJhKzhpRUFFeEVHZXUzMzZEV0VLCmZ3ZmtBcFF3RHdZRFZSMFJCQWd3Qm9jRUNsNVRHVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdXozcWs0NEgKMHgrUWNFWk9CVk9pd2pManVFYXZVUEFDZU5CWmVhVkVHM1VDSUZLMjM1bUlwQTF5Q09OTXF2bE40RzI2TnZuWApvUFk4TDJGeWY3aTg0bm9lCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" };
                        String[] tlsca_root_certs = new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUIvakNDQWFTZ0F3SUJBZ0lVVThuZXFoeWtPQWZaNkN2amhPU2x5Q25XU09rd0NnWUlLb1pJemowRUF3SXcKWFRFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVE0d0RBWURWUVFERXdWMGJITmpZVEFlCkZ3MHlNREF6TVRFeE5qUXpNREJhRncwek5UQXpNRGd4TmpRek1EQmFNRjB4Q3pBSkJnTlZCQVlUQWxWVE1SY3cKRlFZRFZRUUlFdzVPYjNKMGFDQkRZWEp2YkdsdVlURVVNQklHQTFVRUNoTUxTSGx3WlhKc1pXUm5aWEl4RHpBTgpCZ05WQkFzVEJrWmhZbkpwWXpFT01Bd0dBMVVFQXhNRmRHeHpZMkV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPClBRTUJCd05DQUFUT1dBUEE2N2w1NmFWeW9DRXIyVk00eDBNRW9qNzF0SHJtYjhjTDE1WklJUGdOREIrQzd5NzYKeDBVLzdPNlJta3d0b2d4SnFFU2dWUnJGM1FqalZERTZvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBUVl3RHdZRApWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVU5Zk94dW1xakhPMTd2VkR6MnIxcHhHeVJYc3dDZ1lJCktvWkl6ajBFQXdJRFNBQXdSUUloQVBNNVV2STl3MDhhdjRWUG5CckhDbFh3OWJqejEwRTJaOHN1ckZoWnhoY2wKQWlCNm9CWVhPejZWSTl0NVBSekJTV3JMRmZtbUxvQ1p5cXZWMFJ0enNYdi9PZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" };
                        String[] ca_root_certs = new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHRENDQWI2Z0F3SUJBZ0lVSENXMzFhSWtxYVkxcFFSbmxPNldNNCtNb2t3d0NnWUlLb1pJemowRUF3SXcKWURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJFd0R3WURWUVFERXdoTmVVTkJMWFJzCmN6QWVGdzB4T1RFd01qRXlNREV4TURCYUZ3MHpOREV3TVRjeU1ERXhNREJhTUdBeEN6QUpCZ05WQkFZVEFsVlQKTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVVTUJJR0ExVUVDaE1MU0hsd1pYSnNaV1JuWlhJeApEekFOQmdOVkJBc1RCa1poWW5KcFl6RVJNQThHQTFVRUF4TUlUWGxEUVMxMGJITXdXVEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVFXYXc3M2FPV3dkMm1zMWxkQ0dBNEVpU212aHFlWTZzYi9RZWxQb0lZMVcwd3QKZ2RCUHFQQkVPN1lvRmdNandndmN1SjZjT3U4YWw0K0pVR0xFcW4wOW8xWXdWREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVUJhKzhpRUFFeEVHZXUzMzZEV0VLCmZ3ZmtBcFF3RHdZRFZSMFJCQWd3Qm9jRUNsNVRHVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdXozcWs0NEgKMHgrUWNFWk9CVk9pd2pManVFYXZVUEFDZU5CWmVhVkVHM1VDSUZLMjM1bUlwQTF5Q09OTXF2bE40RzI2TnZuWApvUFk4TDJGeWY3aTg0bm9lCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" };

                        MspCryptoFieldCa ca = new MspCryptoFieldCa.Builder().rootCerts(Arrays.asList(ca_root_certs))
                                        .build();
                        MspCryptoFieldTlsca tlsca = new MspCryptoFieldTlsca.Builder()
                                        .rootCerts(Arrays.asList(tlsca_root_certs)).build();
                        MspCryptoFieldComponent component = new MspCryptoFieldComponent.Builder()
                                        .adminCerts(Arrays.asList(admin_certs)).ecert(ecert).tlsCert(tlsCert).build();
                        MspCryptoField msp = new MspCryptoField.Builder().component(component).tlsca(tlsca).ca(ca)
                                        .build();

                        ImportPeerOptions importPeerOptions = new ImportPeerOptions.Builder()
                                        .displayName("My Imported Peer").location("ibm cloud")
                                        .apiUrl("grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:705")
                                        .mspId("PeerOrg1")
                                        .operationsUrl("https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443")
                                        .grpcwpUrl("https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084")
                                        .msp(msp).build();

                        ServiceCall<PeerResponse> call = bc.importPeer(importPeerOptions);
                        Response<PeerResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        PeerResponse peerResponse = response.getResult();

                        importedPeerId = peerResponse.getId();
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Import Peer parameters
                      opts = {
                        'display_name': 'My Imported Peer',
                        'location': 'ibm cloud',
                        'api_url': 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051',
                        'msp_id': 'PeerOrg1',
                        'operations_url': 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443',
                        'grpcwp_url': 'https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084',
                        'msp': {
                          'component': {
                            'tls_cert': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClRscyBjZXJ0IGRhdGEgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                            'ecert': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCklkZW50aXR5IGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                            'admin_certs': [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'
                            ]
                          },
                          'tlsca': {
                            'root_certs': [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg'
                            ]
                          },
                          'ca': {
                            'root_certs': [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg'
                            ]
                          }
                        }
                      }

                      # Import Peer
                      try:
                        response = client.import_peer(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.import
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    display_name: My Peer
                    grpcwp_url: >-
                      https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                    location: ibmcloud
                    operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                    config_override: {}
                    node_ou:
                      enabled: true
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    resources:
                      peer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      statedb:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    state_db: couchdb
                    storage:
                      peer:
                        size: 4GiB
                        class: default
                      statedb:
                        size: 4GiB
                        class: default
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    type: fabric-peer
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/components/fabric-peer/{id}:
    put:
      tags:
        - Manage component
      summary: Edit data about a peer
      description: Modify local metadata fields of a peer. For example, the "display_name" field. This API will **not** change any Kubernetes deployment attributes for the peer.
      operationId: edit_peer
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: Edit local metadata about a peer. All body fields are optional (only send the fields that you want to change).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditPeerBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/components/fabric-peer/{Component-ID}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"display_name\": \"My Other Peer\",
                            \"tags\": [\"fabric-peer\", \"ibm_saas\", \"red_team\", \"prod\"]
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Edit Peer Data
                      tags := [4]string{"fabric-peer", "ibm_sass", "red_team", "dev"}
                      opts := service.NewEditPeerOptions("{Component-ID}")
                      opts.SetDisplayName("My Other Peer")
                      opts.SetMspID("peermsp")
                      opts.SetTags(tags[:])
                      result, detailedResponse, err := service.EditPeer(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Edit Peer parameters
                      const opts = {
                        id: '{Component-ID}',
                        displayName: 'My Other Peer',
                        tags: [
                          'fabric-peer',
                          'ibm_saas',
                          'red_team',
                          'prod'
                        ]
                      };

                      // Edit Peer
                      try {
                        const response = await client.editPeer(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        EditPeerOptions options = new EditPeerOptions.Builder().id(importedPeerId)
                          .displayName("newDisplayMame")
                          .tags(Arrays.asList(new String[]{"red_team","prod"})).build();

                        ServiceCall<PeerResponse> call = bc.editPeer(options);
                        Response<PeerResponse> response = call.execute();
                        response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        PeerResponse peerResponse = response.getResult()

                        List<GenericComponentResponse> l = response.getResult().getComponents();

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Edit Peer parameters
                      opts = {
                        'id': '{Component-ID}',
                        'display_name': 'My Other Peer',
                        'tags': [
                          'fabric-peer',
                          'ibm_saas',
                          'red_team',
                          'prod'
                        ]
                      }

                      # Edit Peer
                      try:
                        response = client.edit_peer(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    display_name: My Peer
                    grpcwp_url: >-
                      https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                    location: ibmcloud
                    operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                    config_override: {}
                    node_ou:
                      enabled: true
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    resources:
                      peer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      statedb:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    state_db: couchdb
                    storage:
                      peer:
                        size: 4GiB
                        class: default
                      statedb:
                        size: 4GiB
                        class: default
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    type: fabric-peer
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/kubernetes/components/fabric-peer/{id}/actions:
    post:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Submit action to a peer
      description: Submit an action to a Fabric Peer component. Actions such as restarting the component or certificate operations.
      operationId: peer_action
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: The action(s) to perform.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PeerActionsBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-peer/{Component-ID}/actions" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"restart\": true
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      id := "mypeer"
                      restart := true
                      opts := &blockchainv3.PeerActionOptions{
                        ID: &id,
                        Restart: &restart,
                      }

                      // Restart peer
                      result, detailedResponse, err := service.PeerAction(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Send Peer Action parameters
                      const opts = {
                        id: '{Component-ID}',
                        restart: true
                      };

                      // Send Peer Action
                      try {
                        const response = await client.peerAction(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        PeerActionOptions options = new PeerActionOptions.Builder().id(importedPeerId)
                          .restart(true)
                          .build();

                        ServiceCall<ActionsResponse> call = bc.peerAction(options);
                        Response<ActionsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        ActionsResponse peerResponse = response.getResult();

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Send Peer Action
                      try:
                        response = client.peer_action(
                          id='{Component-ID}',
                          restart=True
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.configure
      responses:
        202:
          description: Request was received successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsResponse'
              examples:
                response:
                  value:
                    message: accepted
                    id: my-ca
                    actions:
                      - restart
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/kubernetes/components/fabric-peer/{id}:
    put:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Update a peer
      description: Update Kubernetes deployment attributes of a Hyperledger Fabric Peer node.
      operationId: update_peer
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: Update a peer in your Kubernetes cluster. **Only set 1 root body field.** Use multiple API requests to change multiple fields.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePeerBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-peer/{Component-ID}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"resources\":{
                              \"peer\":{
                                \"requests\":{
                                  \"cpu\": \"400m\",
                                  \"memory\":\"1024Mi\"
                                }
                              }
                            }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Update Peer
                      cpu := "400m"
                      memory := "1024Mi"
                      resourceRequests := blockchainv3.ResourceRequests{Cpu: &cpu, Memory: &memory}
                      resourceObject, err := service.NewResourceObject(&resourceRequests)
                      if err != nil {
                        return
                      }

                      peerBodyResources := &blockchainv3.PeerResources{Peer: resourceObject}

                      opts := service.NewUpdatePeerOptions("{Component-ID}")
                      opts.SetResources(peerBodyResources)
                      result, detailedResponse, err := service.UpdatePeer(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Update Peer Action parameters
                      const opts = {
                        id: '{Component-ID}',
                        resources: {
                          peer: {
                            requests: {
                              cpu: '400m',
                              memory: '1024Mi'
                            }
                          }
                        }
                      };

                      // Update Peer
                      try {
                        const response = await client.updatePeer(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ResourceRequests requests = new ResourceRequests.Builder().cpu("200m").memory("256Mi").build();
                        ResourceObject peer = new ResourceObject.Builder().requests(requests).build();

                        PeerResources peerResources = new PeerResources.Builder().peer(requests).build();

                        UpdatePeerOptions options = new UpdatePeerOptions.Builder().id(importedPeerId)
                          .resources(peerResources)
                          .build();

                        ServiceCall<PeerResponse> call = service.updatePeer(options);
                        Response<PeerResponse> response = call.execute();
                        response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        PeerResponse peerResponse = response.getResult();

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Update peer parameters
                      opts = {
                        'id': '{Component-ID}',
                        'resources': {
                          'peer': {
                            'requests': {
                              'cpu': '400m',
                              'memory': '1024Mi'
                            }
                          }
                        }
                      };

                      # Update Peer
                      try:
                        response = client.peer_action(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    display_name: My Peer
                    grpcwp_url: >-
                      https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                    location: ibmcloud
                    operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                    config_override: {}
                    node_ou:
                      enabled: true
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    resources:
                      peer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      statedb:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    state_db: couchdb
                    storage:
                      peer:
                        size: 4GiB
                        class: default
                      statedb:
                        size: 4GiB
                        class: default
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    type: fabric-peer
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/kubernetes/components/fabric-orderer:
    post:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Create an ordering service
      description: Create a Hyperledger Ordering Service (OS) in your Kubernetes cluster. Currently, only raft ordering nodes are supported.
      operationId: create_orderer
      requestBody:
        description: Create an ordering service in your Kubernetes cluster.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrdererRaftBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-orderer" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"orderer_type\": \"raft\",
                            \"msp_id\": \"orderermsp\",
                            \"crypto\": [<CryptoObject-Node-1>, <CryptoObject-Node-2>, <CryptoObject-Node-3>, <CryptoObject-Node-4>, <CryptoObject-Node-5>],
                            \"cluster_name\": \"My three Node Raft\",
                            \"display_name\": \"ordering service node\"
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Create pre-req fields to ultimately build the "crypto" field ("component", "ca" & "tlsca")
                      admincerts := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      component := blockchainv3.CryptoObjectEnrollmentComponent{Admincerts: admincerts}

                      ca, err := service.NewCryptoObjectEnrollmentCa(
                        "n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud",
                        7054,
                        "ca",
                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo",
                        "admin",
                        "password",
                      )
                      if err != nil {
                        return
                      }

                      tlsca, err := service.NewCryptoObjectEnrollmentTlsca(
                        "n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud",
                        7054,
                        "tlsca",
                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo",
                        "admin",
                        "password",
                      )

                      // Create "crypto" field for an ordering node
                      enrollmentObj, err := service.NewCryptoObjectEnrollment(&component, ca, tlsca)
                      if err != nil {
                        return
                      }
                      cryptoObject := blockchainv3.CryptoObject{Enrollment: enrollmentObj}

                      // Create array of crypto fields, 1 per node we want
                      // (we are copying the same crypto field here to keep the example brief, but they can all use different crypto settings)
                      cryptoObjectArray := []blockchainv3.CryptoObject{cryptoObject, cryptoObject, cryptoObject, cryptoObject, cryptoObject}

                      // Create Ordering Service (OS)
                      opts := service.NewCreateOrdererOptions("raft", "orderermsp", "ordering service node", cryptoObjectArray[:])
                      result, detailedResponse, err := service.CreateOrderer(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Create OS parameters
                      const opts = {
                        clusterName: 'My five Node Raft',
                        displayName: 'ordering service node',
                        mspId: 'orderermsp',
                        ordererType: 'raft',
                        crypto: [
                          cryptoObject-Node-1,  // see doc details to build this obj
                          cryptoObject-Node-2,
                          cryptoObject-Node-3,
                          cryptoObject-Node-4,
                          cryptoObject-Node-5
                        ]
                      };

                      // Create Orderer
                      try {
                        const response = await client.createOrderer(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-

          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Create OS parameters
                      opts = {
                        'orderer_type': 'raft',
                        'msp_id': 'orderermsp',
                        'crypto': [
                          cryptoDict-Node-1,  # see doc details to build this dictionary
                          cryptoDict-Node-2,
                          cryptoDict-Node-3,
                          cryptoDict-Node-4,
                          cryptoDict-Node-5
                        ],
                        'cluster_name': 'My three Node Raft',
                        'display_name': 'ordering service node'
                      };

                      # Create Orderer
                      try:
                        response = client.create_orderer(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.create
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrdererResponse'
              examples:
                response:
                  value:
                    created:
                      -
                        id: component-1
                        dep_component_id: admin
                        api_url: 'grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050'
                        display_name: orderer
                        cluster_id: mzdqhdifnl
                        cluster_name: My one node OS
                        grpcwp_url: >-
                          https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443
                        location: ibmcloud
                        operations_url: 'https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443'
                        orderer_type: raft
                        config_override: {}
                        consenter_proposal_fin: true
                        node_ou:
                          enabled: true
                        msp:
                          ca:
                            name: ca
                            root_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                          tlsca:
                            name: tlsca
                            root_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                          component:
                            tls_cert: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            ecert: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            admin_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        msp_id: Org1
                        resources:
                          orderer:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          proxy:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                        scheme_version: v1
                        storage:
                          orderer:
                            size: 4GiB
                            class: default
                        system_channel_id: testchainid
                        tags:
                          - fabric-ca
                        timestamp: 1537262855753
                        type: fabric-peer
                        version: 1.4.6-1
                        zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/components/fabric-orderer:
    post:
      tags:
        - Manage component
      summary: Import an ordering service
      description: Import an existing Ordering Service (OS) to your IBP console. It is recommended to only import components that were created by this or another IBP console.
      operationId: import_orderer
      requestBody:
        description: Import an ordering service.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportOrdererBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/components/fabric-orderer" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                          \"display_name\": \"orderer node\",
                          \"cluster_id\": \"abcde\",
                          \"cluster_name\": \"My Raft OS\",
                          \"grpcwp_url\": \"https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443\",
                          \"api_url\": \"grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050\",
                          \"operations_url\": \"https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443\",
                          \"msp_id\": \"OrdererOrg1\",
                          \"system_channel_id\": \"testchainid\",
                          \"msp\": {
                              \"component\": {
                                \"tls_cert\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClRscyBjZXJ0IGRhdGEgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\",
                                \"ecert\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCklkZW50aXR5IGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\",
                                \"admin_certs\": [
                                  \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"
                                ]
                              },
                              \"tlsca\": {
                                \"root_certs\": [
                                  \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg\"
                                ]
                              },
                              \"ca\": {
                                \"root_certs\": [
                                  \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg\"
                                ]
                              }
                            }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // pre-req fields for the msp field ("ca", "tlsca", "component")
                      ca_name := "ca"
                      root_certs := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      ca := &blockchainv3.MspCryptoFieldCa{
                        Name: &ca_name,
                        RootCerts: root_certs,
                      }

                      tlsca_name := "ca"
                      tlsca_root_certs := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      tlsca := &blockchainv3.MspCryptoFieldTlsca{
                        Name: &tlsca_name,
                        RootCerts: tlsca_root_certs,
                      }

                      tlscert := "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClRscyBjZXJ0IGRhdGEgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
                      ecert := "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCklkZW50aXR5IGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"
                      admin_certs := []string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"}
                      component := &blockchainv3.MspCryptoFieldComponent{
                        TlsCert: &tlscert,
                        Ecert: &ecert,
                        AdminCerts: admin_certs,
                      }

                      // Create msp field
                      msp := &blockchainv3.MspCryptoField{
                        Ca: ca,                  // MspCryptoFieldCa
                        Tlsca: tlsca,            // MspCryptoFieldTlsca
                        Component: component,     // MspCryptoFieldComponent
                      }

                      // Import OS
                      opts := service.NewImportOrdererOptions(
                        "My Raft OS",
                        "My Imported Orderer",
                        "https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443",
                        msp,
                        "OrdererOrg1",
                      )
                      result, detailedResponse, err := service.ImportOrderer(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Import Orderer parameters
                      const opts = {
                        displayName: 'orderer node',
                        clusterId: 'abcde',
                        clusterName: 'My Raft OS',
                        grpcwpUrl: 'https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443',
                        apiUrl: 'grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050',
                        operationsUrl: 'https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443',
                        mspId: 'OrdererOrg1',
                        systemChannelId: 'testchainid',
                        msp: {
                          component: {
                            tls_cert: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClRscyBjZXJ0IGRhdGEgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                            ecert: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCklkZW50aXR5IGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                            admin_certs: [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'
                            ]
                          },
                          tlsca: {
                            root_certs: [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg'
                            ]
                          },
                          ca: {
                            root_certs: [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg'
                            ]
                          }
                        }
                      };

                      // Import Orderer
                      try {
                        const response = await client.importOrderer(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        String tlsCert = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHRENDQWI2Z0F3SUJBZ0lVSENXMzFhSWtxYVkxcFFSbmxPNldNNCtNb2t3d0NnWUlLb1pJemowRUF3SXcKWURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJFd0R3WURWUVFERXdoTmVVTkJMWFJzCmN6QWVGdzB4T1RFd01qRXlNREV4TURCYUZ3MHpOREV3TVRjeU1ERXhNREJhTUdBeEN6QUpCZ05WQkFZVEFsVlQKTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVVTUJJR0ExVUVDaE1MU0hsd1pYSnNaV1JuWlhJeApEekFOQmdOVkJBc1RCa1poWW5KcFl6RVJNQThHQTFVRUF4TUlUWGxEUVMxMGJITXdXVEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVFXYXc3M2FPV3dkMm1zMWxkQ0dBNEVpU212aHFlWTZzYi9RZWxQb0lZMVcwd3QKZ2RCUHFQQkVPN1lvRmdNandndmN1SjZjT3U4YWw0K0pVR0xFcW4wOW8xWXdWREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVUJhKzhpRUFFeEVHZXUzMzZEV0VLCmZ3ZmtBcFF3RHdZRFZSMFJCQWd3Qm9jRUNsNVRHVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdXozcWs0NEgKMHgrUWNFWk9CVk9pd2pManVFYXZVUEFDZU5CWmVhVkVHM1VDSUZLMjM1bUlwQTF5Q09OTXF2bE40RzI2TnZuWApvUFk4TDJGeWY3aTg0bm9lCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K";
                        String ecert = "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHRENDQWI2Z0F3SUJBZ0lVSENXMzFhSWtxYVkxcFFSbmxPNldNNCtNb2t3d0NnWUlLb1pJemowRUF3SXcKWURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJFd0R3WURWUVFERXdoTmVVTkJMWFJzCmN6QWVGdzB4T1RFd01qRXlNREV4TURCYUZ3MHpOREV3TVRjeU1ERXhNREJhTUdBeEN6QUpCZ05WQkFZVEFsVlQKTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVVTUJJR0ExVUVDaE1MU0hsd1pYSnNaV1JuWlhJeApEekFOQmdOVkJBc1RCa1poWW5KcFl6RVJNQThHQTFVRUF4TUlUWGxEUVMxMGJITXdXVEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVFXYXc3M2FPV3dkMm1zMWxkQ0dBNEVpU212aHFlWTZzYi9RZWxQb0lZMVcwd3QKZ2RCUHFQQkVPN1lvRmdNandndmN1SjZjT3U4YWw0K0pVR0xFcW4wOW8xWXdWREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVUJhKzhpRUFFeEVHZXUzMzZEV0VLCmZ3ZmtBcFF3RHdZRFZSMFJCQWd3Qm9jRUNsNVRHVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdXozcWs0NEgKMHgrUWNFWk9CVk9pd2pManVFYXZVUEFDZU5CWmVhVkVHM1VDSUZLMjM1bUlwQTF5Q09OTXF2bE40RzI2TnZuWApvUFk4TDJGeWY3aTg0bm9lCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K";
                        String[] admin_certs = new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHRENDQWI2Z0F3SUJBZ0lVSENXMzFhSWtxYVkxcFFSbmxPNldNNCtNb2t3d0NnWUlLb1pJemowRUF3SXcKWURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJFd0R3WURWUVFERXdoTmVVTkJMWFJzCmN6QWVGdzB4T1RFd01qRXlNREV4TURCYUZ3MHpOREV3TVRjeU1ERXhNREJhTUdBeEN6QUpCZ05WQkFZVEFsVlQKTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVVTUJJR0ExVUVDaE1MU0hsd1pYSnNaV1JuWlhJeApEekFOQmdOVkJBc1RCa1poWW5KcFl6RVJNQThHQTFVRUF4TUlUWGxEUVMxMGJITXdXVEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVFXYXc3M2FPV3dkMm1zMWxkQ0dBNEVpU212aHFlWTZzYi9RZWxQb0lZMVcwd3QKZ2RCUHFQQkVPN1lvRmdNandndmN1SjZjT3U4YWw0K0pVR0xFcW4wOW8xWXdWREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVUJhKzhpRUFFeEVHZXUzMzZEV0VLCmZ3ZmtBcFF3RHdZRFZSMFJCQWd3Qm9jRUNsNVRHVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdXozcWs0NEgKMHgrUWNFWk9CVk9pd2pManVFYXZVUEFDZU5CWmVhVkVHM1VDSUZLMjM1bUlwQTF5Q09OTXF2bE40RzI2TnZuWApvUFk4TDJGeWY3aTg0bm9lCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" };
                        String[] tlsca_root_certs = new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUIvakNDQWFTZ0F3SUJBZ0lVVThuZXFoeWtPQWZaNkN2amhPU2x5Q25XU09rd0NnWUlLb1pJemowRUF3SXcKWFRFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVE0d0RBWURWUVFERXdWMGJITmpZVEFlCkZ3MHlNREF6TVRFeE5qUXpNREJhRncwek5UQXpNRGd4TmpRek1EQmFNRjB4Q3pBSkJnTlZCQVlUQWxWVE1SY3cKRlFZRFZRUUlFdzVPYjNKMGFDQkRZWEp2YkdsdVlURVVNQklHQTFVRUNoTUxTSGx3WlhKc1pXUm5aWEl4RHpBTgpCZ05WQkFzVEJrWmhZbkpwWXpFT01Bd0dBMVVFQXhNRmRHeHpZMkV3V1RBVEJnY3Foa2pPUFFJQkJnZ3Foa2pPClBRTUJCd05DQUFUT1dBUEE2N2w1NmFWeW9DRXIyVk00eDBNRW9qNzF0SHJtYjhjTDE1WklJUGdOREIrQzd5NzYKeDBVLzdPNlJta3d0b2d4SnFFU2dWUnJGM1FqalZERTZvMEl3UURBT0JnTlZIUThCQWY4RUJBTUNBUVl3RHdZRApWUjBUQVFIL0JBVXdBd0VCL3pBZEJnTlZIUTRFRmdRVVU5Zk94dW1xakhPMTd2VkR6MnIxcHhHeVJYc3dDZ1lJCktvWkl6ajBFQXdJRFNBQXdSUUloQVBNNVV2STl3MDhhdjRWUG5CckhDbFh3OWJqejEwRTJaOHN1ckZoWnhoY2wKQWlCNm9CWVhPejZWSTl0NVBSekJTV3JMRmZtbUxvQ1p5cXZWMFJ0enNYdi9PZz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" };
                        String[] ca_root_certs = new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHRENDQWI2Z0F3SUJBZ0lVSENXMzFhSWtxYVkxcFFSbmxPNldNNCtNb2t3d0NnWUlLb1pJemowRUF3SXcKWURFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJFd0R3WURWUVFERXdoTmVVTkJMWFJzCmN6QWVGdzB4T1RFd01qRXlNREV4TURCYUZ3MHpOREV3TVRjeU1ERXhNREJhTUdBeEN6QUpCZ05WQkFZVEFsVlQKTVJjd0ZRWURWUVFJRXc1T2IzSjBhQ0JEWVhKdmJHbHVZVEVVTUJJR0ExVUVDaE1MU0hsd1pYSnNaV1JuWlhJeApEekFOQmdOVkJBc1RCa1poWW5KcFl6RVJNQThHQTFVRUF4TUlUWGxEUVMxMGJITXdXVEFUQmdjcWhrak9QUUlCCkJnZ3Foa2pPUFFNQkJ3TkNBQVFXYXc3M2FPV3dkMm1zMWxkQ0dBNEVpU212aHFlWTZzYi9RZWxQb0lZMVcwd3QKZ2RCUHFQQkVPN1lvRmdNandndmN1SjZjT3U4YWw0K0pVR0xFcW4wOW8xWXdWREFPQmdOVkhROEJBZjhFQkFNQwpBUVl3RWdZRFZSMFRBUUgvQkFnd0JnRUIvd0lCQVRBZEJnTlZIUTRFRmdRVUJhKzhpRUFFeEVHZXUzMzZEV0VLCmZ3ZmtBcFF3RHdZRFZSMFJCQWd3Qm9jRUNsNVRHVEFLQmdncWhrak9QUVFEQWdOSUFEQkZBaUVBdXozcWs0NEgKMHgrUWNFWk9CVk9pd2pManVFYXZVUEFDZU5CWmVhVkVHM1VDSUZLMjM1bUlwQTF5Q09OTXF2bE40RzI2TnZuWApvUFk4TDJGeWY3aTg0bm9lCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" };

                        MspCryptoFieldCa ca = new MspCryptoFieldCa.Builder().rootCerts(Arrays.asList(ca_root_certs))
                                        .build();
                        MspCryptoFieldTlsca tlsca = new MspCryptoFieldTlsca.Builder()
                                        .rootCerts(Arrays.asList(tlsca_root_certs)).build();
                        MspCryptoFieldComponent component = new MspCryptoFieldComponent.Builder()
                                        .adminCerts(Arrays.asList(admin_certs)).ecert(ecert).tlsCert(tlsCert).build();
                        MspCryptoField msp = new MspCryptoField.Builder().component(component).tlsca(tlsca).ca(ca)
                                        .build();

                        ImportOrdererOptions options = new ImportOrdererOptions.Builder()
                                .displayName("my imported orderer")
                                .clusterId("abcde")
                                .clusterName("My Raft OS")
                                .grpcwpUrl("https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443")
                                .apiUrl("grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050")
                                .operationsUrl("https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443")
                                .mspId("OrdererOrg1"),
                                .msp(msp)
                                .systemChannelId("testchainid").build();


                        ServiceCall<OrdererResponse> call = service.importOrderer(options);
                        Response<OrdererResponse> response = call.execute();
                        response = call.execute();

                        assertThat(response).isNotNull();
                        assertThat(response.getResult()).isEqualTo(200);
                        OrdererResponse peerResponse = response.getResult();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Import Orderer parameters
                      opts = {
                        'display_name': 'orderer node',
                        'cluster_id': 'abcde',
                        'cluster_name': 'My Raft OS',
                        'grpcwp_url': 'https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443',
                        'api_url': 'grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050',
                        'operations_url': 'https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443',
                        'msp_id': 'OrdererOrg1',
                        'system_channel_id': 'testchainid',
                        'msp': {
                          'component': {
                            'tls_cert': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tClRscyBjZXJ0IGRhdGEgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                            'ecert': 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCklkZW50aXR5IGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                            'admin_certs': [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'
                            ]
                          },
                          'tlsca': {
                            'root_certs': [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg'
                            ]
                          },
                          'ca': {
                            'root_certs': [
                              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRpZmZlcmVudCBkYXRhIGhlcmUgaWYgdGhpcyB3YXMgcmVhbAotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg'
                            ]
                          }
                        }
                      };

                      # Import Orderer
                      try:
                        response = client.import_orderer(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.import
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdererResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    api_url: 'grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050'
                    display_name: orderer
                    grpcwp_url: >-
                      https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443
                    location: ibmcloud
                    operations_url: 'https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443'
                    orderer_type: raft
                    config_override: {}
                    consenter_proposal_fin: true
                    node_ou:
                      enabled: true
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    resources:
                      orderer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    storage:
                      orderer:
                        size: 4GiB
                        class: default
                    system_channel_id: testchainid
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    type: fabric-peer
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/components/fabric-orderer/{id}:
    put:
      tags:
        - Manage component
      summary: Edit data about an orderer
      description: Modify local metadata fields of a single node in an Ordering Service (OS). For example, the "display_name" field. This API will **not** change any Kubernetes deployment attributes for the node.
      operationId: edit_orderer
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: Edit local metadata about an Orderer. All body fields are optional (only send the fields that you want to change).
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditOrdererDataBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/components/fabric-orderer/{Component-ID}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"cluster_name\": \"My Other OS\",
                            \"display_name\": \"ordering node\",
                            \"msp_id\": \"orderermsp\"
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Edit Orderer Data
                      opts := service.NewEditOrdererOptions("{Component-ID}")
                      opts.SetClusterName("My Other OS")
                      opts.SetDisplayName("ordering node")
                      opts.SetMspID("orderermsp")
                      result, detailedResponse, err := service.EditOrderer(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Edit Orderer parameters
                      const opts = {
                        id: '{Component-ID}',
                        clusterName: 'My Other OS',
                        displayName: 'ordering node',
                        mspId: 'orderermsp'
                      };

                      // Edit Orderer
                      try {
                        const response = await client.editOrderer(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        EditOrdererOptions options = new EditOrdererOptions.Builder()
                        .id(fakeOrdererId)
                        .displayName("Updated Display Name").build();

                        ServiceCall<OrdererResponse> call = bc.editOrderer(options);
                        Response<OrdererResponse> response = call.execute();

                        OrdererResponse ordererResponse = response.getResult();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Edit Orderer parameters
                      opts = {
                        'id': '{Component-ID}',
                        'cluster_name': 'My Other OS',
                        'display_name': 'ordering node',
                        'msp_id': 'orderermsp'
                      }

                      # Edit Orderer
                      try:
                        response = client.edit_orderer(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdererResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    api_url: 'grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050'
                    display_name: orderer
                    grpcwp_url: >-
                      https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443
                    location: ibmcloud
                    operations_url: 'https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443'
                    orderer_type: raft
                    config_override: {}
                    consenter_proposal_fin: true
                    node_ou:
                      enabled: true
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    resources:
                      orderer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    storage:
                      orderer:
                        size: 4GiB
                        class: default
                    system_channel_id: testchainid
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    type: fabric-peer
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/kubernetes/components/fabric-orderer/{id}/actions:
    post:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Submit action to an orderer
      description: Submit an action to a Fabric Orderer component. Actions such as restarting the component or certificate operations.
      operationId: orderer_action
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: The action(s) to perform.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrdererActionsBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-orderer/{Component-ID}/actions" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"restart\": true
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      id := "myos"
                      restart := true
                      opts := &blockchainv3.OrdererActionOptions{
                        ID: &id,
                        Restart: &restart,
                      }

                      // Restart Ordering Node
                      result, detailedResponse, err := service.OrdererAction(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Send Orderer Action parameters
                      const opts = {
                          id: '{Component-ID}',
                          restart: true
                      };

                      // Send Orderer Action
                      try {
                        const response = await client.ordererAction(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        OrdererActionOptions options = new OrdererActionOptions.Builder()
                        .id(fakeOrdererId)
                        .restart(true).build();

                        ServiceCall<ActionsResponse> call = bc.ordererAction(options);
                        Response<ActionsResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        ActionsResponse ordererResponse = response.getResult();


                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Send Orderer Action
                      try:
                        response = client.orderer_action(
                          id='{Component-ID}',
                          restart=True
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.configure
      responses:
        202:
          description: Request was received successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionsResponse'
              examples:
                response:
                  value:
                    message: accepted
                    id: my-ca
                    actions:
                      - restart
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/kubernetes/components/fabric-orderer/{id}:
    put:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Update an orderer node
      description: Update Kubernetes deployment attributes of a Hyperledger Fabric Ordering node.
      operationId: update_orderer
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: Update an orderer node in your Kubernetes cluster. **Only set 1 root body field.** Use multiple API requests to change multiple fields.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrdererBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/kubernetes/components/fabric-orderer/{Component-ID}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"resources\":{
                              \"orderer\":{
                                \"requests\":{
                                  \"cpu\": \"500m\",
                                  \"memory\":\"1024Mi\"
                                }
                              }
                            }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Update Orderer
                      cpu := "500m"
                      memory := "1024Mi"
                      requests := &blockchainv3.ResourceRequests{Cpu: &cpu, Memory: &memory}

                      resourceObject, err := service.NewResourceObject(requests)
                      if err != nil {
                        return
                      }

                      ordererResources := &blockchainv3.UpdateOrdererBodyResources{Orderer: resourceObject}
                      opts := service.NewUpdateOrdererOptions("{Component-ID}")
                      opts.SetResources(ordererResources)
                      result, detailedResponse, err := service.UpdateOrderer(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Update Orderer parameters
                      const opts = {
                        id: '{Component-ID}',
                        resources: {
                          orderer: {
                            requests: {
                              cpu: '500m',
                              memory: '1024Mi'
                            }
                          }
                        }
                      };

                      // Update Orderer
                      try {
                        const response = await client.updateOrderer(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ResourceRequests requests = new ResourceRequests.Builder().cpu("200m").memory("256Mi").build();
                        ResourceObject peer = new ResourceObject.Builder().requests(requests).build();

                        UpdateOrdererBodyResources ordererResources = new UpdateOrdererBodyResources.Builder().orderer(peer).build();

                        UpdateOrdererOptions options = new UpdateOrdererOptions.Builder().id(fakeOrdererId).resources(ordererResources)
                                        .build();

                        ServiceCall<OrdererResponse> call = bc.updateOrderer(options);
                        Response<OrdererResponse> response = call.execute();
                        response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        OrdererResponse peerResponse = response.getResult();
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Update Orderer parameters
                      opts = {
                        'id': '{Component-ID}',
                        'resources': {
                          'orderer': {
                            'requests': {
                              'cpu': '500m',
                              'memory': '1024Mi'
                            }
                          }
                        }
                      }

                      # Update Orderer
                      try:
                        response = client.update_orderer(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdererResponse'
              examples:
                response:
                  value:
                    id: component-1
                    dep_component_id: admin
                    api_url: 'grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050'
                    display_name: orderer
                    grpcwp_url: >-
                      https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443
                    location: ibmcloud
                    operations_url: 'https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443'
                    orderer_type: raft
                    config_override: {}
                    consenter_proposal_fin: true
                    node_ou:
                      enabled: true
                    msp:
                      ca:
                        name: ca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: tlsca
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    resources:
                      orderer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    storage:
                      orderer:
                        size: 4GiB
                        class: default
                    system_channel_id: testchainid
                    tags:
                      - fabric-ca
                    timestamp: 1537262855753
                    type: fabric-peer
                    version: 1.4.6-1
                    zone: '-'
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/kubernetes/components/{id}/config:
    put:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Submit config block to orderer
      description: |
        Send a config block (or genesis block) to a pre-created raft orderer node. Use this api to finish the raft-append flow and finalize a pre-created orderer. This is the final step to append a node to a raft cluster. The orderer will restart, load this block, and connect to the other orderers listed in said block.

        The full flow to append a raft node:
          1. Pre-create the orderer with the [Create an ordering service](#create-orderer) API (setting `cluster_id` is how you turn the normal create-orderer api into a pre-create-orderer api).
          2. Retrieve the pre-created node's tls cert with the [Get component data](#get-component) API (set the `deployment_attrs=included` parameter).
          3. Get the latest config block for the system-channel by using the Fabric API (use a Fabric CLI or another Fabric tool).
          4. Edit the config block for the system-channel and add the pre-created orderer's tls cert and api url as a consenter.
          5. Create and marshal a Fabric [ConfigUpdate](https://github.com/hyperledger/fabric/blob/release-1.4/protos/common/configtx.proto#L78) proposal with [configtxlator](https://hyperledger-fabric.readthedocs.io/en/release-1.4/commands/configtxlator.html#configtxlator-compute-update) using the old and new block.
          6. Sign the `ConfigUpdate` proposal and create a [ConfigSignature](https://github.com/hyperledger/fabric/blob/release-1.4/protos/common/configtx.proto#L111). Create a set of signatures that will satisfy the system channel's update policy.
          7. Build a [SignedProposal](https://github.com/hyperledger/fabric/blob/release-1.4/protos/peer/proposal.proto#L105) out of the `ConfigUpdate` & `ConfigSignature`. Submit the `SignedProposal` to an existing ordering node (do not use the pre-created node).
          8. After the `SignedProposal` transaction is committed to a block, pull the latest config block (for the system-channel) from an existing ordering node (use a Fabric CLI or another Fabric tool).
          9. Submit the latest config block to your pre-created node with the 'Submit config block to orderer' API (which is this api!)
          10. Use the [Edit data about an orderer](#edit-orderer) API to change the pre-created node's field `consenter_proposal_fin` to `true`. This changes the status icon on the IBP console.
      operationId: submit_block
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: Send a config block.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitConfigBlock'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/kubernetes/components/{Component-ID}/config" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"b64_block\":\"bWFzc2l2ZSBiaW5hcnkgb2YgYSBjb25maWcgYmxvY2sgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsLCBwbGVhc2UgZG9udCBzZW5kIHRoaXM=\"
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Submit Config Block
                      opts := service.NewSubmitBlockOptions("{Component-ID}")
                      opts.SetB64Block("bWFzc2l2ZSBiaW5hcnkgb2YgYSBjb25maWcgYmxvY2sgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsLCBwbGVhc2UgZG9udCBzZW5kIHRoaXM=")
                      result, detailedResponse, err := service.SubmitBlock(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Submit Config Block parameters
                      const opts = {
                        id: '{Component-ID}',
                        b64Block: 'bWFzc2l2ZSBiaW5hcnkgb2YgYSBjb25maWcgYmxvY2sgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsLCBwbGVhc2UgZG9udCBzZW5kIHRoaXM='
                      };

                      // Submit Config Block to Orderer
                      try {
                        const response = await client.submitBlock(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        SubmitBlockOptions options = new SubmitBlockOptions.Builder()
                                  .id(componentid)
                                  .block(b64Block)
                                .build()

                        ServiceCall<GenericComponentResponse> call = bc.submitBlock(options);
                        Response<GenericComponentResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Submit Config Block to Orderer
                      try:
                        response = client.submit_block(
                          id='{Component-ID}',
                          b64_block='bWFzc2l2ZSBiaW5hcnkgb2YgYSBjb25maWcgYmxvY2sgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsLCBwbGVhc2UgZG9udCBzZW5kIHRoaXM='
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericComponentResponse'
              examples:
                response:
                  value:
                    id: myca-2
                    type: fabric-ca
                    display_name: Example CA
                    grpcwp_url: >-
                      https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                    api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                    operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                    msp:
                      ca:
                        name: org1CA
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      tlsca:
                        name: org1tlsCA
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                      component:
                        tls_cert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        ecert: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admin_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    msp_id: Org1
                    location: ibmcloud
                    node_ou:
                      enabled: true
                    resources:
                      ca:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      peer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      orderer:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      proxy:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                      statedb:
                        requests:
                          cpu: 100m
                          memory: 64M
                        limits:
                          cpu: 8000m
                          memory: 16384M
                    scheme_version: v1
                    state_db: couchdb
                    storage:
                      ca:
                        size: 4GiB
                        class: default
                      peer:
                        size: 4GiB
                        class: default
                      orderer:
                        size: 4GiB
                        class: default
                      statedb:
                        size: 4GiB
                        class: default
                    timestamp: 1537262855753
                    tags:
                      - fabric-ca
                    version: 1.4.6-1
                    zone: '-'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/components/msp:
    post:
      tags:
        - Manage component
      summary: Import an MSP
      description: Create or import a Membership Service Provider (MSP) definition into your IBP console. This definition represents an organization that controls a peer or OS (Ordering Service).
      operationId: import_msp
      requestBody:
        description: Create or import an MSP.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImportMSPBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/components/msp" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"msp_id\": \"org1\",
                            \"display_name\": \"My First Org\",
                            \"root_certs\": [\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo\"],
                            \"admins\": [\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"],
                            \"tls_root_certs\": [
                              \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo\"
                            ]
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Import MSP Definition
                      rootCerts := [1]string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      admins := [1]string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="}
                      tlsRootCerts := [1]string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo"}
                      opts := service.NewImportMspOptions("org1", "My First Org", rootCerts[:])
                      opts.SetAdmins(admins[:])
                      opts.SetTlsRootCerts(tlsRootCerts[:])
                      result, detailedResponse, err := service.ImportMsp(opts)

                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Import MSP parameters
                      const opts = {
                        mspId: 'org1',
                        displayName: 'My First Org',
                        rootCerts: [
                          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo'
                        ],
                        admins: [
                          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
                        ],
                        tlsRootCerts: [
                          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo'
                        ]
                      };

                      // Import MSP
                      try {
                        const response = await client.importMsp(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        List<String> rootCerts = Arrays.asList(new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNHVENDQWIrZ0F3SUJBZ0lVY1NLNjBlUE9CNGI1MUIzekZsSnkrYkUzbnlnd0NnWUlLb1pJemowRUF3SXcKWWpFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJNd0VRWURWUVFERXdwdmNtY3hZMkV4CkxXTmhNQjRYRFRJd01UQXhNekUwTlRFd01Gb1hEVE0xTVRBeE1ERTBOVEV3TUZvd1lqRUxNQWtHQTFVRUJoTUMKVlZNeEZ6QVZCZ05WQkFnVERrNXZjblJvSUVOaGNtOXNhVzVoTVJRd0VnWURWUVFLRXd0SWVYQmxjbXhsWkdkbApjakVQTUEwR0ExVUVDeE1HUm1GaWNtbGpNUk13RVFZRFZRUURFd3B2Y21jeFkyRXhMV05oTUZrd0V3WUhLb1pJCnpqMENBUVlJS29aSXpqMERBUWNEUWdBRXpHRmZMdWV6SmxYdDlBa1A3VmNBb0RVeGJvVDBpYUxTTWl4bDRkVi8Kay9sUm5XUUpSdFVZdGk0cWxOQVFqd2JNTlRmWVc2TjQwWG1rdEkxMzRrKyt6cU5UTUZFd0RnWURWUjBQQVFILwpCQVFEQWdFR01BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZMbkRDWFNiZXFCc3plYy84Yi9FCmxFcG9hTVhITUE4R0ExVWRFUVFJTUFhSEJIOEFBQUV3Q2dZSUtvWkl6ajBFQXdJRFNBQXdSUUloQU16T2pBelIKR1lKL3F3eVh5Wm5EVXo2eU53S2VtTFVkendISEwyTU9FZXZ2QWlCd3VMZEZ6VlhubzY0ZEJSMG43czBMdk1XbQo0bTdNRFBZQzJzQlg4K3hIRXc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==" });
                        List<String> admins = Arrays.asList(new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0ekNDQVlxZ0F3SUJBZ0lVV0J3NHcxMXNVVm9oU0N6WGZ4dWxQVzFRTDFRd0NnWUlLb1pJemowRUF3SXcKWWpFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJNd0VRWURWUVFERXdwdmNtY3hZMkV4CkxXTmhNQjRYRFRJd01UQXhNekUwTlRVd01Gb1hEVEl4TVRBeE16RTFNREF3TUZvd0lERU9NQXdHQTFVRUN4TUYKWVdSdGFXNHhEakFNQmdOVkJBTVRCV0ZrYldsdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEUWdBRQo5bVZlM0ZzUlNsTjhKemhDVlhmUHdkci9yc0dyZnlSNzJjUjFGdVRPNnhqVE1TNko5M0hsdUZ2YXdrWUFMUk13CmJFNHZLYXpDVWE0bjkyeDNNVDc5eWFOZ01GNHdEZ1lEVlIwUEFRSC9CQVFEQWdlQU1Bd0dBMVVkRXdFQi93UUMKTUFBd0hRWURWUjBPQkJZRUZFY1lLUTcwU1cvVkZLM210d0M0R3JFUFUzUjlNQjhHQTFVZEl3UVlNQmFBRkxuRApDWFNiZXFCc3plYy84Yi9FbEVwb2FNWEhNQW9HQ0NxR1NNNDlCQU1DQTBjQU1FUUNJRnZQWWhNNVNIMmEwSUpoClloem1lN1lrOWlSSDNDOStlNmMrbjkwcHE2bW5BaUJBQlJGSzlPUmJlc2hJb1QrOWxwbENUbVhWelJsenJDR1gKUVE4NS94Ykdudz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" });
                        List<String> tlsRootCerts = Arrays.asList(new String[] {
                                        "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUNEVENDQWJTZ0F3SUJBZ0lVVGJwSVdaUlRCcFV3SVhqZW9xQzlKSk56T2NFd0NnWUlLb1pJemowRUF3SXcKWlRFTE1Ba0dBMVVFQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRSwpFd3RJZVhCbGNteGxaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJZd0ZBWURWUVFERXcxdmNtY3hZMkV4CkxYUnNjMk5oTUI0WERUSXdNVEF4TXpFME5URXdNRm9YRFRNMU1UQXhNREUwTlRFd01Gb3daVEVMTUFrR0ExVUUKQmhNQ1ZWTXhGekFWQmdOVkJBZ1REazV2Y25Sb0lFTmhjbTlzYVc1aE1SUXdFZ1lEVlFRS0V3dEllWEJsY214bApaR2RsY2pFUE1BMEdBMVVFQ3hNR1JtRmljbWxqTVJZd0ZBWURWUVFERXcxdmNtY3hZMkV4TFhSc2MyTmhNRmt3CkV3WUhLb1pJemowQ0FRWUlLb1pJemowREFRY0RRZ0FFVS9LZTFMNTdxQlNycTcrK0d3eU5oTTR2eEc2WWtEUVoKNHFMR25yOTBYNTBJYjlOTUhyWVpXam5kNXpoZE5JTlJYZnowOTJDZkYvYlRGM3BuMnRvK3RxTkNNRUF3RGdZRApWUjBQQVFIL0JBUURBZ0VHTUE4R0ExVWRFd0VCL3dRRk1BTUJBZjh3SFFZRFZSME9CQllFRkRzY2lSL3Z1TGcyCmZzQ05jU0dQc1RoUTY5WEFNQW9HQ0NxR1NNNDlCQU1DQTBjQU1FUUNJREd4MG5ZVmtRK2Y4T0RmL3lyQUdvSEkKSGhQbU42OUtCL3djRzM2RG5tRWxBaUI3dHczT3pYNldLVmFiSm9XelpRNExWNlJhRnJtMFpPVGhxWk5CbVVSdAo4Zz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K" });

                        ImportMspOptions importMspOptions = new ImportMspOptions.Builder().mspId("org1")
                                        .displayName("My First Org").rootCerts(rootCerts).admins(admins)
                                        .tlsRootCerts(tlsRootCerts).build();

                        ServiceCall<MspResponse> call = service.importMsp(importMspOptions);
                        Response<MspResponse> resp = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        MspResponse actionresp = resp.getResult();
                        System.out.println(actionresp.getDisplayName());
                        mspId = actionresp.getMspId();
                        mspUID = actionresp.getId();

                        System.out.println("Imported MSP uid="+mspUID+" id="+mspId);

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Import MSP parameters
                      opts = {
                        'msp_id': 'org1',
                        'display_name': 'My First Org',
                        'root_certs': [
                          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo'
                        ],
                        'admins': [
                          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkFkbWluIGNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
                        ],
                        'tls_root_certs': [
                          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo'
                        ]
                      }

                      # Import MSP
                      try:
                        response = client.import_msp(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.import
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MspResponse'
              examples:
                response:
                  value:
                    id: component-1
                    type: fabric-peer
                    display_name: My Peer
                    msp_id: Org1
                    timestamp: 1537262855753
                    tags:
                      - fabric-ca
                    root_certs:
                      - >-
                        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    intermediate_certs:
                      - >-
                        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
                    admins:
                      - >-
                        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    scheme_version: v1
                    tls_root_certs:
                      - >-
                        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/components/msp/{id}:
    put:
      tags:
        - Manage component
      summary: Edit an MSP
      description: Modify local metadata fields of a Membership Service Provider (MSP) definition. For example, the "display_name" property.
      operationId: edit_msp
      parameters:
        - $ref: '#/components/parameters/PathIdEdit'
      requestBody:
        description: Edit an MSP.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMspBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/components/{Msp-ID}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"display_name\": \"My Other MSP\"
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Edit MSP
                      opts := service.NewEditMspOptions("{Msp-Id}")
                      opts.SetDisplayName("My Other MSP")
                      result, detailedResponse, err := service.EditMsp(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Edit MSP parameters
                      const opts = {
                        id: '{Component-ID}',
                        displayName: 'My Other Org',
                      };

                      // Edit MSP
                      try {
                        const response = await client.editMsp(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        EditMspOptions options = new EditMspOptions.Builder().id(mspUID).displayName("Updated MSP")
                                        .build();
                        ServiceCall<MspResponse> call = bc.editMsp(options);

                        Response<MspResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        MspResponse actionresp = resp.getResult();
                        System.out.println(actionresp.getDisplayName());

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Edit MSP
                      try:
                        response = client.edit_msp(
                          id='{Component-ID}',
                          display_name='My Other Org',
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MspResponse'
              examples:
                response:
                  value:
                    id: component-1
                    type: fabric-peer
                    display_name: My Peer
                    msp_id: Org1
                    timestamp: 1537262855753
                    tags:
                      - fabric-ca
                    root_certs:
                      - >-
                        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    intermediate_certs:
                      - >-
                        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
                    admins:
                      - >-
                        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                    scheme_version: v1
                    tls_root_certs:
                      - >-
                        LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/components/msps/{msp_id}:
    get:
      tags:
        - Manage component
      summary: Get MSP's public certificates
      description: External IBP consoles can use this API to get the public certificate for your given MSP id.
      operationId: get_msp_certificate
      parameters:
        - name: msp_id
          in: path
          description: The `msp_id` to fetch
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/QueryCache'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/components/msps/{Msp-ID}" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get msp id data for msp
                      opts := service.NewGetMspCertificateOptions("{Msp-ID}")
                      result, detailedResponse, err := service.GetMspCertificate(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get MSP Certificate parameters
                      const opts = {
                        mspId: '{Msp-ID}',
                      };

                      // Get MSP Certificate
                      try {
                        const response = await client.getMspCertificate(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        GetMspCertificateOptions getMspCertificateOptions = new GetMspCertificateOptions.Builder()
                                        .mspId(mspId).build();

                        ServiceCall<GetMSPCertificateResponse> call = service
                                        .getMspCertificate(getMspCertificateOptions);
                        Response<GetMSPCertificateResponse> resp = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get MSP Certificate
                      try:
                        response = client.get_msp_certificate(
                          msp_id='{Component-ID}',
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMSPCertificateResponse'
              examples:
                response:
                  value:
                    msps:
                      - msp_id: Org1
                        root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        admins:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        tls_root_certs:
                          - >-
                            LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/settings:
    get:
      tags:
        - Administer the IBP console
      summary: Get public IBP console settings
      description: Retrieve all public (non-sensitive) settings for the IBP console. Use this API for debugging purposes. It shows what behavior to expect and confirms whether the desired settings are active.
      operationId: get_settings
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/settings" \
                      -H "Content-Type: application/json"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get IBP settings
                      opts := service.NewGetSettingsOptions()
                      result, detailedResponse, err := service.GetSettings(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get IBP Console Settings
                      try {
                        const response = await client.getSettings();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ServiceCall<GetPublicSettingsResponse> call = bc.getSettings();
                        Response<GetPublicSettingsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get IBP Console Settings
                      try:
                        response = client.get_settings()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.ibp_console.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicSettingsResponse'
              examples:
                response:
                  value:
                    ACTIVITY_TRACKER_PATH: /logs
                    ATHENA_ID: 17v7e
                    AUTH_SCHEME: iam
                    CALLBACK_URI: /auth/cb
                    CLUSTER_DATA:
                      type: paid
                    CONFIGTXLATOR_URL: 'https://n3a3ec3-configtxlator.ibp.us-south.containers.appdomain.cloud'
                    CRN:
                      account_id: a/abcd
                      c_name: staging
                      c_type: public
                      instance_id: abc123
                      location: us-south
                      resource_id: '-'
                      resource_type: '-'
                      service_name: blockchain
                      version: v1
                    CRN_STRING: 'crn:v1:staging:public:blockchain:us-south:a/abcd:abc123::'
                    CSP_HEADER_VALUES:
                      - '-'
                    DB_SYSTEM: system
                    DEPLOYER_URL: 'https://api.dev.blockchain.cloud.ibm.com'
                    DOMAIN: localhost
                    ENVIRONMENT: prod
                    FABRIC_CAPABILITIES:
                      application:
                        - V1_1
                      channel:
                        - V1_1
                      orderer:
                        - V1_1
                    FEATURE_FLAGS: {}
                    FILE_LOGGING:
                      server:
                        client:
                          enabled: true
                          level: silly
                          unique_name: false
                        server:
                          enabled: true
                          level: silly
                          unique_name: false
                      client:
                        client:
                          enabled: true
                          level: silly
                          unique_name: false
                        server:
                          enabled: true
                          level: silly
                          unique_name: false
                    HOST_URL: 'http://localhost:3000'
                    IAM_CACHE_ENABLED: true
                    IAM_URL: '-'
                    IBM_ID_CALLBACK_URL: 'http://localhost:3000/auth/login'
                    IGNORE_CONFIG_FILE: true
                    INACTIVITY_TIMEOUTS:
                      enabled: true
                      max_idle_time: 60000
                    INFRASTRUCTURE: ibmcloud
                    LANDING_URL: 'http://localhost:3000'
                    LOGIN_URI: /auth/login
                    LOGOUT_URI: /auth/logout
                    MAX_REQ_PER_MIN: 25
                    MAX_REQ_PER_MIN_AK: 25
                    MEMORY_CACHE_ENABLED: true
                    PORT: 3000
                    PROXY_CACHE_ENABLED: true
                    PROXY_TLS_FABRIC_REQS: always
                    PROXY_TLS_HTTP_URL: 'http://localhost:3000'
                    PROXY_TLS_WS_URL: 'http://localhost:3000'
                    REGION: us_south
                    SESSION_CACHE_ENABLED: true
                    TIMEOUTS: {}
                    TIMESTAMPS:
                      now: 1542746836056
                      born: 1542746836056
                      next_settings_update: 1.2 mins
                      up_time: 30 days
                    TRANSACTION_VISIBILITY: {}
                    TRUST_PROXY: loopback
                    TRUST_UNKNOWN_CERTS: true
                    VERSIONS:
                      apollo: 65f3cbfd
                      athena: 1198f94
                      stitch: 0f1a0c6
                      tag: v0.4.31
    put:
      tags:
        - Administer the IBP console
      summary: Change IBP console settings
      description: Edit a few IBP console settings (such as the rate limit and timeout settings). **Some edits will trigger an automatic server restart.**
      operationId: edit_settings
      requestBody:
        description: IBP console settings that can be edited. Each setting field is optional.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditSettingsBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/settings" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"max_req_per_min_ak\": 50,
                            \"fabric_install_cc_timeout_ms\": 350000,
                            \"file_logging\":{
                              \"client\": {
                                \"enabled\": true,
                                \"level\": \"debug\",
                                \"unique_name\": false
                              },
                              \"server\": {
                                \"enabled\": true,
                                \"level\": \"info\",
                                \"unique_name\": false
                              }
                            }
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Create variables that require a reference
                      boolean_false := false
                      boolean_true := true
                      type_float64 := float64(89999)
                      debug_level := "debug"
                      info_level := "info"

                      // Create logging service structs
                      clientLoggingSettings := &blockchainv3.LoggingSettingsClient{Enabled: &boolean_true, Level: &debug_level, UniqueName: &boolean_false}
                      serverLoggingSettings := &blockchainv3.LoggingSettingsServer{Enabled: &boolean_true, Level: &info_level, UniqueName: &boolean_false}

                      // Edit IBP Console Settings options
                      opts := service.NewEditSettingsOptions()
                      opts.SetMaxReqPerMin(float64(50))
                      opts.SetInactivityTimeouts(&blockchainv3.EditSettingsBodyInactivityTimeouts{Enabled: &boolean_false, MaxIdleTime: &type_float64})
                      opts.SetFileLogging(&blockchainv3.EditLogSettingsBody{Client: clientLoggingSettings, Server: serverLoggingSettings})
                      opts.SetFabricLcGetCcTimeoutMs(float64(350000))
                      result, detailedResponse, err := service.EditSettings(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Edit IBP Console Settings parameters
                      const opts = {
                        maxReqPerMinAk: 50,
                        fabricInstallCcTimeoutMs: 350000,
                        fileLogging: {
                          client: {
                            enabled: true,
                            level: 'debug',
                            unique_name: false
                          },
                          server: {
                            enabled: true,
                            level: 'info',
                            unique_name: false
                          }
                        }
                      };

                      // Edit IBP Console Settings
                      try {
                        const response = await client.editSettings(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        EditSettingsOptions options = new EditSettingsOptions.Builder()
                            .fabricInstallCcTimeoutMs((Double)350000.0)
                            .build();
                        ServiceCall<GetPublicSettingsResponse> call = service.editSettings(options);
                        Response<GetPublicSettingsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Edit IBP Console Settings parameters
                      opts = {
                        'max_req_per_min_ak': 50,
                        'fabric_install_cc_timeout_ms': 350000,
                        'file_logging': {
                          'client': {
                            'enabled': True,
                            'level': 'debug',
                            'unique_name': False
                          },
                          'server': {
                            'enabled': True,
                            'level': 'info',
                            'unique_name': False
                          }
                        }
                      }

                      # Edit IBP Console Settings
                      try:
                        response = client.edit_settings(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.ibp_console.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicSettingsResponse'
              examples:
                response:
                  value:
                    ACTIVITY_TRACKER_PATH: /logs
                    ATHENA_ID: 17v7e
                    AUTH_SCHEME: iam
                    CALLBACK_URI: /auth/cb
                    CLUSTER_DATA:
                      type: paid
                    CONFIGTXLATOR_URL: 'https://n3a3ec3-configtxlator.ibp.us-south.containers.appdomain.cloud'
                    CRN:
                      account_id: a/abcd
                      c_name: staging
                      c_type: public
                      instance_id: abc123
                      location: us-south
                      resource_id: '-'
                      resource_type: '-'
                      service_name: blockchain
                      version: v1
                    CRN_STRING: 'crn:v1:staging:public:blockchain:us-south:a/abcd:abc123::'
                    CSP_HEADER_VALUES:
                      - '-'
                    DB_SYSTEM: system
                    DEPLOYER_URL: 'https://api.dev.blockchain.cloud.ibm.com'
                    DOMAIN: localhost
                    ENVIRONMENT: prod
                    FABRIC_CAPABILITIES:
                      application:
                        - V1_1
                      channel:
                        - V1_1
                      orderer:
                        - V1_1
                    FEATURE_FLAGS: {}
                    FILE_LOGGING:
                      server:
                        client:
                          enabled: true
                          level: silly
                          unique_name: false
                        server:
                          enabled: true
                          level: silly
                          unique_name: false
                      client:
                        client:
                          enabled: true
                          level: silly
                          unique_name: false
                        server:
                          enabled: true
                          level: silly
                          unique_name: false
                    HOST_URL: 'http://localhost:3000'
                    IAM_CACHE_ENABLED: true
                    IAM_URL: '-'
                    IBM_ID_CALLBACK_URL: 'http://localhost:3000/auth/login'
                    IGNORE_CONFIG_FILE: true
                    INACTIVITY_TIMEOUTS:
                      enabled: true
                      max_idle_time: 60000
                    INFRASTRUCTURE: ibmcloud
                    LANDING_URL: 'http://localhost:3000'
                    LOGIN_URI: /auth/login
                    LOGOUT_URI: /auth/logout
                    MAX_REQ_PER_MIN: 25
                    MAX_REQ_PER_MIN_AK: 25
                    MEMORY_CACHE_ENABLED: true
                    PORT: '3000'
                    PROXY_CACHE_ENABLED: true
                    PROXY_TLS_FABRIC_REQS: always
                    PROXY_TLS_HTTP_URL: 'http://localhost:3000'
                    PROXY_TLS_WS_URL: 'http://localhost:3000'
                    REGION: us_south
                    SESSION_CACHE_ENABLED: true
                    TIMEOUTS: {}
                    TIMESTAMPS:
                      now: 1542746836056
                      born: 1542746836056
                      next_settings_update: 1.2 mins
                      up_time: 30 days
                    TRANSACTION_VISIBILITY: {}
                    TRUST_PROXY: loopback
                    TRUST_UNKNOWN_CERTS: true
                    VERSIONS:
                      apollo: 65f3cbfd
                      athena: 1198f94
                      stitch: 0f1a0c6
                      tag: v0.4.31

  /ak/api/v3/kubernetes/fabric/versions:
    get:
      deprecated: true # not available in opensource console
      tags:
        - Administer the IBP console
      summary: Get supported Fabric versions
      description: Get list of supported Fabric versions by each component type. These are the Fabric versions your IBP console can use when creating or upgrading components.
      operationId: get_fab_versions
      parameters:
        - $ref: '#/components/parameters/QueryCache'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/kubernetes/fabric/versions" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get supported Fabric versions options
                      opts := service.NewGetFabVersionsOptions()
                      result, detailedResponse, err := service.GetFabVersions(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get supported Fabric versions
                      try {
                        const response = await client.getFabVersions();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");
                        ServiceCall<GetFabricVersionsResponse> call = bc.getFabVersions();
                        Response<GetFabricVersionsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        GetFabricVersionsResponse fabricVersions = response.getResult();
                        GetFabricVersionsResponseVersions versions = fabricVersions.getVersions();
                        FabricVersionDictionary peers = versions.getPeer();
                        peers.toString();
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get supported Fabric versions
                      try:
                        response = client.get_fab_versions()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.ibp_console.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetFabricVersionsResponse'
              examples:
                response:
                  value:
                    versions:
                      ca:
                        1.4.6-2:
                          default: true
                          version: 1.4.6-2
                          image: {}
                        2.1.0-0:
                          default: true
                          version: 1.4.6-2
                          image: {}
                      peer:
                        1.4.6-2:
                          default: true
                          version: 1.4.6-2
                          image: {}
                        2.1.0-0:
                          default: true
                          version: 1.4.6-2
                          image: {}
                      orderer:
                        1.4.6-2:
                          default: true
                          version: 1.4.6-2
                          image: {}
                        2.1.0-0:
                          default: true
                          version: 1.4.6-2
                          image: {}
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/health:
    get:
      tags:
        - Administer the IBP console
      summary: Get IBP console health stats
      description: See statistics of the IBP console process such as memory usage, CPU usage, up time, cache, and operating system stats.
      operationId: get_health
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/health" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get health stats on the IBP console
                      opts := service.NewGetHealthOptions()
                      result, detailedResponse, err := service.GetHealth(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get health stats on the IBP console
                      try {
                        const response = await client.getHealth();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ServiceCall<GetAthenaHealthStatsResponse> call = service.getHealth();
                        Response<GetAthenaHealthStatsResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        GetAthenaHealthStatsResponse health = response.getResult();
                        GetAthenaHealthStatsResponseOS os = health.getOs();
                        System.out.println(os.getTotalMemory());

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get health stats on the IBP console
                      try:
                        response = client.get_health()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.ibp_console.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAthenaHealthStatsResponse'
              examples:
                response:
                  value:
                    OPTOOLS:
                      instance_id: p59ta
                      now: 1542746836056
                      born: 1542746836056
                      up_time: 30 days
                      memory_usage:
                        rss: 56.1 MB
                        heapTotal: 34.4 MB
                        heapUsed: 28.4 MB
                        external: 369.3 KB
                      session_cache_stats:
                        hits: 42
                        misses: 11
                        keys: 100
                        cache_size: 4.19 KiB
                      couch_cache_stats:
                        hits: 42
                        misses: 11
                        keys: 100
                        cache_size: 4.19 KiB
                      iam_cache_stats:
                        hits: 42
                        misses: 11
                        keys: 100
                        cache_size: 4.19 KiB
                      proxy_cache:
                        hits: 42
                        misses: 11
                        keys: 100
                        cache_size: 4.19 KiB
                    OS:
                      arch: x64
                      type: Windows_NT
                      endian: LE
                      loadavg:
                        - 0
                      cpus:
                        - model: Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz
                          speed: 2592
                          times:
                            idle: 131397203
                            irq: 6068640
                            nice: 0
                            sys: 9652328
                            user: 4152187
                      total_memory: 31.7 GB
                      free_memory: 21.9 GB
                      up_time: 4.9 days
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/notifications:
    get:
      tags:
        - Administer the IBP console
      summary: Get all notifications
      description: Retrieve all notifications. This API supports pagination through the query parameters. Notifications are generated from actions such as creating a component, deleting a component, server restart, and so on.
      operationId: list_notifications
      parameters:
        - name: limit
          in: query
          description: The number of notifications to return. The default value is 100.
          required: false
          style: form
          explode: true
          schema:
            type: number
            minimum: 1
            maximum: 1024
        - name: skip
          in: query
          description: '`skip` is used to paginate through a long list of sorted entries. For example, if there are 100 notifications, you can issue the API with limit=10 and skip=0 to get the first 1-10. To get the next 10, you can set limit=10 and skip=10 so that the values of entries 11-20 are returned.'
          required: false
          style: form
          explode: true
          schema:
            type: number
            minimum: 1
            maximum: 1024
        - $ref: '#/components/parameters/QueryComponentId'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/notifications?limit=20&skip=0" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get IBP console notifications
                      opts := service.NewListNotificationsOptions()
                      result, detailedResponse, err := service.ListNotifications(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get IBP console notifications
                      try {
                        const response = await client.listNotifications();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ServiceCall<GetNotificationsResponse> call = bc.listNotifications();
                        Response<GetNotificationsResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                        GetNotificationsResponse result =  response.getResult();
                        List<NotificationData> notifications = result.getNotifications();
                        int size = notifications.size();;


                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get IBP console notifications
                      try:
                        response = client.list_notifications()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.notifications.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetNotificationsResponse'
              examples:
                response:
                  value:
                    total: 10
                    returning: 3
                    notifications:
                      - id: 60d84819bfa17adb4174ff3a1c52b5d6
                        type: notification
                        status: pending
                        by: d******a@us.ibm.com
                        message: Restarting application
                        ts_display: 1537262855753
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/signature_collections:
    get:
      x-visible-environment: staging # not visible on prod since only Solutions needs this api...
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Get signature collection txs
      description: Get all signature collection transactions. These transactions involve creating or editing Fabric channels. The only transactions that are listed are ones that involved this IBP console. Channels that are edited or created outside of the IBP console are not discoverable.
      operationId: get_sig_txs
      parameters:
        - $ref: '#/components/parameters/QuerySigTxDetails'
        - $ref: '#/components/parameters/QueryFilterByOrderers'
        - $ref: '#/components/parameters/QueryGroupByChannelName'
        - $ref: '#/components/parameters/QueryCache'
        - $ref: '#/components/parameters/QueryStatus'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/signature_collections?cache=skip&full_details=omitted" \
                      -H "Authorization: Bearer {Access-Token}"
      x-ibm-events:
        events:
          - name: blockchain.signature_collections.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSignatureCollectionsResponse'
              examples:
                response:
                  value:
                    signature_collections:
                      - ccd:
                          chaincode_sequence: 1
                          chaincode_id: marbles
                          chaincode_version: v1
                          endorsement_plugin: escc
                          init_required: true
                          validation_plugin: vscc
                          validation_parameter: "AND('Org1.admin', 'Org2.member')"
                          collections_obj:
                            - name: myCollection-v1
                              required_peer_count: 1
                              maximum_peer_count: 1
                              member_orgs_policy: "AND('Org1.admin', 'Org2.member')"
                              block_to_live: 10
                              member_only_read: false
                              member_only_write: false
                              endorsement_policy: "AND('Org1.admin', 'Org2.member')"
                        channel: MyFirstChannel
                        current_policy:
                          number_of_signatures: 1
                        consenters:
                          - '192.168.5.0:3000'
                        distribution_responses:
                          - distribute: all
                            errors:
                              - msp_id: Org1
                                resp:
                                  statusCode: 200
                            successes:
                              - msp_id: Org1
                                resp:
                                  statusCode: 200
                            timestamp: 1537262855753
                        reference_component_ids:
                          - MyPeer1
                        orderers:
                          - >-
                            https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050
                        orderers2sign:
                          - admin: true
                            certificate: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            optools_url: 'http://localhost:3000'
                            package_id: >-
                              marbles_1:92321c359d1efcd65dc34c6ee334e37870a4a2130889473173fad3ddf7c02249
                            peers:
                              - >-
                                https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                            msp_id: Org1
                            signature: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            timestamp: 1537262855753
                        orgs2sign:
                          - admin: true
                            certificate: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            optools_url: 'http://localhost:3000'
                            package_id: >-
                              marbles_1:92321c359d1efcd65dc34c6ee334e37870a4a2130889473173fad3ddf7c02249
                            peers:
                              - >-
                                https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                            msp_id: Org1
                            signature: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            timestamp: 1537262855753
                        originator_msp: Org1
                        proposal: ZmFrZSBkYXRh
                        status: open
                        timestamp: 1537262855753
                        tx_id: abcde
                        tx_type: channel
                        visibility: inbox
        210:
          description: Request was successful (alternative response).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSignatureCollectionsByChannelResponse'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    post:
      x-visible-environment: hidden # not visible anywhere, api is only used by apollo. the spec is still used by the validator.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Create a signature collection tx
      description: Create a signature collection transaction. These transactions involve creating or editing Fabric channels & chaincode approvals.
      operationId: create_sig_tx
      requestBody:
        description: Create sig collection.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSignatureCollectionBody'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/signature_collections" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"tx_id\": \"abcd\",
                            \"proposal\": \"<base 64 encoded proposal here>\",
                            \"distribute\": \"all\",
                            \"channel\": \"MyChannel\",
                            \"orderers\": [
                              \"192.168.1.0:3000\"
                            ],
                            \"orgs2sign\": [
                              {
                                \"msp_id\": \"Org1MSP\",
                                \"optools_url\": \"http://localhost:3000/api/v3\",
                                \"timeout_ms\": 10000,
                                \"signature\": \"\",
                                \"admin\": false
                              }
                            ],
                            \"orderers2sign\": [],
                            \"authorize\": {
                              \"msp_id\": \"Org1MSP\",
                              \"certificate\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\",
                              \"hash_ver\": \"v2\"
                            },
                            \"originator_msp\": \"Org1MSP\",
                            \"json_diff\": {},
                            \"current_policy\": {
                              \"number_of_signatures\": 1
                            }
                          }"
      x-ibm-events:
        events:
          - name: blockchain.signature_collections.create
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureCollectionResponse'
              examples:
                response:
                  value:
                    message: ok
                    distribution_responses:
                      distribute: all
                      errors:
                        - msp_id: Org1
                          resp:
                            statusCode: 200
                      successes:
                        - msp_id: Org1
                          resp:
                            statusCode: 200
                      timestamp: 1537262855753
                    ccd:
                      chaincode_sequence: 1
                      chaincode_id: marbles
                      chaincode_version: v1
                      endorsement_plugin: escc
                      init_required: true
                      validation_plugin: vscc
                      validation_parameter: "AND('Org1.admin', 'Org2.member')"
                      collections_obj:
                        - name: myCollection-v1
                          required_peer_count: 1
                          maximum_peer_count: 1
                          member_orgs_policy: "AND('Org1.admin', 'Org2.member')"
                          block_to_live: 10
                          member_only_read: false
                          member_only_write: false
                          endorsement_policy: "AND('Org1.admin', 'Org2.member')"
                    channel: MyFirstChannel
                    current_policy:
                      number_of_signatures: 1
                    consenters:
                      - '192.168.5.0:3000'
                    reference_component_ids:
                      - MyPeer1
                    orderers:
                      - 'https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050'
                    orderers2sign:
                      - admin: true
                        certificate: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        optools_url: 'http://localhost:3000'
                        package_id: >-
                          marbles_1:92321c359d1efcd65dc34c6ee334e37870a4a2130889473173fad3ddf7c02249
                        peers:
                          - >-
                            https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                        msp_id: Org1
                        signature: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        timestamp: 1537262855753
                    orgs2sign:
                      - admin: true
                        certificate: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        optools_url: 'http://localhost:3000'
                        package_id: >-
                          marbles_1:92321c359d1efcd65dc34c6ee334e37870a4a2130889473173fad3ddf7c02249
                        peers:
                          - >-
                            https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                        msp_id: Org1
                        signature: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        timestamp: 1537262855753
                    originator_msp: Org1
                    proposal: ZmFrZSBkYXRh
                    tx_id: abcde
                    tx_type: channel
                    visibility: inbox
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/signature_collections/{id}:
    put:
      x-visible-environment: hidden # not visible anywhere, api is only used by apollo. the spec is still used by the validator.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Edit a signature collection tx
      description: Edit or redistribute a signature collection transaction. These transactions involve creating or editing Fabric channels & chaincode approvals.
      operationId: edit_sig_tx
      parameters:
        - $ref: '#/components/parameters/PathTxId'
      requestBody:
        description: Edit sig collection.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditSignatureCollectionBody'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/signature_collections/{Transaction-ID}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"distribute\": \"none\",
                            \"orgs2sign\": [
                                {
                                    \"msp_id\": \"Org1MSP\",
                                    \"optools_url\": \"http://localhost:3000/api/v3\",
                                    \"signature\": \"<base 64 encoded signature here>\",
                                }
                            ],
                            \"authorize\": {
                                \"msp_id\": \"Org1MSP\",
                                \"certificate\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\",
                                \"hash_ver\": \"v2\"
                            }
                        }"
      x-ibm-events:
        events:
          - name: blockchain.signature_collections.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureCollectionResponse'
              examples:
                response:
                  value:
                    message: ok
                    distribution_responses:
                      distribute: all
                      errors:
                        - msp_id: Org1
                          resp:
                            statusCode: 200
                      successes:
                        - msp_id: Org1
                          resp:
                            statusCode: 200
                      timestamp: 1537262855753
                    ccd:
                      chaincode_sequence: 1
                      chaincode_id: marbles
                      chaincode_version: v1
                      endorsement_plugin: escc
                      init_required: true
                      validation_plugin: vscc
                      validation_parameter: "AND('Org1.admin', 'Org2.member')"
                      collections_obj:
                        - name: myCollection-v1
                          required_peer_count: 1
                          maximum_peer_count: 1
                          member_orgs_policy: "AND('Org1.admin', 'Org2.member')"
                          block_to_live: 10
                          member_only_read: false
                          member_only_write: false
                          endorsement_policy: "AND('Org1.admin', 'Org2.member')"
                    channel: MyFirstChannel
                    current_policy:
                      number_of_signatures: 1
                    consenters:
                      - '192.168.5.0:3000'
                    reference_component_ids:
                      - MyPeer1
                    orderers:
                      - 'https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050'
                    orderers2sign:
                      - admin: true
                        certificate: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        optools_url: 'http://localhost:3000'
                        package_id: >-
                          marbles_1:92321c359d1efcd65dc34c6ee334e37870a4a2130889473173fad3ddf7c02249
                        peers:
                          - >-
                            https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                        msp_id: Org1
                        signature: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        timestamp: 1537262855753
                    orgs2sign:
                      - admin: true
                        certificate: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        optools_url: 'http://localhost:3000'
                        package_id: >-
                          marbles_1:92321c359d1efcd65dc34c6ee334e37870a4a2130889473173fad3ddf7c02249
                        peers:
                          - >-
                            https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                        msp_id: Org1
                        signature: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        timestamp: 1537262855753
                    originator_msp: Org1
                    proposal: ZmFrZSBkYXRh
                    tx_id: abcde
                    tx_type: channel
                    visibility: inbox
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    delete:
      tags:
        - Administer the IBP console
      summary: Delete a signature collection tx
      description: Delete a signature collection transaction. These transactions involve creating or editing Fabric channels & chaincode approvals. This request is not distributed to external IBP consoles, thus the signature collection transaction is only deleted locally.
      operationId: delete_sig_tx
      parameters:
        - $ref: '#/components/parameters/PathTxId'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/signature_collections/{Transaction-ID}" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Delete a signature collection event
                      opts := service.NewDeleteSigTxOptions("{Transaction-ID}")
                      result, detailedResponse, err := service.DeleteSigTx(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Delete signature collection event parameters
                      const opts = {
                        id: '{Transaction-ID}',
                      };

                      // Delete signature collection event
                      try {
                        const response = await client.deleteSigTx(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        DeleteSigTxOptions options = new DeleteSigTxOptions.Builder()
                            .id("tx id").build()

                        ServiceCall<DeleteSignatureCollectionResponse> call = bc.deleteSigTxOptions(options);
                        // get all the peer components
                        Response<DeleteSignatureCollectionResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Delete signature collection event
                      try:
                        response = client.delete_sig_tx(
                          id='{Transaction-ID}',
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.signature_collections.delete
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSignatureCollectionResponse'
              examples:
                response:
                  value:
                    message: ok
                    tx_id: abcde
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/notifications/bulk:
    post:
      tags:
        - Administer the IBP console
      summary: Archive notifications
      description: Archive 1 or more notifications. Archived notifications will no longer appear in the default [Get all notifications](#list-notifications) API.
      operationId: archive_notifications
      requestBody:
        description: Archive notifications.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArchiveNotificationsBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/notifications/bulk" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"notification_ids\": [
                                \"edf0c5e0b76d49ccadb8eee3eec88a48\",
                                \"c9d00ebf849051e4f102008dc0be2488\",
                                \"d7d831ddcd8d8c5bf87f4d972f675096\"
                            ]
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Archive Notifications
                      notifications := [3]string{"edf0c5e0b76d49ccadb8eee3eec88a48", "c9d00ebf849051e4f102008dc0be2488", "d7d831ddcd8d8c5bf87f4d972f675096"}
                      opts := service.NewArchiveNotificationsOptions(notifications[:])
                      result, detailedResponse, err := service.ArchiveNotifications(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Archive Notifications parameters
                      const opts = {
                        notificationIds: [
                            'edf0c5e0b76d49ccadb8eee3eec88a48',
                            'c9d00ebf849051e4f102008dc0be2488',
                            'd7d831ddcd8d8c5bf87f4d972f675096'
                        ]
                      };

                      // Archive Notifications
                      try {
                        const response = await client.archiveNotifications(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");
                        ArchiveNotificationsOptions archiveNotificationsOptions = new ArchiveNotificationsOptions.Builder()
                                .notificationIds(Arrays.asList(new String[] {notificationId})).build();

                        ServiceCall<ArchiveResponse> call = service.archiveNotifications(archiveNotificationsOptions);
                        Response<ArchiveResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Archive Notifications parameters
                      opts = {
                        'notificationIds': [
                            'edf0c5e0b76d49ccadb8eee3eec88a48',
                            'c9d00ebf849051e4f102008dc0be2488',
                            'd7d831ddcd8d8c5bf87f4d972f675096'
                        ]
                      }

                      # Archive Notifications
                      try:
                        response = client.archive_notifications(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.notifications.delete
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArchiveResponse'
              examples:
                response:
                  value:
                    message: ok
                    details: archived 3 notification(s)
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/components:
    get:
      tags:
        - Manage multiple components
      summary: Get all components
      description: Get the IBP console's data on all components (peers, CAs, orderers, and MSPs). The component might be imported or created.
      operationId: list_components
      parameters:
        - $ref: '#/components/parameters/QueryDeploymentAttrs'
        - $ref: '#/components/parameters/QueryParsedCerts'
        - $ref: '#/components/parameters/QueryCache'
        - $ref: '#/components/parameters/QueryCaAttrs'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/components" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get all components
                      opts := service.NewListComponentsOptions()
                      result, detailedResponse, err := service.ListComponents(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get all components
                      try {
                        const response = await client.listComponents();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ListComponentsOptions listComponentsOptions = new ListComponentsOptions.Builder().cache("skip")
                                        .deploymentAttrs("included").build();

                        ServiceCall<GetMultiComponentsResponse> call = service.listComponents(listComponentsOptions);
                        Response<GetMultiComponentsResponse> resp = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        GetMultiComponentsResponse compResp = resp.getResult();
                        assertNotNull(compResp);
                        List<GenericComponentResponse> components = compResp.getComponents();
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get all components
                      try:
                        response = client.list_components()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMultiComponentsResponse'
              examples:
                response:
                  value:
                    components:
                      - id: myca-2
                        type: fabric-ca
                        display_name: Example CA
                        grpcwp_url: >-
                          https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                        api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                        operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                        msp:
                          ca:
                            name: org1CA
                            root_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                          tlsca:
                            name: org1tlsCA
                            root_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                          component:
                            tls_cert: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            ecert: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            admin_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        msp_id: Org1
                        location: ibmcloud
                        node_ou:
                          enabled: true
                        resources:
                          ca:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          peer:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          orderer:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          proxy:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          statedb:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                        scheme_version: v1
                        state_db: couchdb
                        storage:
                          ca:
                            size: 4GiB
                            class: default
                          peer:
                            size: 4GiB
                            class: default
                          orderer:
                            size: 4GiB
                            class: default
                          statedb:
                            size: 4GiB
                            class: default
                        timestamp: 1537262855753
                        tags:
                          - fabric-ca
                        version: 1.4.6-1
                        zone: '-'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        222:
          description: Request was successful (zero components were found).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyArrayResponse'

  /ak/api/v3/components/types/{type}:
    get:
      tags:
        - Manage multiple components
      summary: Get components of a type
      description: Get the IBP console's data on components that are a specific type. The component might be imported or created.
      operationId: get_components_by_type
      parameters:
        - $ref: '#/components/parameters/PathType'
        - $ref: '#/components/parameters/QueryDeploymentAttrs'
        - $ref: '#/components/parameters/QueryParsedCerts'
        - $ref: '#/components/parameters/QueryCache'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/components/types/{Type}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get data for components with this type "{Type}"
                      opts := service.NewGetComponentsByTypeOptions("{Type}")
                      result, detailedResponse, err := service.GetComponentsByType(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get all components with type parameters
                      const opts = {
                        type: '{Type}'
                      };

                      // Get all components with type
                      try {
                        const response = await client.getComponentsByType(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        // get all the peer components
                        GetComponentsByTypeOptions options = new GetComponentsByTypeOptions.Builder().type(Type.FABRIC_PEER)
                              .build();
                        ServiceCall<GetMultiComponentsResponse> call = bc.getComponentsByType(options);
                        Response<GetMultiComponentsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        List<GenericComponentResponse> l = response.getResult().getComponents();

                        System.out.println(l);
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get all components with type
                      try:
                        response = client.get_components_by_type(
                          type='{Type}'
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMultiComponentsResponse'
              examples:
                response:
                  value:
                    components:
                      - id: myca-2
                        type: fabric-ca
                        display_name: Example CA
                        grpcwp_url: >-
                          https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                        api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                        operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                        msp:
                          ca:
                            name: org1CA
                            root_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                          tlsca:
                            name: org1tlsCA
                            root_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                          component:
                            tls_cert: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            ecert: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            admin_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        msp_id: Org1
                        location: ibmcloud
                        node_ou:
                          enabled: true
                        resources:
                          ca:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          peer:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          orderer:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          proxy:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          statedb:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                        scheme_version: v1
                        state_db: couchdb
                        storage:
                          ca:
                            size: 4GiB
                            class: default
                          peer:
                            size: 4GiB
                            class: default
                          orderer:
                            size: 4GiB
                            class: default
                          statedb:
                            size: 4GiB
                            class: default
                        timestamp: 1537262855753
                        tags:
                          - fabric-ca
                        version: 1.4.6-1
                        zone: '-'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        222:
          description: Request was successful (zero components were found).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyArrayResponse'

  /ak/api/v3/components/tags/{tag}:
    get:
      tags:
        - Manage multiple components
      summary: Get components with tag
      description: Get the IBP console's data on components that have a specific tag. The component might be imported or created. Tags are not case-sensitive.
      operationId: get_components_by_tag
      parameters:
        - $ref: '#/components/parameters/PathTag'
        - $ref: '#/components/parameters/QueryDeploymentAttrs'
        - $ref: '#/components/parameters/QueryParsedCerts'
        - $ref: '#/components/parameters/QueryCache'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/components/tags/{Tag}" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get data for components with tag "{Tag}"
                      opts := service.NewGetComponentsByTagOptions("{Tag}")
                      result, detailedResponse, err := service.GetComponentsByTag(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get all components with tag parameters
                      const opts = {
                        tag: '{Tag}'
                      };

                      // Get all components with tag
                      try {
                        const response = await client.getComponentsByTag(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        GetComponentsByTagOptions options = new GetComponentsByTagOptions.Builder().tag("ibm_saas")
                                .deploymentAttrs(GetComponentsByTagOptions.DeploymentAttrs.INCLUDED).build();
                        ServiceCall<GetMultiComponentsResponse> call = bc.getComponentsByTag(options);                        Response<GetMultiComponentsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        List<GenericComponentResponse> l = response.getResult().getComponents();

                        System.out.println(l);
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get all components with tag
                      try:
                        response = client.get_components_by_tag(
                          tag='{Tag}'
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMultiComponentsResponse'
              examples:
                response:
                  value:
                    components:
                      - id: myca-2
                        type: fabric-ca
                        display_name: Example CA
                        grpcwp_url: >-
                          https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
                        api_url: 'grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051'
                        operations_url: 'https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443'
                        msp:
                          ca:
                            name: org1CA
                            root_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                          tlsca:
                            name: org1tlsCA
                            root_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                          component:
                            tls_cert: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            ecert: >-
                              LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                            admin_certs:
                              - >-
                                LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        msp_id: Org1
                        location: ibmcloud
                        node_ou:
                          enabled: true
                        resources:
                          ca:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          peer:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          orderer:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          proxy:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                          statedb:
                            requests:
                              cpu: 100m
                              memory: 64M
                            limits:
                              cpu: 8000m
                              memory: 16384M
                        scheme_version: v1
                        state_db: couchdb
                        storage:
                          ca:
                            size: 4GiB
                            class: default
                          peer:
                            size: 4GiB
                            class: default
                          orderer:
                            size: 4GiB
                            class: default
                          statedb:
                            size: 4GiB
                            class: default
                        timestamp: 1537262855753
                        tags:
                          - fabric-ca
                        version: 1.4.6-1
                        zone: '-'
        222:
          description: Request was successful (zero components were found).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyArrayResponse'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    delete:
      tags:
        - Manage multiple components
      summary: Remove components with tag
      description: |
        Removes components with the matching tag from the IBP console. Tags are not case-sensitive.
        - Using this api on **imported** components removes them from the IBP console.
        - Using this api on **created** components removes them from the IBP console **but** it will **not** delete the components from the Kubernetes cluster where they reside. Thus it orphans the Kubernetes deployments (if it exists). Instead use the [Delete components with tag](#delete_components_by_tag) API to delete the Kubernetes deployment and the IBP console data at once.
      operationId: remove_components_by_tag
      parameters:
        - $ref: '#/components/parameters/PathTag'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/components/{Tag}" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get all component data
                      opts := service.NewRemoveComponentsByTagOptions("{Tag}")
                      result, detailedResponse, err := service.RemoveComponentsByTag(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Remove all components with tag parameters
                      const opts = {
                        tag: '{Tag}'
                      };

                      // Remove all components with tag
                      try {
                        const response = await client.removeComponentsByTag(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        RemoveComponentsByTagOptions options = new RemoveComponentsByTagOptions.Builder().tag("ibm_saas")
                                .deploymentAttrs(RemoveComponentsByTagOptions.DeploymentAttrs.INCLUDED).build();
                        ServiceCall<RemoveMultiComponentsResponse> call = bc.removeComponentsByTag(options);                        Response<GetMultiComponentsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        List<GenericComponentResponse> l = response.getResult().getComponents();

                        System.out.println(l);
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Remove all components with tag
                      try:
                        response = client.remove_components_by_tag(
                          tag='{Tag}'
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.remove
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveMultiComponentsResponse'
              examples:
                response:
                  value:
                    removed:
                      - message: deleted
                        type: fabric-peer
                        id: component-1
                        display_name: My Peer
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/kubernetes/components/tags/{tag}:
    delete:
      deprecated: true # not available in opensource console
      tags:
        - Manage multiple components
      summary: Delete components with tag
      description: |
        Removes components with the matching tag from the IBP console **and** it deletes the Kubernetes deployment. Tags are not case-sensitive.
        - Using this api on **imported** components will be skipped over since their Kubernetes deployment is unknown and cannot be removed. Instead use the [Remove components with tag](#remove_components_by_tag) API to remove imported components with a tag.
        - Using this api on **created** components removes them from the IBP console **and** it will delete the components from the Kubernetes cluster where they reside. The Kubernetes delete must succeed before the component will be removed from the IBP console.
      operationId: delete_components_by_tag
      parameters:
        - $ref: '#/components/parameters/PathTag'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/kubernetes/components/tags/{Tag}" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get all component data
                      opts := service.NewDeleteComponentsByTagOptions("{Tag}")
                      result, detailedResponse, err := service.DeleteComponentsByTag(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Delete all components with tag parameters
                      const opts = {
                        tag: '{Tag}'
                      };

                      // Delete all components with tag
                      try {
                        const response = await client.deleteComponentsByTag(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        DeleteComponentsByTagOptions options = new DeleteComponentsByTagOptions.Builder().tag("ibm_saas")
                                .deploymentAttrs(DeleteComponentsByTagOptions.DeploymentAttrs.INCLUDED).build();
                        ServiceCall<DeleteMultiComponentsResponse> call = bc.deleteComponentsByTag(options);                        Response<GetMultiComponentsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }


                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Delete all components with tag
                      try:
                        response = client.delete_components_by_tag(
                          tag='{Tag}'
                        )
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.delete
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMultiComponentsResponse'
              examples:
                response:
                  value:
                    deleted:
                      - message: deleted
                        type: fabric-peer
                        id: component-1
                        display_name: My Peer
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/kubernetes/components/purge:
    delete:
      deprecated: true # not available in opensource console
      tags:
        - Manage multiple components
      summary: Delete all components
      description: Removes all components from the IBP console **and** their Kubernetes deployments (if applicable). Works on imported and created components (peers, CAs, orderers, MSPs, and signature collection transactions). This api attempts to effectively reset the IBP console to its initial (empty) state (except for logs & notifications, those will remain).
      operationId: delete_all_components
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/kubernetes/components/purge" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get all component data
                      opts := service.NewDeleteAllComponentsOptions()
                      result, detailedResponse, err := service.DeleteAllComponents(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Delete all components
                      try {
                        const response = await client.deleteAllComponents();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ServiceCall<GetMultiComDeleteMultiComponentsResponseponentsResponse> call = bc.deleteAllComponents();
                        Response<DeleteMultiComponentsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Delete all components
                      try:
                        response = client.delete_all_components()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.delete
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMultiComponentsResponse'
              examples:
                response:
                  value:
                    deleted:
                      - message: deleted
                        type: fabric-peer
                        id: component-1
                        display_name: My Peer
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/restart:
    post:
      tags:
        - Administer the IBP console
      summary: Restart the IBP console
      description: Restart IBP console processes. This causes a small outage (10 - 30 seconds) which is possibly disruptive to active user sessions.
      operationId: restart
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/restart" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Restart
                      opts := service.NewRestartOptions()
                      result, detailedResponse, err := service.Restart(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Restart the IBP Console
                      try {
                        const response = await client.restart();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ServiceCall<RestartAthenaResponse> call = bc.restart();
                        Response<RestartAthenaResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Restart the IBP Console
                      try:
                        response = client.restart()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.ibp_console.start
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestartAthenaResponse'
              examples:
                response:
                  value:
                    message: restarting - give me 5-30 seconds
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/logs/file_settings:
    put:
      x-visible-environment: hidden # not visible anywhere, use `/ak/api/v3/settings` instead. api still exists & this spec is still used by the validator.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Change logging settings
      description: Change your **IBP console's** file logging settings. Settings that are omitted from the request body will remain as is.
      operationId: update_file_settings
      requestBody:
        description: Include only the settings that you want to change, and the other settings will remain as is.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditLogSettingsBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/logs/file_settings" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"client\": {
                              \"enabled\": true,
                              \"level\": \"debug\",
                              \"unique_name\": false
                            },
                            \"server\": {
                              \"enabled\": true,
                              \"level\": \"info\",
                              \"unique_name\": false
                            }
                          }"
      x-ibm-events:
        events:
          - name: blockchain.ibp_console.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogSettingsResponse'
              examples:
                response:
                  value:
                    client:
                      enabled: true
                      level: silly
                      unique_name: false
                    server:
                      enabled: true
                      level: silly
                      unique_name: false
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/sessions:
    delete:
      tags:
        - Administer the IBP console
      summary: Delete all IBP console sessions
      description: Delete all client sessions in IBP console. Use this API to clear any active logins and force everyone to log in again. This API is useful for debugging purposes and when changing roles of a user. It forces any role changes to take effect immediately. Otherwise, permission or role changes will take effect during the user's next login or session expiration.
      operationId: delete_all_sessions
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/sessions" \
                        -H "Content-Type: application/json" \
                        -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Delete Sessions
                      opts := service.NewDeleteAllSessionsOptions()
                      result, detailedResponse, err := service.DeleteAllSessions(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Delete all IBP Console sessions
                      try {
                        const response = await client.deleteAllSessions();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ServiceCall<DeleteAllSessionsResponse> call = bc.deleteAllSessions();
                        Response<DeleteAllSessionsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Delete all IBP Console sessions
                      try:
                        response = client.delete_all_sessions()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.sessions.delete
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAllSessionsResponse'
              examples:
                response:
                  value:
                    message: ok
                    deleted: 42
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/notifications/purge:
    delete:
      tags:
        - Administer the IBP console
      summary: Delete all notifications
      description: Delete all notifications. This API is intended for administration.
      operationId: delete_all_notifications
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/notifications/purge" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Delete Notifications
                      opts := service.NewDeleteAllNotificationsOptions()
                      result, detailedResponse, err := service.DeleteAllNotifications(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Delete all IBP Console notifications
                      try {
                        const response = await client.deleteAllNotifications();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ServiceCall<DeleteAllNotificationsResponse> call = bc.deleteAllNotifications();
                        Response<DeleteAllNotificationsResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Delete all IBP Console notifications
                      try:
                        response = client.delete_all_notifications()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.notifications.delete
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAllNotificationsResponse'
              examples:
                response:
                  value:
                    message: ok
                    details: deleted 101 notification(s)
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/cache:
    delete:
      tags:
        - Administer the IBP console
      summary: Clear IBP console caches
      description: Clear the in-memory caches across all IBP console server processes. No effect on caches that are currently disabled.
      operationId: clear_caches
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X DELETE "https://{API-Endpoint}/ak/api/v3/cache" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Clear Caches
                      opts := service.NewClearCachesOptions()
                      result, detailedResponse, err := service.ClearCaches(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Clear all IBP Console caches
                      try {
                        const response = await client.clearCaches();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        ServiceCall<CacheFlushResponse> call = service.clearCaches();
                        Response<CacheFlushResponse> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Clear all IBP Console caches
                      try:
                        response = client.clear_caches()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.cache.delete
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CacheFlushResponse'
              examples:
                response:
                  value:
                    message: ok
                    flushed:
                      - iam_cache
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/kubernetes/components/{id}/certs:
    put:
      deprecated: true # not available in opensource console
      tags:
        - Manage component
      summary: Edit admin certs on a component
      description: |
        This api will append or remove admin certs to the components' file system.
        Certificates will be parsed.
        If invalid they will be skipped.
        Duplicate certificates will also be skipped.
        To view existing admin certificate use the [Get component data](#get-component) API with the query parameters: `?deployment_attrs=included&cache=skip`.

        **This API will not work on *imported* components.**
      operationId: edit_admin_certs
      parameters:
        - name: id
          in: path
          description: The `id` of the component to edit. Use the [Get all components](#list_components) API to determine the id of the component.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Edit certificates.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditAdminCertsBody'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/kubernetes/components/{Component-ID}/certs" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"append_admin_certs\": [\"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"],
                            \"remove_admin_certs\": []
                          }"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                        ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                        Authenticator: authenticator,
                        URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                        return
                      }

                      // Edit Admin Certs
                      appendAdminCerts := [1]string{"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo="}
                      removeAdminCerts := []string{}
                      opts := service.NewEditAdminCertsOptions("{Component-ID}")
                      opts.SetAppendAdminCerts(appendAdminCerts[:])
                      opts.SetRemoveAdminCerts(appendAdminCerts[:])
                      result, detailedResponse, err := service.EditAdminCerts(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Edit Admin certs on a component parameters
                      const opts = {
                        id: '{Component-ID}',
                        appendAdminCerts: [
                          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
                        ],
                        removeAdminCerts: []
                      };

                      // Edit Admin certs on a component
                      try {
                        const response = await client.editAdminCerts();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");


                        EditAdminCertsOptions editAdminCertsOptions = new EditAdminCertsOptions.Builder()
                            .appendAdminCerts(Arrays.asList(new String[]{"admincert"} ))
                            .build();
                        ServiceCall<EditAdminCertsResponse> call = bc.editAdminCerts(editAdminCertsOptions);
                        Response<EditAdminCertsResponse> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Edit Admin certs on a component parameters
                      opts = {
                        'id': '{Component-ID}',
                        'append_admin_certs': [
                          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
                        ],
                        'remove_admin_certs': []
                      }

                      # Edit Admin certs on a component
                      try:
                        response = client.edit_admin_certs(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.components.update
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditAdminCertsResponse'
              examples:
                response:
                  value:
                    changes_made: 1
                    set_admin_certs:
                      - base_64_pem: >-
                          LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
                        issuer: /C=US/ST=North Carolina/O=Hyperledger/OU=Fabric/CN=fabric-ca-server
                        not_after_ts: 1597770420000
                        not_before_ts: 1566234120000
                        serial_number_hex: 649a1206fd0bc8be994886dd715cecb0a7a21276
                        signature_algorithm: SHA256withECDSA
                        subject: /OU=client/CN=admin
                        X509_version: 3
                        time_left: 10 hrs
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Component in request was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'

  /ak/api/v3/postman:
    get:
      tags:
        - Download examples
      summary: Generate Postman collection
      description: |
        Generate and download a Postman API Collection. The JSON contains all the APIs available in the IBP console. It can be imported to the [Postman](https://www.postman.com/downloads) desktop application. **The examples in the collection will be pre-populated with authorization credentials.** The authorization credentials to use must be provided to this API. See the query parameters for available options.

        Choose an auth strategy that matches your environment & concerns:

        - **IAM Bearer Auth** - *[Available on IBM Cloud]* - This is the recommended auth strategy. The same bearer token used to authenticate this request will be copied into the Postman collection examples. Since the bearer token expires the auth embedded in the collection will also expire. At that point the collection might be deleted & regenerated, or manually edited to refresh the authorization header values. To use this strategy set `auth_type` to `bearer`.
        - **IAM Api Key Auth** - *[Available on IBM Cloud]* - The IAM api key will be copied into the Postman collection examples. This means the auth embedded in the collection will never expire. To use this strategy set `auth_type` to `api_key`.
        - **Basic Auth** - *[Available on OpenShift & IBM Cloud Private]* - A basic auth username and password will be copied into the Postman collection examples. This is **not** available for an IBP SaaS instance on IBM Cloud. To use this strategy set `auth_type` to `basic`.

      operationId: get_postman
      parameters:
        - $ref: '#/components/parameters/AuthType'
        - $ref: '#/components/parameters/AuthToken'
        - $ref: '#/components/parameters/AuthApiKey'
        - $ref: '#/components/parameters/AuthUsername'
        - $ref: '#/components/parameters/AuthPassword'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/postman?auth_type={Auth-Type}&token={Access-Token}" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get a postman collection using api_key
                      opts := service.NewGetPostmanOptions("api_key")
                      opts.SetApiKey("{API-Key}")
                      result, detailedResponse, err := service.GetPostman(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get a postman collection parameters
                      const opts = {
                        authType: 'api_key',
                        apiKey: '{API-Key}'
                      };

                      // Get a postman collection using {Auth-Type}
                      try {
                        const response = await client.getPostman(opts);
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");

                        GetPostmanOptions getPostmanOptions = new GetPostmanOptions.Builder()
                              .authType(GetPostmanOptions.AuthType.API_KEY).apiKey("dummyKeyHere").build();
                        ServiceCall<Void> call = service.getPostman(getPostmanOptions);
                        Response<Void> response = call.execute();

                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get a postman collection parameters
                      opts = {
                        'auth_type': 'api_key',
                        'api_key': '{API-Key}'
                      }

                      # Get a postman collection using {Auth-Type}
                      try:
                        response = client.get_postman(**opts)
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.ibp_console.read
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPostmanResponse'
              examples:
                response:
                  value: {}
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/openapi:
    get:
      tags:
        - Download examples
      summary: Download OpenAPI file
      description: Download the [OpenAPI](https://swagger.io/specification/) specification YAML file (aka swagger file) for the IBP console. This is the same file that was used to generate the APIs on this page. This file documents APIs offered by the IBP console.
      operationId: get_swagger
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/openapi" \
                      -H "Authorization: Bearer {Access-Token}"
          go:
            - name: Example request
              example:
                - type: code
                  lang: go
                  source:
                    - |-
                      // Create an authenticator
                      authenticator := &core.IamAuthenticator{
                          ApiKey: "{API-Key}",
                      }

                      // Create an instance of the "BlockchainV3Options" struct
                      options := &blockchainv3.BlockchainV3Options{
                          Authenticator: authenticator,
                          URL: "https://{API-Endpoint}",
                      }

                      // Create an instance of the "BlockchainV3" service client.
                      service, err := blockchainv3.NewBlockchainV3(options)
                      if err != nil {
                          return
                      }

                      // Get the swagger file for all apis
                      opts := service.NewGetSwaggerOptions()
                      result, detailedResponse, err := service.GetSwagger(opts)
                      fmt.Println("result:", result)
                      fmt.Println("response:", detailedResponse)
          node:
            - name: Example request
              example:
                - type: code
                  lang: node
                  source:
                    - |-
                      // Create an authenticator
                      const authenticator = new ibp.IamAuthenticator({
                        apikey: '{API-Key}',
                      });

                      // Create client from the "BlockchainV3" class
                      const client = ibp.BlockchainV3.newInstance({
                        authenticator: authenticator,
                        url: 'https://{API-Endpoint}',
                      });

                      // Get the swagger file for all apis
                      try {
                        const response = await client.getSwagger();
                        console.log('response:', response.result);
                        // handle good response here
                      } catch (e) {
                        console.error('error response:', e.body);
                        // handle error here
                      }
          java:
            - name: Example Request
              example:
                - type: code
                  lang: java
                  source:
                    - |-
                      try {
                        // Create an IAM authenticator.
                        IamAuthenticator authenticator = new IamAuthenticator("{API-Key}");

                        Blockchain bc = new Blockchain("myIbp", authenticator);
                        bc.setServiceUrl("https://{API-Endpoint}");
                        ServiceCall<String> call = service.getSwagger();
                        Response<String> response = call.execute();
                        if (response.getStatusCode() != 200) {
                            throw new RuntimeException("Error code "+response.getStatusCode()+" : "+response.getStatusMessage());
                        }
                        String swagger = response.getResult();

                      } catch (ServiceResponseException e) {
                         // essential to catch and get the debugging information
                        RuntimeException wrappedError = new RuntimeException(e.getDebuggingInfo().toString());
                        wrappedError.initCause(e);
                        throw wrappedError;
                      }
          python:
            - name: Example request
              example:
                - type: code
                  lang: python
                  source:
                    - |-
                      # Create an authenticator
                      authenticator = IAMAuthenticator(
                        apikey='{API-Key}'
                      )

                      # Create client from the "BlockchainV3" class
                      client = BlockchainV3(
                        authenticator=authenticator
                      )
                      client.set_service_url('https://{API-Endpoint}')

                      # Get the swagger file for all apis
                      try:
                        response = client.get_swagger()
                        print(f'response: {response.result}')
                        # handle good response here
                      except ApiException as e:
                        print(f'error response: {e.message}')
                        # handle error here
      x-ibm-events:
        events:
          - name: blockchain.ibp_console.read
      responses:
        200:
          description: Request was successful.
          content:
            text/plain:
              schema:
                $ref: '#/components/schemas/GetSwaggerResponse'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/backups:
    get:
      x-visible-environment: hidden # not visible anywhere, api is still being worked out.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Get backup ids
      description: Get the ids of all database backups.
      operationId: get_db_backups
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/backups" \
                      -H "Authorization: Bearer {Access-Token}"
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBackupsResponse'
              examples:
                response:
                  value:
                    ids:
                      - 03_ibp_db_backup_1592924104038
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    post:
      x-visible-environment: hidden # not visible anywhere, api is still being worked out.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Start a database backup
      description: Start a backup of IBP console databases. The api will return before the backup is complete.
      operationId: start_db_backup
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/backups" \
                      -H "Authorization: Bearer {Access-Token}"
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartBackupResponse'
              examples:
                response:
                  value:
                    message: in-progress
                    id: 03_ibp_db_backup_1592924104038
                    url: 'http://localhost:3000/ak/api/v3/backups/03_ibp_db_backup_1592924104038'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    put:
      x-visible-environment: hidden # not visible anywhere, api is still being worked out.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Restore databases via backup data
      description: Restore the contents of a backup by sending the backup data in the body. The api will return before the restore is complete.
      operationId: start_db_restore
      requestBody:
        description: Restore backup settings.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreBackupDataBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/backups" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                          \"dbs\": {
                            \"athena_components\": {
                              \"docs\": [{}]
                            },
                            \"athena_sessions\": {
                              \"docs\": [{}]
                            },
                            \"athena_system\": {
                              \"docs\": [{}]
                            }
                          }
                        }"
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartRestoreResponse'
              examples:
                response:
                  value:
                    message: in-progress
                    url: 'http://localhost:3000/ak/api/v1/webhooks/txs/nboqur'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/backups/{id}:
    put:
      x-visible-environment: hidden # not visible anywhere, api is still being worked out.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Restore databases via backup id
      description: Restore the contents of a backup by sending the backup id. The api will return before the restore is complete.
      operationId: start_db_restore_id
      parameters:
        - $ref: '#/components/parameters/PathBackupId'
      requestBody:
        description: Optional client webhook url.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RestoreBackupIdBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/backups/03_ibp_db_backup_1592924104038" \
                      -H "Authorization: Bearer {Access-Token}" \

      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartRestoreResponse'
              examples:
                response:
                  value:
                    message: in-progress
                    url: 'http://localhost:3000/ak/api/v1/webhooks/txs/nboqur'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
    get:
      x-visible-environment: hidden # not visible anywhere, api is still being worked out.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Get a database backup
      description: Download a database backup. Includes attachments.
      operationId: get_db_backup
      parameters:
        - $ref: '#/components/parameters/PathBackupId'
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X GET "https://{API-Endpoint}/ak/api/v3/backups/03_ibp_db_backup_1592924104038" \
                      -H "Authorization: Bearer {Access-Token}" \

      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBackupResponse'
              examples:
                response:
                  value: {}
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/backups/{id}/attachments/{att_name}:
    put:
      x-visible-environment: hidden # not visible anywhere, api is still being worked out.
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Attach data to a backup
      description: Attach custom data to a IBP console backup. If the attachment name already exist the data will be replaced.
      operationId: attach_db_backup
      parameters:
        - $ref: '#/components/parameters/PathBackupId'
        - $ref: '#/components/parameters/PathBackupAttachment'
      requestBody:
        description: Data that should be attached to a backup.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AttachBackupBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X PUT "https://{API-Endpoint}/ak/api/v3/backups/03_ibp_db_backup_1592924104038/attatchments/my-attachement" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -d "{
                            \"attachment\": \"dGhpcyBpcyBzb21lIGRhdGEgaSB3YW50ZWQgc3RvcmVk\",
                          }"
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachBackupResponse'
              examples:
                response:
                  value:
                    message: ok
                    att_name: my-attachment
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/link/resources/{encoded_crn}:
    post:
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - Administer the IBP console
      summary: Link a IBP resource to a cluster
      description: |
        This api will create a link to a cluster. Once the link is made an IBP console will be deployed into the cluster.

        **This API requires unique authorization headers.**
        In addition to the normal `Authorization` header the `x-refresh-token` must be set. Header details:

        - **Authorization** - This header must be a **user's** bearer IAM token in the form `Bearer access-token-here`. The access token can be found in the `access_token` field of your IAM response during the apikey exchange. More details below.
        - **x-refresh-token** - This header must be a refresh IAM token. The refresh token can be found in the `refresh_token` field of your IAM response during the apikey exchange. More details below.

        **User Apikey Exchange**

        Unlike the other APIs this API requires a **user** level apikey.
        Follow these [directions](https://cloud.ibm.com/docs/account?topic=account-userapikey#create_user_key) to create the user level key.
        (dsh todo check if this works for the refresh_token...)
        Once a user level apikey is created exchange it for the IAM token via these [directions](https://cloud.ibm.com/docs/account?topic=account-iamtoken_from_apikey).

      operationId: link_cluster
      parameters:
        - $ref: '#/components/parameters/EncodedCrn'
      requestBody:
        description: Cluster data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LinkClusterBody'
        required: true
      x-sdk-operations:
        request-examples:
          curl:
            - name: Example request
              example:
                - type: code
                  lang: curl
                  source:
                    - |-
                      curl -X POST "https://{API-Endpoint}/ak/api/v3/link/resources/crn%3Av1%3Abluemix%3Apublic%3Ablockchain%3Aus-south%3Aa%2Fe00012345%3A000-000-000-000-000%3A%3A" \
                      -H "Content-Type: application/json" \
                      -H "Authorization: Bearer {Access-Token}" \
                      -H "x-refresh-token: {Refresh-Token}" \
                      -d "{
                            \"cluster\": \"mycluster-free\",
                          }"
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkClusterResponse'
              examples:
                response:
                  value:
                    message: Your service instance was successfully created on cluster mycluster-free
                    endpoint: https://12345-optools.so01.blockchain.cloud.ibm.com
        400:
          description: Request is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bad'

  #
  #
  #
  #.
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------
  # Software APIs - ! not applicable for IBP SaaS on IBM Cloud !
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------
  /ak/api/v3/permissions/keys:
    post:
      x-visible-environment: hidden
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - IBP Software APIs
      summary: (Software) - Create an IBP api key
      description: (IBP Software only) - Create an IBP api key. This key can be used to authenticate and call other APIs. Only users or api keys with a `manager` role can call this api. The `api_secret` in the response must be saved by the user. It is unrecoverable. API keys do not expire but can be deleted.
      operationId: create_ibp_api_key
      requestBody:
        description: Pass the desired roles for the new api key. Valid roles - "reader", "writer", "manager".
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiKeyBody'
        required: true
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateApiKeyResponse'
              examples:
                response:
                  value:
                    api_key: <api_key here>
                    api_secret: <api_secret here>
                    roles:
                      - reader
        400:
          description: Request is bad (invalid syntax).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    get:
      x-visible-environment: hidden
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - IBP Software APIs
      summary: (Software) - List IBP api keys
      description: (IBP Software only) - List all IBP api keys and their descriptions. The api secrets will not be in the response.
      operationId: get_ibp_api_keys
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetApiKeyResponse'
              examples:
                response:
                  value:
                    keys:
                      - api_key: <api_key here>
                        ts_created: 1549490200312
                        roles:
                          - reader
                        description: Batman's key
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/permissions/keys/{key_id}:
    delete:
      x-visible-environment: hidden
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - IBP Software APIs
      summary: (Software) - Delete an api key
      description: (IBP Software only) - Delete a single IBP api key. The key becomes unusable immediately.
      operationId: delete_ibp_api_key
      parameters:
        - name: key_id
          in: path
          description: The `api_key` to delete.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteApiKeyResponse'
              examples:
                response:
                  value:
                    deleted: <api_key here>
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/permissions/users:
    post:
      x-visible-environment: hidden
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - IBP Software APIs
      summary: (Software) - Add users
      description: (IBP Software only) - Add new users to the IBP console. Users can log in and perform operations IBP console operations. Only users or api keys with a `manager` role can call this api.
      operationId: add_ibp_users
      requestBody:
        description: Pass the desired roles for the usernames. Valid roles - "reader", "writer", "manager".
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddUserBody'
        required: true
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddUserResponse'
              examples:
                response:
                  value:
                    message: ok
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    delete:
      x-visible-environment: hidden
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - IBP Software APIs
      summary: (Software) - Delete users
      description: (IBP Software only) - Delete existing users by uuid. Only users or api keys with a `manager` role can call this api. Note that uuids are expected, not usernames.
      operationId: delete_ibp_users
      parameters:
        - $ref: '#/components/parameters/QueryUuids'
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteUserResponse'
              examples:
                response:
                  value:
                    uuids:
                      - b26e67a3-8f4c-40e4-b5e2-6303ad2979fc
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    put:
      x-visible-environment: hidden
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - IBP Software APIs
      summary: (Software) - Edit users
      description: (IBP Software only) - Edit existing users by uuid. Only users or api keys with a `manager` role can call this api. Note that uuids are expected, not usernames.
      operationId: edit_ibp_user_roles
      requestBody:
        description: Pass the desired roles for the usernames. Valid roles - "reader", "writer", "manager".
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserBody'
        required: true
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditUserResponse'
              examples:
                response:
                  value:
                    uuids:
                      - b26e67a3-8f4c-40e4-b5e2-6303ad2979fc
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

    get:
      x-visible-environment: hidden
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - IBP Software APIs
      summary: (Software) - List users
      description: (IBP Software only) - List users of the IBP console. Includes the user's roles and the timestamp of when it was added.
      operationId: get_ibp_users
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersResponse'
              examples:
                response:
                  value:
                    uuids:
                      - b26e67a3-8f4c-40e4-b5e2-6303ad2979fc
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'

  /ak/api/v3/permissions/users/password/reset:
    put:
      x-visible-environment: hidden
      x-sdk-exclude: true
      x-cli-exclude: true
      tags:
        - IBP Software APIs
      summary: (Software) - Reset users' passwords
      description: (IBP Software only) - Reset multiple user passwords to the default password. The default password was chosen when IBP console was initially set up. Only users or api keys with a `manager` role can call this api.
      operationId: reset_ibp_user_passwords
      requestBody:
        description: Pass an array of uuids to reset.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPassBody'
        required: true
      responses:
        200:
          description: Request was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPassResponse'
              examples:
                response:
                  value:
                    uuids:
                      - b26e67a3-8f4c-40e4-b5e2-6303ad2979fc
        401:
          description: Request is unauthorized (invalid credentials).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Request is forbidden (credentials lack permission).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
#
#
#
#.
# -------------------------------------------------------------------------------------------------------------------------------------------------------------
# ref components
# -------------------------------------------------------------------------------------------------------------------------------------------------------------
components:
  schemas:
    message_ok:
      type: string
      example: ok
      description: Response message. "ok" indicates the api completed successfully.
    dep_component_id:
      type: string
      example: admin
      description: The unique id for the component in Kubernetes. Not available if component was imported.
    version:
      type: string
      example: 1.4.6-1
      description: The cached Hyperledger Fabric release version.
    version_desired:
      type: string
      example: 1.4.6-1
      description: The Hyperledger Fabric release version to use.
    version_edit:
      type: string
      example: 1.4.6-1
      description: The Hyperledger Fabric release version to update to.
    version_edit_peer:  # peers are differnt, they have an upgrade validation rule below...
      type: string
      example: 1.4.6-1
      description: The Hyperledger Fabric release version to update to.
      x-validate_breaking_version_upgrade:
        1.4.x: 2.4.x  # you cannot upgrade 1.4.x to 2.4.x, unless you ignore it
        2.0.x: 2.4.x  # you cannot upgrade 2.0.x to 2.4.x, unless you ignore it
        2.1.x: 2.4.x  # you cannot upgrade 2.1.x to 2.4.x, unless you ignore it
        2.2.x: 2.4.x  # you cannot upgrade 2.2.x to 2.4.x, unless you ignore it
    ignore_warnings:
      type: boolean
      description: If true will ignore upgrade validation warnings.
    timestamp_creation:
      type: number
      description: UTC UNIX timestamp of component onboarding to the UI. In milliseconds.
      example: 1537262855753
    component_id:
      type: string
      example: component1
      description: The unique identifier of this component. Must start with a letter, be lowercase and only contain letters and numbers. If `id` is not provide a component id will be generated using the field `display_name` as the base.
      minLength: 3  # seems like a good idea to have a min
      maxLength: 64 # couchdb performance limiter
      x-validate_regex_must_pass: is_valid_id
      x-validate_regex_error_msg: regex_fail_valid_id
    type:
      type: string
      example: fabric-peer
      description: 'The type of this component. Such as: "fabric-peer", "fabric-ca", "fabric-orderer", etc.'
    enroll_id:
      type: string
      example: admin
      description: The username of the enroll id.
      x-validate_regex_must_fail: invalid_enroll_characters # fabric-ca does not support these characters - (can't find source of claim)
      x-validate_regex_error_msg: regex_invalid_enroll_chars # fabric-ca does not support these characters - (can't find source of claim)
      maxLength: 255 # CA's user table can only hold 255 - https://github.com/hyperledger/fabric-ca/blob/master/lib/server/db/mysql/mysql.go#L153
    enroll_secret:
      type: string
      example: password
      description: The password of the enroll id.
      x-validate_regex_must_fail: invalid_enroll_characters # fabric-ca does not support these characters - (can't find source of claim)
      x-validate_regex_error_msg: regex_invalid_enroll_chars # fabric-ca does not support these characters - (can't find source of claim)
      maxLength: 255 # not sure of real limit, using the same limit as enroll id...
    location_saas:
      type: string
      example: ibmcloud
      description: Indicates where the component is running.
      maxLength: 1024 # spam prevention limit
      x-validate_illegal_values:
        - ibm_saas
    system_channel_id:
      type: string
      example: testchainid
      description: The name of the system channel. Defaults to `testchainid`.
      maxLength: 256 # spam prevention limit
    tls_cert:
      type: string
      example: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
      description: The TLS certificate as base 64 encoded PEM. Certificate is used to secure/validate a TLS connection with this component.
      x-validate_base64_certificate: true
    tls_root_cert:
      type: string
      example: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
      description: The TLS root certificate as base 64 encoded PEM.
      x-validate_base64_certificate: true
    admin_cert:
      type: string
      example: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
      description: A certificate as base 64 encoded PEM. Also known as the signing certificate of an organization admin.
      x-validate_base64_certificate: true
    root_cert:
      type: string
      example: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
      description: A root certificate as base 64 encoded PEM.
      x-validate_base64_certificate: true
    k8s_zone:
      type: string
      description: 'Specify the Kubernetes zone for the deployment. The deployment will use a k8s node in this zone. Find the list of possible zones by retrieving your Kubernetes node labels: `kubectl get nodes --show-labels`. [More information](https://kubernetes.io/docs/setup/best-practices/multiple-zones)'
      example: '-'
    k8s_region:
      type: string
      description: 'Specify the Kubernetes region for the deployment. The deployment will use a k8s node in this region. Find the list of possible regions by retrieving your Kubernetes node labels: `kubectl get nodes --show-labels`. [More info](https://kubernetes.io/docs/setup/best-practices/multiple-zones)'
      example: '-'
    ca_name:
      type: string
      description: The CA's "CAName" attribute. This name is used to distinguish this CA from the TLS CA.
      example: ca
    tls_ca_name: # same as "ca_name" but the example is different b/c its for the tls ca...
      type: string
      description: The TLS CA's "CAName" attribute. This name is used to distinguish this TLS CA from the other CA.
      example: tlsca
    systemless:
      type: boolean
      description: If true, the orderer will not have a system channel and channel participation APIs must be used to create application channels. Requires Fabric v2.4+. Defaults `false`.
      example: true
    tags:
      type: array
      minLength: 0
      maxLength: 32 # dsh spam prevention limit
      items:
        type: string
        description: User defined strings that can be used to search/filter components. When editing this field set the complete (desired) tags array. Will always conform to lowercase.
        maxLength: 32 # artificial limit, we want users to use short tags
        example: 'fabric-ca'
    display_name_ca:
      type: string
      description: A descriptive name for this CA. The IBP console tile displays this name.
      example: My CA
      maxLength: 64 # UI overflow limiter
    display_name_orderer:
      type: string
      description: A descriptive base name for each ordering node. One or more child IBP console tiles display this name.
      example: orderer
      maxLength: 64 # UI overflow limiter
    display_name_peer:
      type: string
      description: A descriptive name for this peer. The IBP console tile displays this name.
      example: My Peer
      maxLength: 64 # UI overflow limiter
    display_name_msp:
      type: string
      description: A descriptive name for this MSP. The IBP console tile displays this name.
      example: My Peer
      maxLength: 64 # UI overflow limiter
    cluster_id:
      type: string
      description: A unique id to identify this ordering service cluster.
      example: mzdqhdifnl
    cluster_name_orderer:
      type: string
      description: A descriptive name for the ordering service. The parent IBP console orderer tile displays this name.
      example: ordering service 1
      maxLength: 64 # UI overflow limiter
    client_keyfile:
      type: string
      description: The TLS private key for client TLS as base 64 encoded PEM.
      x-validate_case_insensitive: true
    client_certfile:
      type: string
      description: The TLS certificate for client TLS as base 64 encoded PEM.
      x-validate_base64_certificate: true
      x-validate_case_insensitive: true
    keyfile:
      type: string
      x-validate_case_insensitive: true
      description: The CA's private key as base 64 encoded PEM.
    certfile:
      type: string
      x-validate_case_insensitive: true
      description: The CA's certificate as base 64 encoded PEM.
      x-validate_base64_certificate: true
    chainfile:
      type: string
      x-validate_case_insensitive: true
      description: The CA's certificate chain as base 64 encoded PEM.
    replicas:
      type: number
      description: The number of replica pods running at any given time.
      example: 1
      minimum: 0
      maximum: 1024 # spam prevention limiter
    consenter_proposal_fin:
      type: boolean
      description: The state of a pre-created orderer node. A value of `true` means that the orderer node was added as a system channel consenter. This is a manual field. Set it yourself after finishing the raft append flow to indicate that this node is ready for use. See the [Submit config block to orderer](#submit-block) API description for more details about appending raft nodes.
      example: true
    connTimeout:
      type: string
      description: The timeout for a network connection.
      example: 2s
      x-validate_duration: true
      x-minimum: 1e6 # 1 millisecond
      x-maximum: 3.6e12 # 1 hour - dsh shrug
      x-validate_case_insensitive: true
    node_ou_general:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
          description: Indicates if node OUs are enabled or not. [Available on peer/orderer components w/query parameter 'deployment_attrs']
    node_ou:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
          description: Indicates if node OUs are enabled or not.
    dry_run_mode:
      type: boolean
      example: false
      description: If true the request will be validated only. It will not execute, it will not make changes.
    orderer_type:
      type: string
      example: raft
      description: The type of Fabric orderer. Currently, only the type `"raft"` is supported. [etcd/raft](/docs/blockchain?topic=blockchain-ibp-console-build-network#ibp-console-build-network-ordering-console)
      enum:
        - raft
    operations_url_ca:
      type: string
      description: The operations URL for the CA. Include the protocol, hostname/ip and port.
      example: https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:9443
      x-validate_regex_must_pass: is_http_url
      x-validate_regex_error_msg: regex_fail_full_url
    operations_url_orderer:
      type: string
      description: Used by Fabric health checker to monitor the health status of this orderer node. For more information, see [Fabric documentation](https://hyperledger-fabric.readthedocs.io/en/release-1.4/operations_service.html). Include the protocol, hostname/ip and port.
      example: https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:8443
      x-validate_regex_must_pass: is_http_url
      x-validate_regex_error_msg: regex_fail_full_url
    operations_url_peer:
      type: string
      description: Used by Fabric health checker to monitor the health status of this peer. For more information, see [Fabric documentation](https://hyperledger-fabric.readthedocs.io/en/release-1.4/operations_service.html). Include the protocol, hostname/ip and port.
      example: https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443
      x-validate_regex_must_pass: is_http_url
      x-validate_regex_error_msg: regex_fail_full_url
    msp_id:
      type: string
      example: Org1
      description: The MSP id that is related to this component.
      x-validate_regex_must_fail: invalid_msp_id # fabric-ca does not support these characters - (can't find source of claim)
      x-validate_regex_error_msg: regex_invalid_msp_id # fabric-ca does not support these characters - (can't find source of claim)
      maxLength: 250 # fabric-ca does not support - (can't find source of claim)
      x-validate_illegal_values:
        - '.'
        - '..'
    api_url_ca:
      type: string
      description: The URL for the CA. Typically, client applications would send requests to this URL. Include the protocol, hostname/ip and port.
      example: https://n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud:7054
      x-validate_regex_must_pass: is_http_url
      x-validate_regex_error_msg: regex_fail_full_url
    api_url_orderer:
      type: string
      description: The gRPC URL for the orderer. Typically, client applications would send requests to this URL. Include the protocol, hostname/ip and port.
      example: grpcs://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050
      x-validate_regex_must_pass: is_grpc_url
      x-validate_regex_error_msg: regex_fail_full_url
    api_url_peer:
      type: string
      description: The gRPC URL for the peer. Typically, client applications would send requests to this URL. Include the protocol, hostname/ip and port.
      example: grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051
      x-validate_regex_must_pass: is_grpc_url
      x-validate_regex_error_msg: regex_fail_full_url
    grpcwp_url_orderer:
      type: string
      description: The gRPC web proxy URL in front of the orderer. Include the protocol, hostname/ip and port.
      example: https://n3a3ec3-myorderer-proxy.ibp.us-south.containers.appdomain.cloud:443
      x-validate_regex_must_pass: is_http_url
      x-validate_regex_error_msg: regex_fail_full_url
    osnadmin_url_orderer:
      type: string
      description: The HTTP URL for the "osnadmin" Fabric feature. Found on orderers w/ Fabric v2.4+. Include the protocol, hostname/ip and port.
      example: https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7072
      x-validate_regex_must_pass: is_http_url
      x-validate_regex_error_msg: regex_fail_full_url
    grpcwp_url_peer:
      type: string
      description: The gRPC web proxy URL in front of the peer. Include the protocol, hostname/ip and port.
      example: https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
      x-validate_regex_must_pass: is_http_url
      x-validate_regex_error_msg: regex_fail_full_url
    cahost:
      type: string
      example: n3a3ec3-myca.ibp.us-south.containers.appdomain.cloud
      description: The CA's hostname. Do not include protocol or port. Must be a hostname from a known CA.
      maxLength: 1024 # spam prevention limit
      x-validate_known_hostname: true
    caport:
      type: number
      example: 7054
      description: The CA's port.
      maximum: 65536
      minimum: 1
    state_db:
      type: string
      example: couchdb
      description: Select the state database for the peer. Can be either "couchdb" or "leveldb". The default is "couchdb".
      enum:
        - couchdb
        - leveldb
    log_levels:
      type: string
      description: 'Valid log levels: "error", "warn", "info", "verbose", "debug", or "silly".'
      example: silly
      enum:
        - error
        - warn
        - info
        - verbose
        - debug
        - silly
    identity_attrs:
      type: object
      properties:
        hf.Registrar.Roles:
          type: string
          example: '*'
          x-validate_case_insensitive: true
          x-validate_overwrite_key: hf.Registrar.Roles
        hf.Registrar.DelegateRoles:
          type: string
          example: '*'
          x-validate_case_insensitive: true
          x-validate_overwrite_key: hf.Registrar.DelegateRoles
        hf.Revoker:
          type: boolean
          example: true
          x-validate_case_insensitive: true
          x-validate_overwrite_key: hf.Revoker
        hf.IntermediateCA:
          type: boolean
          example: true
          description: If `true` the CA **can** be an intermediate CA.
          x-validate_case_insensitive: true
          x-validate_overwrite_key: hf.IntermediateCA
        hf.GenCRL:
          type: boolean
          example: true
          x-validate_case_insensitive: true
          x-validate_overwrite_key: hf.GenCRL
        hf.Registrar.Attributes:
          type: string
          example: '*'
          x-validate_case_insensitive: true
          x-validate_overwrite_key: hf.Registrar.Attributes
        hf.AffiliationMgr:
          type: boolean
          example: true
          x-validate_case_insensitive: true
          x-validate_overwrite_key: hf.AffiliationMgr
    hsm:
      type: object
      description: The connection details of the HSM (Hardware Security Module).
      required:
        - pkcs11endpoint
      x-validate_no_extra_keys: true
      properties:
        pkcs11endpoint:
          type: string
          description: The url to the HSM. Include the protocol, hostname, and port.
          example: 'tcp://example.com:666'
          x-validate_regex_must_pass: is_url
          x-validate_regex_error_msg: regex_fail_full_url
    scheme_version:
      type: string
      description: The versioning of the IBP console format of this JSON.
      example: v1
    config_override_response:
      type: object
      description: The **cached** configuration override that was set for the Kubernetes deployment. Field does not exist if an override was not set of if the component was imported.
    ekey:
      type: string
      description: An identity private key (base 64 encoded PEM) for this component (aka enrollment private key).
    ecert:
      type: string
      description: An identity certificate (base 64 encoded PEM) for this component that was signed by the CA (aka enrollment certificate).
      example: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
      x-validate_base64_certificate: true
    admin_certs:
      type: array
      description: An array that contains base 64 encoded PEM identity certificates for administrators. Also known as signing certificates of an organization administrator.
      # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
      example:
        [
          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
        ]
      minLength: 0
      maxLength: 100 # spam prevention limit
      items:
        $ref: '#/components/schemas/admin_cert'
    tls_key:
      type: string
      description: A private key (base 64 encoded PEM) for this component's TLS.
    client_auth:
      type: object
      properties:
        type:
          type: string
          example: noclientcert
        tls_certs:
          type: array
          items:
            $ref: '#/components/schemas/client_certfile'
    csr_hosts:
      type: array
      items:
        type: string
        description: Hostnames
    tlsca_root_certs:
      type: array
      description: An array that contains one or more base 64 encoded PEM root certificates for the TLS CA.
      # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
      example:
        [
          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
        ]
      minLength: 1
      maxLength: 100 # dsh spam prevention limit
      items:
        $ref: '#/components/schemas/root_cert'
    ca_root_certs:
      type: array
      description: An array that contains one or more base 64 encoded PEM CA root certificates.
      # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
      example:
        [
          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
        ]
      minLength: 1
      maxLength: 100 # dsh spam prevention limit
      items:
        $ref: '#/components/schemas/root_cert'
    ca_intermediate_certs:
      type: array
      description: An array that contains base 64 encoded PEM intermediate CA certificates.
      # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
      example:
        [
          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
        ]
      minLength: 0
      maxLength: 100 # dsh spam prevention limit
      items:
        type: string
        description: A certificate as base 64 encoded PEM.
        x-validate_base64_certificate: true

    ImportMSPBody:
      type: object
      description: Body schema for importing an MSP
      required:
        - msp_id
        - display_name
        - root_certs
      properties:
        msp_id:
          $ref: '#/components/schemas/msp_id'
        display_name:
          $ref: '#/components/schemas/display_name_msp'
        root_certs:
          $ref: '#/components/schemas/MSPRootCerts'
        intermediate_certs:
          $ref: '#/components/schemas/IntermediateCerts'
        admins:
          $ref: '#/components/schemas/admin_certs'
        tls_root_certs:
          $ref: '#/components/schemas/TlsRootCerts'
        # removed 02/25/2020 - fields have no effect in the UI, even though they are valid MSP fields its confusing to list them in the api
        #revocation_list:
        #  $ref: '#/components/schemas/RevocationCerts'
        #organizational_unit_identifiers:
        #  $ref: '#/components/schemas/OrganizationalUnitIdentifiers'
        #fabric_node_ous:
        #  $ref: '#/components/schemas/FabricNodeOus'

    EditLogSettingsBody:
      description: File system logging settings. All body fields are optional (only send the fields that you want to change). _Changes to this field will restart the IBP console server(s)_
      type: object
      x-validate_no_extra_keys: true
      properties:
        client:
          $ref: '#/components/schemas/LoggingSettingsClient'
        server:
          $ref: '#/components/schemas/LoggingSettingsServer'

    LogSettingsResponse:
      description: The logging settings for the client and server.
      type: object
      properties:
        client:
          $ref: '#/components/schemas/LoggingSettingsClient'
        server:
          $ref: '#/components/schemas/LoggingSettingsServer'

    BadRequest:
      description: Invalid request.
      type: object
      properties:
        statusCode:
          type: number
          example: 400
          enum:
            - 400
        msgs:
          type: array
          items:
            type: string
            description: A descriptive message of what is wrong with the request.
            example: "Expected parameter '$PROPERTY_NAME' to exist."

    CreateCaBody:
      description: Body schema for creating a CA
      required:
        - display_name
        - config_override
      type: object
      x-validate_no_extra_keys: true
      properties:
        id:
          $ref: '#/components/schemas/component_id'
        display_name:
          $ref: '#/components/schemas/display_name_ca'
        resources:
          type: object
          description: CPU and memory properties. This feature is not available if using a free Kubernetes cluster.
          required:
            - ca
          x-validate_no_extra_keys: true
          x-validate_paid_plan_feature: true
          properties:
            ca:
              $ref: '#/components/schemas/ResourceObject'
        storage:
          type: object
          description: Disk space properties. This feature is not available if using a free Kubernetes cluster.
          required:
            - ca
          x-validate_no_extra_keys: true
          x-validate_paid_plan_feature: true
          properties:
            ca:
              $ref: '#/components/schemas/StorageObject'
        zone:
          $ref: '#/components/schemas/k8s_zone'
        config_override:
          type: object
          description: |
            Set `config_override` to create the root/initial enroll id and enroll secret as well as enabling custom CA configurations (such as using postgres). See the [Fabric CA configuration file](https://hyperledger-fabric-ca.readthedocs.io/en/release-1.4/serverconfig.html) for more information about each parameter.

            The field `tlsca` is optional. The IBP console will copy the value of `config_override.ca` into `config_override.tlsca` if `config_override.tlsca` is omitted (which is recommended).

            *The nested field **names** below are not case-sensitive.*
          required:
            - ca
          x-validate_no_extra_keys: true
          properties:
            ca:
              $ref: '#/components/schemas/ConfigCACreate'
            tlsca:
              $ref: '#/components/schemas/ConfigCACreate'
        replicas:
          $ref: '#/components/schemas/replicas'
        tags:
          $ref: '#/components/schemas/tags'
        hsm:
          $ref: '#/components/schemas/hsm'
        region:
          $ref: '#/components/schemas/k8s_region'
        version:
          $ref: '#/components/schemas/version_desired'

        # removed 02/11/2020 - use config_override.registry.identities[0].name
        #enroll_id:
        #  $ref: '#/components/schemas/enroll_id'
        #
        # removed 02/11/2020 - use config_override.registry.identities[0].pass
        #enroll_secret:
        #  $ref: '#/components/schemas/enroll_secret'

    # ca property reference: https://github.com/hyperledger/fabric-ca/blob/master/docs/source/servercli.rst
    # also https://github.com/hyperledger/fabric-ca/blob/master/cmd/fabric-ca-server/config.go
    ConfigCACreate:
      type: object
      x-validate_illegal_keys:
        - version
        - port
        - caount
        - cafiles
        - operations
        - ldap # temp adding field as invalid, issue https://github.ibm.com/IBM-Blockchain/OpTools/issues/3548
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      required:
        - registry
      properties:
        cors:
          $ref: '#/components/schemas/ConfigCA_cors'
        debug:
          $ref: '#/components/schemas/ConfigCA_debug'
        crlsizelimit:
          $ref: '#/components/schemas/ConfigCA_crlsizelimit'
        tls:
          $ref: '#/components/schemas/ConfigCA_tls'
        ca:
          $ref: '#/components/schemas/ConfigCA_ca'
        crl:
          $ref: '#/components/schemas/ConfigCA_crl'
        registry:
          $ref: '#/components/schemas/ConfigCA_registry'
        db:
          $ref: '#/components/schemas/ConfigCA_db'
        #ldap: # removing for now, issue https://github.ibm.com/IBM-Blockchain/OpTools/issues/3548
        #  $ref: '#/components/schemas/ConfigCA_ldap'
        affiliations:
          $ref: '#/components/schemas/ConfigCA_affiliations'
        csr:
          $ref: '#/components/schemas/ConfigCA_csr'
        idemix:
          $ref: '#/components/schemas/ConfigCA_idemix'
        BCCSP: # using upper case even though ca's doc say lower (peer & orderer's bccsp uses upper case, so this is more consistent)
          $ref: '#/components/schemas/Bccsp'
        intermediate:
          $ref: '#/components/schemas/ConfigCA_intermediate'
        cfg:
          $ref: '#/components/schemas/ConfigCA_cfg'
        metrics:
          $ref: '#/components/schemas/Metrics'
        signing:
          $ref: '#/components/schemas/ConfigCA_signing'

    ConfigCA_cors:
      type: object
      required:
        - enabled
        - origins
      x-validate_case_insensitive: true
      properties:
        enabled:
          type: boolean
          example: true
          x-validate_case_insensitive: true
        origins:
          type: array
          x-validate_case_insensitive: true
          items:
            type: string
            example: '*'
            description: The origins that will be allowed to use the REST endpoints on the CA (CORS enforcement).

    ConfigCA_debug:
      type: boolean
      description: Enable debug to debug the CA.
      example: false
      x-validate_case_insensitive: true

    ConfigCA_crlsizelimit:
      type: number
      description: Max size of an acceptable CRL in bytes
      example: 512000
      minimum: 1024
      maximum: 1073741824 # not sure of real limit, use a spam prevention limit
      x-validate_case_insensitive: true

    ConfigCA_tls:
      type: object
      required:
        - certfile
        - keyfile
      x-validate_illegal_keys:
        - enabled
      x-validate_case_insensitive: true
      properties:
        keyfile:
          $ref: '#/components/schemas/keyfile'
        certfile:
          $ref: '#/components/schemas/certfile'
        clientauth:
          type: object
          required:
            - type
            - certfiles
          x-validate_case_insensitive: true
          properties:
            type:
              type: string
              example: noclientcert
              x-validate_case_insensitive: true
            certfiles:
              type: array
              x-validate_case_insensitive: true
              items:
                $ref: '#/components/schemas/client_certfile'

    ConfigCA_ca:
      type: object
      x-validate_case_insensitive: true
      x-validate_illegal_keys:
        - name
      properties:
        keyfile:
          $ref: '#/components/schemas/keyfile'
        certfile:
          $ref: '#/components/schemas/certfile'
        chainfile:
          $ref: '#/components/schemas/chainfile'

    ConfigCA_crl:
      type: object
      required:
        - expiry
      x-validate_case_insensitive: true
      properties:
        expiry:
          type: string
          example: 24h
          description: Expiration of the CRL (Certificate Revocation List) generated by the 'gencrl' requests.
          x-minimum: 6e10 # 1 minute
          x-maximum: 3.154e18 # 100 years - dsh shrug
          x-validate_case_insensitive: true
          x-validate_duration: true

    ConfigCA_registry:
      type: object
      required:
        - maxenrollments
        - identities
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      x-validate_overwrite_key: registry
      properties:
        maxenrollments: # field may seem like a duplicate of the other one by the same name but this one has more usage/visibility in the CA's docs
          type: number
          description: Default maximum number of enrollments per id. Set -1 for infinite.
          minimum: -1
          example: -1
          x-validate_case_insensitive: true
          x-validate_overwrite_key: maxenrollments
        identities:
          type: array
          minLength: 1
          maxLength: 1024 # spam prevention limit
          x-validate_case_insensitive: true
          x-validate_overwrite_key: identities
          items:
            type: object
            required:
              - name
              - pass
              - type
            x-validate_no_extra_keys: true
            x-validate_case_insensitive: true
            properties:
              name:
                type: string
                example: admin
                description: The ID for the identity, aka enroll id.
                minLength: 4 # CA id's have no minimum length, artificial minimum decided by dsh, test team doesn't want it long
                maxLength: 255 # CA's user table can only hold 255 - https://github.com/hyperledger/fabric-ca/blob/master/lib/server/db/mysql/mysql.go#L153
                x-validate_case_insensitive: true
                x-validate_overwrite_key: name
              pass:
                type: string
                example: password
                description: The password for the identity, aka enroll secret.
                minLength: 4 # CA id secrets' have no minimum length, artificial minimum decided by dsh, test team doesn't want it long
                maxLength: 255 # not sure of real limit, using the same limit as enroll id...
                x-validate_case_insensitive: true
                x-validate_overwrite_key: pass
              type:
                type: string
                example: client
                description: The type of identity.
                maxLength: 256 # CA's user table can only hold 256 - https://github.com/hyperledger/fabric-ca/blob/master/lib/server/db/mysql/mysql.go#L153
                x-validate_case_insensitive: true
                x-validate_overwrite_key: type
                enum:
                  - client
                  - peer
                  - orderer
                  - user
                  - admin
              maxenrollments: # CA does not doc this version of this field in their yaml but pretty sure it exists, see test: https://github.com/hyperledger/fabric-ca/blob/release-1.4/testdata/ca/rootca/ca1/fabric-ca-server-config.yaml#L53
                type: number
                description: Maximum number of enrollments for id. Set -1 for infinite.
                minimum: -1
                example: -1
                x-validate_case_insensitive: true
                x-validate_overwrite_key: maxenrollments
              affiliation:
                type: string
                description: The affiliation data for the identity.
                maxLength: 1024 # CA's user table can only hold 1024 - https://github.com/hyperledger/fabric-ca/blob/master/lib/server/db/mysql/mysql.go#L153
                x-validate_case_insensitive: true
                x-validate_overwrite_key: affiliation
              attrs:
                $ref: '#/components/schemas/identity_attrs'

    ConfigCA_db:
      type: object
      required:
        - datasource
        - type
      x-validate_case_insensitive: true
      properties:
        type:
          type: string
          example: postgres
          description: The type of database. Either 'sqlite3', 'postgres', 'mysql'. Defaults 'sqlite3'.
          x-validate_case_insensitive: true
          enum:
            - sqlite3
            - postgres
            - mysql
        datasource:
          type: string
          description: Build this string - "host=\<hostname> port=\<port> user=\<username> password=\<password> dbname=ibmclouddb sslmode=verify-full"
          example: host=fake.databases.appdomain.cloud port=31941 user=ibm_cloud password=password dbname=ibmclouddb sslmode=verify-full
          maxLength: 1024 # spam prevention limit
          x-validate_case_insensitive: true
        tls:
          type: object
          x-validate_case_insensitive: true
          properties:
            certfiles:
              type: array
              items:
                type: string
                description: The database TLS certificate as base 64 encoded PEM.
                x-validate_base64_certificate: true
                x-validate_case_insensitive: true
            client:
              type: object
              required:
                - certfile
                - keyfile
              x-validate_case_insensitive: true
              properties:
                certfile:
                  $ref: '#/components/schemas/client_certfile'
                keyfile:
                  $ref: '#/components/schemas/client_keyfile'
            enabled:
              type: boolean
              example: false
              description: Set to true if TLS is to be used between the CA and its database, else false.
              x-validate_case_insensitive: true

    #ConfigCA_ldap:
    #  type: object
    #  required:
    #    - enabled
    #    - url
    #    - tls
    #    - attribute
    #  properties:
    #    enabled:
    #      type: object
    #      example: false
    #      description: Enable the LDAP client for authentication and attributes.
    #    url:
    #      type: string
    #      example: ldap://<username>:<password>@<host>:<port>/<route>
    #      description: 'The LDAP client URL. Include the protocol, basic auth, hostname, port, and route: `ldap://username:password@host:port/route`'
    #      x-validate_regex_must_pass: is_basic_auth_url
    #      x-validate_regex_error_msg: regex_fail_full_url
    #    tls:
    #      type: object
    #      required:
    #        - certfiles
    #      properties:
    #        certfiles:
    #          type: array
    #          items:
    #            type: string
    #            description: The ldap TLS certificate as base 64 encoded PEM.
    #            x-validate_base64_certificate: true
    #        client:
    #          type: object
    #          required:
    #            - certfile
    #            - keyfile
    #          properties:
    #            certfile:
    #              $ref: '#/components/schemas/client_certfile'
    #            keyfile:
    #              $ref: '#/components/schemas/client_keyfile'
    #    attribute:
    #      type: object
    #      properties:
    #        names:
    #          type: array
    #          description: An array of strings containing the LDAP attribute names of an entry in the LDAP server.
    #          items:
    #            type: string
    #            example: member
    #        converters: # see https://github.com/hyperledger/fabric-ca/blob/master/cmd/fabric-ca-server/config.go#L213
    #          type: array
    #          description: This is used with `maps` to convert an LDAP entry to the value of a Fabric CA attribute. For details see comments in [core.go.](https://github.com/hyperledger/fabric-ca/blob/release-1.4/cmd/fabric-ca-server/config.go#L221)
    #          items:
    #            type: object
    #            properties:
    #              name:
    #                type: string
    #                example: hf.Revoker
    #              value:
    #                type: string
    #                example: attr("uid") =~ "revoker*"
    #        maps: # see https://github.com/hyperledger/fabric-ca/blob/master/cmd/fabric-ca-server/config.go#L230
    #          type: array
    #          description: This is used with `converters` to convert an LDAP entry to the value of a Fabric CA attribute. For details see comments in [core.go.](https://github.com/hyperledger/fabric-ca/blob/release-1.4/cmd/fabric-ca-server/config.go#L221)
    #          items:
    #            type: object
    #            properties:
    #              name:
    #                type: string
    #                example: dn1
    #              value:
    #                type: string
    #                example: peer

    ConfigCA_affiliations:
      type: object
      description: Set the keys to the desired affiliation parent names. The keys 'org1' and 'org2' are examples.
      additionalProperties: true
      x-validate_case_insensitive: true
      properties:
        org1:
          type: array
          items:
            type: string
            example: department1
            description: The case sensitive name of a child affiliation of 'org1'.
        org2:
          type: array
          items:
            type: string
            example: department1
            description: The case sensitive name of a child affiliation of 'org2'.

    ConfigCA_csr:
      type: object
      required:
        - cn
        - names
        - ca
      x-validate_case_insensitive: true
      properties:
        cn:
          type: string
          example: ca
          description: The Common Name for the CSRs.
          x-maximum: 1024 # spam prevention limiter
          x-validate_case_insensitive: true
        keyrequest:
          type: object
          required:
            - algo
            - size
          x-validate_case_insensitive: true
          properties:
            algo:
              type: string
              example: ecdsa
              description: The algorithm to use for CSRs.
              x-maximum: 1024 # spam prevention limiter
              x-validate_case_insensitive: true
            size:
              type: number
              example: 256
              description: The size of the key for CSRs.
              maximum: 1048576 # spam prevention limiter
              minimum: 128
              x-validate_case_insensitive: true
        names:
          type: array
          items:
            type: object
            required:
              - C
              - ST
              - O
            properties:
              C:
                type: string
                example: US
                x-validate_case_insensitive: true
                x-validate_overwrite_key: C
              ST:
                type: string
                example: North Carolina
                x-validate_case_insensitive: true
                x-validate_overwrite_key: ST
              L:
                type: string
                example: Raleigh
                x-validate_case_insensitive: true
                x-validate_overwrite_key: L
              O:
                type: string
                example: Hyperledger
                x-validate_case_insensitive: true
                x-validate_overwrite_key: O
              OU:
                type: string
                example: Fabric
                x-validate_case_insensitive: true
                x-validate_overwrite_key: OU
        hosts:
          type: array
          items:
            type: string
            example: localhost
        ca:
          type: object
          properties:
            expiry:
              type: string
              example: 131400h
              description: The expiration for the root CA certificate.
              x-validate_duration: true
              x-minimum: 2.628e15 # 1 month
              x-maximum: 3.154e18 # 1 year - dsh shrug
            pathlength:
              type: number
              description: The pathlength field is used to limit CA certificate hierarchy. 0 means that the CA cannot issue CA certs, only entity certificates. 1 means that the CA can issue both.
              minimum: 0
              maximum: 1024 # spam prevention limiter

    ConfigCA_idemix:
      type: object
      required:
        - rhpoolsize
        - nonceexpiration
        - noncesweepinterval
      x-validate_case_insensitive: true
      properties:
        rhpoolsize:
          type: number
          example: 100
          description: Specifies the revocation pool size.
          minimum: 0
          maximum: 100000 # spam prevention limiter
          x-validate_case_insensitive: true
        nonceexpiration:
          type: string
          example: 15s
          description: Specifies the expiration for the nonces.
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true
        noncesweepinterval:
          type: string
          example: 15m
          description: Specifies frequency at which expired nonces are removed from data store.
          x-validate_duration: true
          x-minimum: 1e9 # 1 second
          x-maximum: 2.628e15 # 1 month - dsh shrug
          x-validate_case_insensitive: true

    ConfigCA_intermediate:
      type: object
      x-validate_case_insensitive: true
      required:
        - parentserver
      properties:
        parentserver:
          type: object
          required:
            - url
            - caname
          x-validate_case_insensitive: true
          properties:
            url:
              type: string
              description: The url of the parent server. Include the protocol, hostname/ip and port.
              x-validate_regex_must_pass: is_http_url_with_auth
              x-validate_regex_error_msg: regex_fail_full_url
              x-validate_case_insensitive: true
            caname:
              type: string
              description: The name of the CA to enroll within the server.
              maxLength: 1024 # spam prevention limiter
              minLength: 1
              x-validate_case_insensitive: true
        enrollment:
          type: object
          required:
            - hosts
            - profile
            - label
          x-validate_case_insensitive: true
          properties:
            hosts:
              type: string
              description: Hosts to set when issuing the certificate. # dsh not sure if this is right...
              example: localhost
              x-validate_case_insensitive: true
            profile:
              type: string
              description: Name of the signing profile to use when issuing the certificate.
              x-validate_case_insensitive: true
            label:
              type: string
              description: Label to use in HSM operations.
              x-validate_case_insensitive: true
        tls:
          type: object
          x-validate_case_insensitive: true
          required:
            - certfiles
          properties:
            certfiles:
              type: array
              x-validate_case_insensitive: true
              items:
                type: string
                description: The TLS certificate as base 64 encoded PEM.
            client:
              type: object
              required:
                - certfile
                - keyfile
              x-validate_case_insensitive: true
              properties:
                certfile:
                  $ref: '#/components/schemas/client_certfile'
                keyfile:
                  $ref: '#/components/schemas/client_keyfile'

    ConfigCA_cfg:
      type: object
      required:
        - identities
      x-validate_case_insensitive: true
      properties:
        identities:
          type: object
          required:
            - passwordattempts
          x-validate_case_insensitive: true
          properties:
            passwordattempts:
              type: number
              example: 10
              description: The maximum number of incorrect password attempts allowed per identity.
              minimum: 1
              maximum: 1000000 # spam prevention limiter
              x-validate_case_insensitive: true
            allowremove:
              type: boolean
              example: false
              description: Set to `true` to allow deletion of identities. Defaults `false`.
              x-validate_case_insensitive: true

    ConfigCA_signing:
      type: object
      x-validate_case_insensitive: true
      properties:
        default:
          type: object
          properties:
            usage:
              $ref: '#/components/schemas/ConfigCA_usage'
            expiry:
              type: string
              description: Controls the default expiration for signed certificates.
              example: 8760h
              x-validate_duration: true
              x-minimum: 6e10 # 1 minute
              x-maximum: 3.154e18 # 100 years - dsh shrug
              x-validate_case_insensitive: true
        profiles:
          type: object
          x-validate_case_insensitive: true
          properties:
            ca:
              type: object
              description: Controls attributes of intermediate CA certificates.
              x-validate_case_insensitive: true
              properties:
                usage:
                  $ref: '#/components/schemas/ConfigCA_usage'
                expiry:
                  type: string
                  description: Controls the expiration for signed intermediate CA certificates.
                  example: 43800h
                  x-validate_duration: true
                  x-minimum: 6e10 # 1 minute
                  x-maximum: 3.154e18 # 100 years - dsh shrug
                  x-validate_case_insensitive: true
                caconstraint:
                  type: object
                  x-validate_case_insensitive: true
                  properties:
                    isca:
                      type: boolean
                      description: Indicates if this certificate is for a CA.
                      example: true
                    maxpathlen:
                      type: number
                      description: A value of 0 indicates that this intermediate CA cannot issue other intermediate CA certificates.
                      example: 0
                      minimum: 0
                      maximum: 1024 # not sure of real limit, use a spam prevention limit
                      x-validate_case_insensitive: true
                    maxpathlenzero:
                      type: boolean
                      description: To enforce a `maxpathlen` of 0, this field must be `true`. If `maxpathlen` should be ignored or if it is greater than 0 set this to `false`.
                      example: true
            tls:
              type: object
              description: Controls attributes of intermediate tls CA certificates.
              x-validate_case_insensitive: true
              properties:
                usage:
                  $ref: '#/components/schemas/ConfigCA_usage'
                expiry:
                  type: string
                  description: Controls the expiration for signed tls intermediate CA certificates.
                  example: 43800h
                  x-validate_duration: true
                  x-minimum: 6e10 # 1 minute
                  x-maximum: 3.154e18 # 100 years - dsh shrug
                  x-validate_case_insensitive: true

    ConfigCA_usage:
      type: array
      x-validate_case_insensitive: true
      items:
        type: string
        description: Certificate extensions such as `"cert sign"`, `"crl sign"`,`"digital signature"`, `key encipherment"`, `"timestamping"`.
        example: 'cert sign'

    Metrics:
      type: object
      x-validate_case_insensitive: true
      required:
        - provider
      properties:
        provider:
          type: string
          example: prometheus
          description: Metrics provider to use. Can be either 'statsd', 'prometheus', or 'disabled'.
          x-validate_case_insensitive: true
          enum:
            - statsd
            - prometheus
            - disabled
        statsd:
          type: object
          required:
            - network
            - address
            - writeInterval
            - prefix
          x-validate_case_insensitive: true
          properties:
            network:
              type: string
              example: udp
              description: Either UDP or TCP.
              x-validate_case_insensitive: true
              enum:
                - udp
                - tcp
            address:
              $ref: '#/components/schemas/Statsd_address'
            writeInterval:
              $ref: '#/components/schemas/Statsd_writeInterval'
            prefix:
              $ref: '#/components/schemas/Statsd_prefix'

    Statsd_address:
      type: string
      description: The address of the statsd server. Include hostname/ip and port.
      example: 127.0.0.1:8125
      maxLength: 1024 # spam prevention limiter
      x-validate_case_insensitive: true

    Statsd_writeInterval:
      type: string
      description: The frequency at which locally cached counters and gauges are pushed to statsd.
      example: 10s
      x-validate_duration: true
      x-minimum: 1e6 # 1 millisecond
      x-maximum: 8.64e13 # 1 day - dsh shrug
      x-validate_case_insensitive: true

    Statsd_prefix:
      type: string
      description: The string that is prepended to all emitted statsd metrics.
      example: server
      maxLength: 1024 # spam prevention limiter
      x-validate_case_insensitive: true

    # orderer yaml property reference: https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/orderer.yaml
    # orderer deployer property reference: https://github.ibm.com/IBM-Blockchain/ibp-operator/blob/master/docs/overrides/orderer-yaml.md
    ConfigOrdererCreate:
      type: object
      description: |
        Override the [Fabric Orderer configuration file](https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/orderer.yaml) if you want use custom attributes to configure the Orderer. Omit if not.

        *The nested field **names** below are not case-sensitive.*
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      x-validate_illegal_keys:
        - FileLedger
        - Kafka
        - Operations
        - Consensus
      properties:
        General:
          $ref: '#/components/schemas/ConfigOrderer_general'
        Debug:
          $ref: '#/components/schemas/ConfigOrderer_debug'
        Metrics:
          $ref: '#/components/schemas/ConfigOrderer_metrics'

    ConfigOrdererUpdate:
      type: object
      description: |
        Update the [Fabric Orderer configuration file](https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/orderer.yaml) if you want use custom attributes to configure the Orderer. Omit if not.

        *The nested field **names** below are not case-sensitive.*
        *The nested fields sent will be merged with the existing settings.*
      x-validate_no_extra_keys: true
      x-validate_illegal_keys:
        - FileLedger
        - Kafka
        - Operations
        - Consensus
      properties:
        General:
          $ref: '#/components/schemas/ConfigOrderer_general_update'
        Debug:
          $ref: '#/components/schemas/ConfigOrderer_debug'
        Metrics:
          $ref: '#/components/schemas/ConfigOrderer_metrics'

    ConfigOrderer_general:
      type: object
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      x-validate_illegal_keys:
        - LedgerType
        - ListenAddress
        - ListenPort
        - TLS
        - Cluster
        - GenesisMethod
        - GenesisProfile
        - GenesisFile
        - LocalMSPDir
        - LocalMSPID
        - Profile
      properties:
        Keepalive:
          $ref: '#/components/schemas/ConfigOrderer_keepalive'
        BCCSP:
          $ref: '#/components/schemas/Bccsp'
        Authentication:
          $ref: '#/components/schemas/ConfigOrderer_authentication'

    ConfigOrderer_general_update:
      type: object
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        Keepalive:
          $ref: '#/components/schemas/ConfigOrderer_keepalive'
        Authentication:
          $ref: '#/components/schemas/ConfigOrderer_authentication'

    ConfigOrderer_keepalive:
      type: object
      description: Keep alive settings for the GRPC server.
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        ServerMinInterval:
          type: string
          description: The minimum time between client pings. If a client sends pings more frequently the server will disconnect from the client.
          example: 60s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true
        ServerInterval:
          type: string
          description: The time between pings to clients.
          example: 2h
          x-validate_duration: true
          x-minimum: 6e10 # 1 minute
          x-maximum: 3.154e16 # 1 year - dsh shrug
          x-validate_case_insensitive: true
        ServerTimeout:
          type: string
          description: The duration the server will wait for a response from a client before closing the connection.
          example: 20s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true

    Bccsp:
      type: object
      description: Configures the Blockchain Crypto Service Providers (bccsp).
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      x-validate_overwrite_key: BCCSP
      properties:
        Default:
          type: string
          description: The name of the crypto library implementation to use for the BlockChain Crypto Service Provider (bccsp). Defaults to `SW`.
          example: SW
          x-validate_case_insensitive: true
          enum:
            - SW
            - PKCS11
        SW:
          type: object
          description: Software based blockchain crypto provider.
          required:
            - Hash
            - Security
          x-validate_illegal_keys:
            - FileKeyStore
          x-validate_case_insensitive: true
          properties:
            Hash:
              $ref: '#/components/schemas/Bccsp_hash'
            Security:
              $ref: '#/components/schemas/Bccsp_security'
            #FileKeyStore:
            #  $ref: '#/components/schemas/Bccsp_FileKeyStore'
        PKCS11:
          type: object
          description: Hardware-based blockchain crypto provider.
          required:
            - Pin
            - Label
          x-validate_illegal_keys:
            - FileKeyStore
            - Library
          x-validate_case_insensitive: true
          properties:
            #Library:
            #  type: string
            #  description: Location of the PKCS11 module library to use.
            Label:
              type: string
              description: Token Label.
              x-validate_case_insensitive: true
            Pin:
              type: string
              description: The user PIN.
              x-validate_case_insensitive: true
            Hash:
              $ref: '#/components/schemas/Bccsp_hash'
            Security:
              $ref: '#/components/schemas/Bccsp_security'
            #FileKeyStore:
            #  $ref: '#/components/schemas/Bccsp_FileKeyStore'

    Bccsp_hash:
      type: string
      example: SHA2
      description: The hash family to use for the BlockChain Crypto Service Provider (bccsp)
      minLength: 2
      maxLength: 128 # spam prevention limiter
      x-validate_case_insensitive: true

    Bccsp_security:
      type: number
      example: 256
      description: The length of hash to use for the BlockChain Crypto Service Provider (bccsp)
      minimum: 32
      maximum: 1024
      x-validate_case_insensitive: true

    #Bccsp_FileKeyStore:
    #  type: object
    #  x-validate_case_insensitive: true
    #  properties:
    #    KeyStore:
    #      type: string
    #      description: The location of the keystore. If unset the location will be `'LocalMSPDir'/keystore`.
    #      minLength: 1
    #      maxLength: 1024 # spam prevention limiter
    #      x-validate_case_insensitive: true

    ConfigOrderer_authentication:
      type: object
      description: Contains configuration parameters that are related to authenticating client messages.
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        TimeWindow:
          $ref: '#/components/schemas/TimeWindow'
        NoExpirationChecks:
          $ref: '#/components/schemas/NoExpirationChecks'

    TimeWindow:
      type: string
      description: The maximum acceptable difference between the current server time and the client's time.
      example: 15m
      x-validate_duration: true
      x-minimum: 1e9 # 1 second
      x-maximum: 2.628e15 # 1 month - dsh shrug
      x-validate_case_insensitive: true

    NoExpirationChecks:
      type: boolean
      description: Indicates if the orderer should ignore expired identities. Should only be used temporarily to recover from an extreme event such as the expiration of administrators. Defaults `false`.
      example: false
      x-validate_case_insensitive: true

    ConfigOrderer_debug:
      type: object
      description: Controls the debugging options for the orderer.
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        BroadcastTraceDir:
          type: string
          description: Path to directory. If set will cause each request to the Broadcast service to be written to a file in this directory.
          example: ''
          maxLength: 1024 # spam prevention limit
          x-validate_case_insensitive: true
        DeliverTraceDir:
          type: string
          description: Path to directory. If set will cause each request to the Deliver service to be written to a file in this directory.
          example: ''
          maxLength: 1024 # spam prevention limit
          x-validate_case_insensitive: true

    ConfigOrderer_metrics:
      type: object
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        Provider:
          type: string
          description: The metrics provider to use.
          example: disabled
          x-validate_case_insensitive: true
          enum:
            - disabled
            - statsd
            - prometheus
        Statsd:
          type: object
          description: The statsd configuration.
          x-validate_case_insensitive: true
          properties:
            Network:
              type: string
              description: Network protocol to use.
              example: udp
              x-validate_case_insensitive: true
              enum:
                - udp
                - tcp
            Address:
              $ref: '#/components/schemas/Statsd_address'
            WriteInterval:
              $ref: '#/components/schemas/Statsd_writeInterval'
            Prefix:
              $ref: '#/components/schemas/Statsd_prefix'

    # peer yaml property reference: https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/core.yaml
    # peer deployer property reference: https://github.ibm.com/IBM-Blockchain/ibp-operator/blob/master/docs/overrides/core-yaml.md
    ConfigPeerCreate:
      type: object
      description: |
        Override the [Fabric Peer configuration file](https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/core.yaml) if you want use custom attributes to configure the Peer. Omit if not.

        *The nested field **names** below are not case-sensitive.*
      x-validate_no_extra_keys: true
      x-validate_illegal_keys:
        - vm
        - operations
      properties:
        peer:
          type: object
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          x-validate_illegal_keys:
            - listenAddress
            - address
            - addressAutoDetect
            - gomaxprocs
            - tls
            - fileSystemPath
            - localMspType
            - profile
          properties:
            id:
              $ref: '#/components/schemas/ConfigPeer_id'
            networkId:
              $ref: '#/components/schemas/ConfigPeer_networkId'
            keepalive:
              $ref: '#/components/schemas/ConfigPeer_keepalive'
            gossip:
              $ref: '#/components/schemas/ConfigPeer_gossip'
            authentication:
              $ref: '#/components/schemas/ConfigPeer_authentication'
            BCCSP:
              $ref: '#/components/schemas/Bccsp'
            client:
              $ref: '#/components/schemas/ConfigPeer_client'
            deliveryclient:
              $ref: '#/components/schemas/ConfigPeer_deliveryclient'
            adminService:
              $ref: '#/components/schemas/ConfigPeer_adminService'
            validatorPoolSize:
              $ref: '#/components/schemas/ConfigPeer_validatorPoolSize'
            discovery:
              $ref: '#/components/schemas/ConfigPeer_discovery'
            limits:
              $ref: '#/components/schemas/ConfigPeer_limits'
            gateway:
              $ref: '#/components/schemas/ConfigPeer_gateway'
            ledger:
              $ref: '#/components/schemas/ConfigPeer_ledger'

            # temp removed (not yet supported by deployer) - 05/28/2020
            #handlers:
            #  $ref: '#/components/schemas/ConfigPeer_handlers'
        chaincode:
          $ref: '#/components/schemas/ConfigPeer_chaincode'
        metrics:
          $ref: '#/components/schemas/Metrics'

    ConfigPeerUpdate:
      type: object
      description: |
        Update the [Fabric Peer configuration file](https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/core.yaml) if you want use custom attributes to configure the Peer. Omit if not.

        *The nested field **names** below are not case-sensitive.*
        *The nested fields sent will be merged with the existing settings.*
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      x-validate_illegal_keys:
        - vm
        - ledger
        - operations
      properties:
        peer:
          type: object
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          x-validate_illegal_keys:
            - listenAddress
            - address
            - addressAutoDetect
            - gomaxprocs
            - tls
            - fileSystemPath
            - localMspType
            - profile
            - BCCSP
          properties:
            id:
              $ref: '#/components/schemas/ConfigPeer_id'
            networkId:
              $ref: '#/components/schemas/ConfigPeer_networkId'
            keepalive:
              $ref: '#/components/schemas/ConfigPeer_keepalive'
            gossip:
              $ref: '#/components/schemas/ConfigPeer_gossip'
            authentication:
              $ref: '#/components/schemas/ConfigPeer_authentication'
            client:
              $ref: '#/components/schemas/ConfigPeer_client'
            deliveryclient:
              $ref: '#/components/schemas/ConfigPeer_deliveryclient'
            adminService:
              $ref: '#/components/schemas/ConfigPeer_adminService'
            validatorPoolSize:
              $ref: '#/components/schemas/ConfigPeer_validatorPoolSize'
            discovery:
              $ref: '#/components/schemas/ConfigPeer_discovery'
            limits:
              $ref: '#/components/schemas/ConfigPeer_limits'
            gateway:
              $ref: '#/components/schemas/ConfigPeer_gateway'
            ledger:
              $ref: '#/components/schemas/ConfigPeer_ledger'
            # temp removed (not yet supported by deployer) - 05/28/2020
            #handlers:
            #  $ref: '#/components/schemas/ConfigPeer_handlers'
        chaincode:
          $ref: '#/components/schemas/ConfigPeer_chaincode'
        metrics:
          $ref: '#/components/schemas/Metrics'

    ConfigPeer_id:
      type: string
      description: A unique id used to identify this instance.
      example: john-doe
      minLength: 1
      maxLength: 128 # spam prevention limiter
      x-validate_case_insensitive: true

    ConfigPeer_networkId:
      type: string
      description: The ID to logically separate one network from another.
      example: dev
      minLength: 1
      maxLength: 128 # spam prevention limiter
      x-validate_case_insensitive: true

    ConfigPeer_keepalive:
      type: object
      description: Keep alive settings between the peer server and clients.
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        minInterval:
          type: string
          example: 60s
          description: The minimum time between client pings. If a client sends pings more frequently the server disconnects from the client.
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true
        client:
          type: object
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          properties:
            interval:
              type: string
              example: 60s
              description: The time between pings to other peer nodes. Must greater than or equal to the minInterval.
              # dsh todo can you enforce this?
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true
            timeout:
              type: string
              example: 20s
              description: The duration a client waits for a peer's response before it closes the connection.
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true
        deliveryClient:
          type: object
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          properties:
            interval:
              type: string
              example: 60s
              description: The time between pings to ordering nodes. Must greater than or equal to the minInterval
              # dsh todo can you enforce this?
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true
            timeout:
              type: string
              example: 20s
              description: The duration a client waits for an orderer's response before it closes the connection.
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true

    ConfigPeer_gossip:
      type: object
      x-validate_illegal_keys:
        - bootstrap
        - endpoint
        - externalEndpoint
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        useLeaderElection:
          type: boolean
          description: Decides whether a peer will use a dynamic algorithm for "leader" selection (instead of a static leader). The leader is the peer that establishes a connection with the ordering service (OS). The leader pulls ledger blocks from the OS. It is recommended to use leader election for large networks of peers.
          example: true
          x-validate_case_insensitive: true
        orgLeader:
          type: boolean
          description: Decides whether this peer should be an organization "leader". It maintains a connection with the ordering service and disseminate blocks to peers in its own organization.
          example: false
          x-validate_case_insensitive: true
        membershipTrackerInterval:
          type: string
          description: The frequency to poll on membershipTracker.
          example: 5s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        maxBlockCountToStore:
          type: number
          description: Maximum number of blocks that can be stored in memory.
          example: 100
          minimum: 1
          maximum: 10000 # dsh made up limitation
          x-validate_case_insensitive: true
        maxPropagationBurstLatency:
          type: string
          description: Maximum time between consecutive message pushes.
          example: 10ms
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        maxPropagationBurstSize:
          type: number
          description: Maximum number of messages that are stored until a push to remote peers is triggered.
          minimum: 1
          maximum: 1000 # dsh made up limitation
          example: 10
          x-validate_case_insensitive: true
        propagateIterations:
          type: number
          description: Number of times a message is pushed to remote peers.
          minimum: 1
          maximum: 100 # dsh made up limitation
          example: 3
          x-validate_case_insensitive: true
        pullInterval:
          type: string
          description: Determines the frequency of pull phases.
          example: 4s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        pullPeerNum:
          type: number
          description: Number of peers to pull from.
          example: 3
          minimum: 0
          maximum: 1000 # dsh made up limitation
          x-validate_case_insensitive: true
        requestStateInfoInterval:
          type: string
          description: Determines the frequency of pulling stateInfo messages from peers.
          example: 4s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        publishStateInfoInterval:
          type: string
          description: Determines the frequency of pushing stateInfo messages to peers.
          example: 4s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true
        stateInfoRetentionInterval:
          type: string
          description: Maximum time a stateInfo message is kept.
          example: 0s # there are no examples of this field, made up 0s
          x-validate_duration: true
          x-validate_case_insensitive: true
        publishCertPeriod:
          type: string
          description: Time after startup to start including certificates in Alive messages.
          example: 10s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true
        skipBlockVerification:
          type: boolean
          description: Decides whether the peer should skip the verification of block messages.
          example: false
          x-validate_case_insensitive: true
        dialTimeout:
          type: string
          description: The timeout for dialing a network request.
          example: 3s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        connTimeout:
          $ref: '#/components/schemas/connTimeout'
        recvBuffSize:
          type: number
          description: Number of received messages to hold in buffer.
          minimum: 1
          maximum: 1000
          example: 20
          x-validate_case_insensitive: true
        sendBuffSize:
          type: number
          description: Number of sent messages to hold in buffer.
          minimum: 1
          maximum: 10000
          example: 200
          x-validate_case_insensitive: true
        digestWaitTime:
          type: string
          description: Time to wait before the pull-engine processes incoming digests. Should be slightly smaller than requestWaitTime.
          example: 1s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        requestWaitTime:
          type: string
          description: Time to wait before pull-engine removes the incoming nonce. Should be slightly bigger than digestWaitTime.
          example: 1500ms
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        responseWaitTime:
          type: string
          description: Time to wait before the pull-engine ends.
          example: 2s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        aliveTimeInterval:
          type: string
          description: Alive check frequency.
          example: 5s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 3.6e12 # 1 hour - dsh shrug
          x-validate_case_insensitive: true
        aliveExpirationTimeout:
          type: string
          description: Alive expiration timeout.
          example: 25s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true
        reconnectInterval:
          type: string
          description: Reconnect frequency.
          example: 25s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true
        election:
          type: object
          description: Leader election service configuration.
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          properties:
            startupGracePeriod:
              type: string
              description: Longest time the peer will wait for stable membership during leader election startup.
              example: 15s
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true
            membershipSampleInterval:
              type: string
              description: Frequency that gossip membership samples to check its stability.
              example: 1s
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 3.6e12 # 1 hour - dsh shrug
              x-validate_case_insensitive: true
            leaderAliveThreshold:
              type: string
              description: Amount of time after the last declaration message for the peer to perform another leader election.
              example: 10s
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true
            leaderElectionDuration:
              type: string
              description: Amount of time between the peer sending a propose message and it declaring itself as a leader.
              example: 5s
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 3.6e12 # 1 hour - dsh shrug
              x-validate_case_insensitive: true
        pvtData:
          type: object
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          properties:
            pullRetryThreshold:
              type: string
              description: Determines the maximum time to attempt to pull private data for a block before that block is committed without the private data.
              example: 60s
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true
            transientstoreMaxBlockRetention:
              type: number
              description: As private data enters the transient store, it is associated with the peer's current ledger's height. This field defines the maximum difference between the current ledger's height on commit, and the private data residing inside the transient store. Private data outside this range is not guaranteed to exist and will be purged periodically.
              example: 1000
              minimum: 1
              maximum: 1000000 # dsh made up limitation
              x-validate_case_insensitive: true
            pushAckTimeout:
              type: string
              description: Maximum time to wait for an acknowledgment from each peer's private data push.
              example: 3s
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 3.6e12 # 1 hour - dsh shrug
              x-validate_case_insensitive: true
            btlPullMargin:
              type: number
              description: Block to live pulling margin. Used as a buffer to prevent peers from trying to pull private data from others peers that are soon to be purged. "Soon" defined as blocks that will be purged in the next N blocks. This helps a newly joined peer catch up quicker.
              example: 10
              minimum: 0
              maximum: 1000 # dsh made up limitation
              x-validate_case_insensitive: true
            reconcileBatchSize:
              type: number
              description: Determines the maximum batch size of missing private data that will be reconciled in a single iteration. The process of reconciliation is done in an endless loop. The "reconciler" in each iteration tries to pull from the other peers with the most recent missing blocks and this maximum batch size limitation.
              example: 10
              minimum: 0
              maximum: 1000 # dsh made up limitation
              x-validate_case_insensitive: true
            reconcileSleepInterval:
              type: string
              description: Determines the time "reconciler" sleeps from the end of an iteration until the beginning of the next iteration.
              example: 1m
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true
            reconciliationEnabled:
              type: boolean
              description: Determines whether private data reconciliation is enabled or not.
              example: true
              x-validate_case_insensitive: true
            skipPullingInvalidTransactionsDuringCommit:
              type: boolean
              description: Controls whether pulling invalid transaction's private data from other peers need to be skipped during the commit time. If `true` it will be pulled through "reconciler".
              example: false
              x-validate_case_insensitive: true
            implicitCollectionDisseminationPolicy: # fabric v2 only
              type: object
              x-validate_no_extra_keys: true
              x-validate_case_insensitive: true
              properties:
                requiredPeerCount:
                  type: number
                  description: Defines the minimum number of peers to successfully disseminate private data during endorsement.
                  example: 0
                  minimum: 0
                  maximum: 1000 # dsh made up limitation
                  x-validate_case_insensitive: true
                maxPeerCount:
                  type: number
                  description: Defines the maximum number of peers to attempt to disseminate private data during endorsement.
                  example: 1
                  minimum: 1
                  maximum: 1000 # dsh made up limitation
                  x-validate_case_insensitive: true
        state:
          type: object
          description: Gossip state transfer related configuration.
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          properties:
            enabled:
              type: boolean
              description: Controls if the state transfer is enabled or not. If state transfer is active, it syncs up missing blocks and allows lagging peers to catch up with the rest of the network.
              example: true
              x-validate_case_insensitive: true
            checkInterval:
              type: string
              description: The frequency to check whether a peer is lagging behind enough to request blocks by using state transfer from another peer.
              example: 10s
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 8.64e13 # 1 day - dsh shrug
              x-validate_case_insensitive: true
            responseTimeout:
              type: string
              description: Amount of time to wait for state transfer responses from other peers.
              example: 3s
              x-validate_duration: true
              x-minimum: 1e6 # 1 millisecond
              x-maximum: 3.6e12 # 1 hour - dsh shrug
              x-validate_case_insensitive: true
            batchSize:
              type: number
              description: Number of blocks to request by using state transfer from another peer.
              example: 10
              minimum: 1
              maximum: 1000 # dsh made up limitation
              x-validate_case_insensitive: true
            blockBufferSize:
              type: number
              description: Maximum difference between the lowest and highest block sequence number. In order to ensure that there are no holes the actual buffer size is twice this distance.
              example: 100
              minimum: 1
              maximum: 100000 # dsh made up limitation
              x-validate_case_insensitive: true
            maxRetries:
              type: number
              description: Maximum number of retries of a single state transfer request.
              example: 3
              minimum: 1
              maximum: 1000 # dsh made up limitation
              x-validate_case_insensitive: true

    ConfigPeer_authentication:
      type: object
      x-validate_case_insensitive: true
      required:
        - timewindow
      properties:
        timewindow:
          $ref: '#/components/schemas/TimeWindow'

    ConfigPeer_client:
      type: object
      x-validate_case_insensitive: true
      required:
        - connTimeout
      properties:
        connTimeout:
          $ref: '#/components/schemas/connTimeout'

    ConfigPeer_deliveryclient:
      type: object
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        reconnectTotalTimeThreshold:
          type: string
          description: Total time to spend retrying connections to ordering nodes before giving up and returning an error.
          example: 60m
          x-validate_duration: true
          x-minimum: 1e9 # 1 second
          x-maximum: 2.628e15 # 1 month - dsh shrug
          x-validate_case_insensitive: true
        connTimeout:
          $ref: '#/components/schemas/connTimeout'
        reConnectBackoffThreshold:
          type: string
          description: Maximum delay between consecutive connection retry attempts to ordering nodes.
          example: 60m
          x-validate_duration: true
          x-minimum: 1e9 # 1 second
          x-maximum: 2.628e15 # 1 month - dsh shrug
          x-validate_case_insensitive: true
        addressOverrides:
          type: array
          description: A list of orderer endpoint addresses in channel configurations that should be overridden. Typically used when the original orderer addresses no longer exist.
          x-validate_case_insensitive: true
          x-validate_overwrite_key: addressOverrides
          items:
            type: object
            x-validate_no_extra_keys: true
            x-validate_case_insensitive: true
            properties:
              from:
                type: string
                description: The address in the channel configuration that will be overridden.
                example: n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050
                x-validate_regex_must_pass: only_host_and_port
                x-validate_regex_error_msg: regex_fail_host_and_port
                x-validate_case_insensitive: true
              to:
                type: string
                description: The address to use.
                example: n3a3ec3-myorderer2.ibp.us-south.containers.appdomain.cloud:7050
                x-validate_regex_must_pass: only_host_and_port
                x-validate_regex_error_msg: regex_fail_host_and_port
                x-validate_case_insensitive: true
              caCertsFile:
                type: string
                description: The path to the CA's cert file.
                example: my-data/cert.pem
                minLength: 1
                x-validate_case_insensitive: true

    ConfigPeer_adminService:
      type: object
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      required:
        - listenAddress
      description: Used for administrative operations such as control over logger levels. Only peer administrators can use the service.
      properties:
        listenAddress:
          type: string
          description: The interface and port on which the admin server will listen on. Defaults to the same address as the peer's listen address and port 7051.
          example: 0.0.0.0:7051
          minLength: 1
          x-validate_case_insensitive: true

    ConfigPeer_validatorPoolSize:
      type: number
      description: Number of go-routines that will execute transaction validation in parallel. By default, the peer chooses the number of CPUs on the machine. It is recommended to use the default values and not set this field.
      example: 8
      minimum: 1
      maximum: 100 # dsh made up limitation
      x-validate_case_insensitive: true

    ConfigPeer_discovery:
      type: object
      description: The discovery service is used by clients to query information about peers. Such as - which peers have joined a channel, what is the latest channel config, and what possible sets of peers satisfy the endorsement policy (given a smart contract and a channel).
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        enabled:
          type: boolean
          description: Determines whether the discover service is available or not.
          example: true
          x-validate_case_insensitive: true
        authCacheEnabled:
          type: boolean
          description: Determines whether the authentication cache is enabled or not.
          example: true
          x-validate_case_insensitive: true
        authCacheMaxSize:
          type: number
          description: Maximum size of the cache. If exceeded a purge takes place.
          minimum: 1
          maximum: 100000 # spam prevention limit
          example: 1000
          x-validate_case_insensitive: true
        authCachePurgeRetentionRatio:
          type: number
          description: The proportion (0 - 1) of entries that remain in the cache after the cache is purged due to overpopulation.
          minimum: 0
          maximum: 1
          example: 0.75
          x-validate_case_insensitive: true
        orgMembersAllowedAccess:
          type: boolean
          description: Whether to allow non-admins to perform non-channel scoped queries. When `false`, it means that only peer admins can perform non-channel scoped queries.
          example: false
          x-validate_case_insensitive: true

    ConfigPeer_limits: # fabric v2 only
      type: object
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        concurrency:
          type: object
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          properties:
            endorserService:
              type: number
              description: Limits the number of concurrent requests to the endorser service. The endorser service handles application and system chaincode deployment and invocations (including queries).
              example: 2500
              minimum: 1
              maximum: 1000000 # spam prevention limit
              x-validate_case_insensitive: true
            deliverService:
              type: number
              description: Limits the number of concurrent requests to the deliver service. The deliver service handles block and transaction events.
              example: 2500
              minimum: 1
              maximum: 1000000 # spam prevention limit
              x-validate_case_insensitive: true

    ConfigPeer_gateway: # fabric v2 only
      type: object
      x-validate_case_insensitive: true
      properties:
        enabled:
          type: boolean
          description: "Enable or disable the 'Fabric Gateway' on the peer."
          example: true
        endorsementTimeout:
          type: number
          example: 30s
          x-validate_duration: true
          x-minimum: 1e9 # 1 second
          x-maximum: 2.628e15 # 1 month - dsh shrug
          x-validate_case_insensitive: true
        dialTimeout:
          type: number
          example: 2m
          x-validate_duration: true
          x-minimum: 1e9 # 1 second
          x-maximum: 2.628e15 # 1 month - dsh shrug
          x-validate_case_insensitive: true

    ConfigPeer_ledger: # fabric v2 only
      type: object
      x-validate_no_extra_keys: true
      properties:
        state:
          type: object
          x-validate_no_extra_keys: true
          properties:
            couchDBConfig:
              type: object
              x-validate_no_extra_keys: true
              x-validate_case_insensitive: true
              properties:
                cacheSize:
                  description: Maximum size of the cache for CouchDB operations in MB. Defaults to 64MB. Note that if the cache size is not a multiple of 32 MB, the peer will round the size to the next multiple of 32MB.
                  type: number
                  minimum: 0
                  maximum: 4096
                  example: 64
                  x-validate_case_insensitive: true
                maxRetriesOnStartup:
                  description: Maximum number of retries for the peer to connect to CouchDB after peer startup. Defaults to 10.
                  type: number
                  minimum: 0
                  maximum: 1000 # dsh shrug
                  example: 10
                  x-validate_case_insensitive: true


    #ConfigPeer_handlers:
    #  type: object
    #  x-validate_no_extra_keys: true
    #  description: Defines custom handlers that can filter and mutate objects passing within the peer.
    #  properties:
    #    authFilters:
    #      type: array
    #      description: Handlers that will reject or forward proposals from clients.
    #      items:
    #        type: object
    #        x-validate_no_extra_keys: true
    #        properties:
    #          name:
    #            type: string
    #            description: Name of the handler
    #            example: DefaultAuth

    ConfigPeer_chaincode:
      type: object
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      x-validate_illegal_keys:
        - id
        - builder
        - pull
        - car
        - java
        - node
      properties:
        golang:
          type: object
          x-validate_no_extra_keys: true
          x-validate_case_insensitive: true
          x-validate_illegal_keys:
            - runtime
          properties:
            dynamicLink:
              type: boolean
              description: Controls if golang chaincode should be built with dynamic linking or static linking. Defaults `false` (static).
              example: false
              x-validate_case_insensitive: true
        externalBuilders: # fabric v2 only
          type: array
          description: List of directories to treat as external builders/launches of chaincode.
          x-validate_case_insensitive: true
          items:
            type: object
            properties:
              path:
                type: string
                description: The path to a build directory.
                example: /path/to/directory
                x-validate_case_insensitive: true
              name:
                type: string
                description: The name of this builder.
                example: descriptive-build-name
                x-validate_case_insensitive: true
              environmentWhitelist:
                type: array
                x-validate_case_insensitive: true
                items:
                  type: string
                  description: An entry in the environment's white list.
                  example: GOPROXY
                  x-validate_case_insensitive: true
        installTimeout: # fabric v2 only
          type: string
          description: Maximum duration to wait for the chaincode build and install process to complete.
          example: 300s
          x-validate_duration: true
          x-minimum: 1e9 # 1 second
          x-maximum: 2.628e15 # 1 month - dsh shrug
          x-validate_case_insensitive: true
        startuptimeout:
          type: string
          description: Time for starting up a container and waiting for Register to come through.
          example: 300s
          x-validate_duration: true
          x-minimum: 1e9 # 1 second
          x-maximum: 2.628e15 # 1 month - dsh shrug
          x-validate_case_insensitive: true
        executetimeout:
          type: string
          description: Time for Invoke and Init calls to return. This timeout is used by all chaincodes in all the channels, including system chaincodes. Note that if the image is not available the peer needs to build the image, which will take additional time.
          example: 30s
          x-validate_duration: true
          x-minimum: 1e6 # 1 millisecond
          x-maximum: 8.64e13 # 1 day - dsh shrug
          x-validate_case_insensitive: true
        system:
          type: object
          description: The complete whitelist for system chaincodes. To append a new chaincode add the new id to the default list.
          x-validate_case_insensitive: true
          properties:
            cscc:
              type: boolean
              description: Adds the system chaincode `cscc` to the whitelist.
              example: true
              x-validate_case_insensitive: true
              x-validate_overwrite_key: cscc
            lscc:
              type: boolean
              description: Adds the system chaincode `lscc` to the whitelist.
              example: true
              x-validate_case_insensitive: true
              x-validate_overwrite_key: lscc
            escc:
              type: boolean
              description: Adds the system chaincode `escc` to the whitelist.
              example: true
              x-validate_case_insensitive: true
              x-validate_overwrite_key: escc
            vscc:
              type: boolean
              description: Adds the system chaincode `vscc` to the whitelist.
              example: true
              x-validate_case_insensitive: true
              x-validate_overwrite_key: vscc
            qscc:
              type: boolean
              description: Adds the system chaincode `qscc` to the whitelist.
              example: true
              x-validate_case_insensitive: true
              x-validate_overwrite_key: qscc
        # temp removed (not yet supported by deployer) - 05/28/2020
        #systemPlugins:
        #  type: array
        #  description: Array of system chaincodes that can be loaded as GoLang plugins. [Fabric's plugins doc](https://hyperledger-fabric.readthedocs.io/en/release-1.4/systemchaincode.html).
        #  items:
        #    type: object
        #    x-validate_no_extra_keys: true
        #    properties:
        #      enabled:
        #        type: boolean
        #        description: Enabled or disable the plugin.
        #        example: true
        #      name:
        #        type: string
        #        description: Name of the chaincode.
        #        example: myscc
        #      path:
        #        type: string
        #        description: File location of the chaincode.
        #        example: /opt/lib/myscc.so
        #      invokableExternal:
        #        type: boolean
        #        description: Controls if the chaincode can be invoked externally.
        #        example: true
        #      invokableCC2CC:
        #        type: boolean
        #        description: Controls if the chaincode ca be invoked from another chaincode.
        #        example: true
        logging:
          type: object
          x-validate_case_insensitive: true
          properties:
            level:
              type: string
              description: Default logging level for loggers within chaincode containers.
              example: info
              x-validate_case_insensitive: true
              enum:
                - fatal
                - panic
                - error
                - warning
                - info
                - debug
            shim:
              type: string
              description: Override default level for the 'shim' logger.
              example: warning
              x-validate_case_insensitive: true
              enum:
                - fatal
                - panic
                - error
                - warning
                - info
                - debug
            format:
              type: string
              description: Override the default log format for chaincode container logs.
              example: '%{color}%{time:2006-01-02 15:04:05.000 MST} [%{module}] %{shortfunc} -> %{level:.4s} %{id:03x}%{color:reset} %{message}'
              minLength: 1
              maxLength: 1024 # spam prevention limit
              x-validate_case_insensitive: true

    CreateOrdererRaftBody:
      type: object
      description: Body schema for creating an ordering service w/raft
      required:
        - crypto
        - msp_id
        - display_name
        - orderer_type
      # x-validate_no_extra_keys: true - commenting this out b/c we want to allow apollo only fields like system_channel_data
      properties:
        orderer_type:
          $ref: '#/components/schemas/orderer_type'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        cluster_name:
          type: string
          description: |
            A descriptive name for an ordering service. The parent IBP console tile displays this name.

            This field should only be set if you are creating a new OS cluster or when appending to an unknown (external) OS cluster. An unknown/external cluster is one that this IBP console has not imported or created.
          example: ordering service 1
        id:
          $ref: '#/components/schemas/component_id'
        display_name:
          $ref: '#/components/schemas/display_name_orderer'
        cluster_id:
          type: string
          description: |
            This field should only be set if you are appending a new raft node to an **existing** raft cluster. When appending to a known (internal) OS cluster set `cluster_id` to the same value used by the OS cluster. When appending to an unknown (external) OS cluster set `cluster_id` to a unique string.

            Setting this field means the `config` array should be of length 1, since it is not possible to add multiple raft nodes at the same time in Fabric.

            If this field is set the orderer will be "pre-created" and start without a genesis block. It is effectively dead until it is configured. This is the first step to **append** a node to a raft cluster. The next step is to add this node as a consenter to the system-channel by using Fabric-APIs. Then, init this node by sending the updated system-channel config-block with the [Submit config block to orderer](#submit-block) API. The node will not be usable until these steps are completed.
          example: abcde
        external_append:
          type: boolean
          description: Set to `true` only if you are appending to an unknown (external) OS cluster. Else set it to `false` or omit the field. An unknown/external cluster is one that this IBP console has not imported or created.
          example: false
        crypto:
          type: array
          minLength: 1
          maxLength: 100 # dsh spam prevention limit
          description: | # dsh todo update link and content at link for v3
            An array of config objects. When creating a new OS (Ordering Service) the array must have one object per desired raft node. 1 or 5 nodes are recommended.

            **When appending to an existing OS only an array of size 1 is supported.**

            See this [topic](/docs/blockchain?topic=blockchain-ibp-v2-apis#ibp-v2-apis-config) for instructions on how to build a config object.
          items:
            $ref: '#/components/schemas/CryptoObject'
        config_override:
          type: array
          minLength: 0
          maxLength: 100 # dsh spam prevention limit
          description: An array of configuration override objects. 1 object per component. Must be the same size as the `config` array.
          x-validate_matching_lengths: config
          items:
            $ref: '#/components/schemas/ConfigOrdererCreate'
        resources:
          type: object
          description: CPU and memory properties. This feature is not available if using a free Kubernetes cluster.
          x-validate_no_extra_keys: true
          x-validate_paid_plan_feature: true
          required:
            - orderer
          properties:
            orderer:
              $ref: '#/components/schemas/ResourceObject'
            proxy:
              $ref: '#/components/schemas/ResourceObject'
        storage:
          type: object
          description: Disk space properties. This feature is not available if using a free Kubernetes cluster.
          x-validate_no_extra_keys: true
          x-validate_paid_plan_feature: true
          required:
            - orderer
          properties:
            orderer:
              $ref: '#/components/schemas/StorageObject'
        system_channel_id:
          $ref: '#/components/schemas/system_channel_id'
        systemless:
          $ref: '#/components/schemas/systemless'
        zone:
          type: array
          minLength: 0
          maxLength: 100 # dsh spam prevention limit
          description: An array of Kubernetes zones for the deployment. 1 zone per component. Must be the same size as the `config` array.
          x-validate_matching_lengths: config
          items:
            $ref: '#/components/schemas/k8s_zone'
        tags:
          $ref: '#/components/schemas/tags'
        region:
          type: array
          minLength: 0
          maxLength: 100 # dsh spam prevention limit
          description: An array of Kubernetes regions for the deployment. One region per component. Must be the same size as the `config` array.
          x-validate_matching_lengths: config
          items:
            $ref: '#/components/schemas/k8s_region'
        hsm:
          $ref: '#/components/schemas/hsm'
        version:
          $ref: '#/components/schemas/version_desired'

    CreatePeerBody:
      type: object
      description: Body schema for creating a peer
      required:
        - crypto
        - msp_id
        - display_name
      x-validate_no_extra_keys: true
      properties:
        id:
          $ref: '#/components/schemas/component_id'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        display_name:
          $ref: '#/components/schemas/display_name_peer'
        crypto:
          $ref: '#/components/schemas/CryptoObject'
        config_override:
          $ref: '#/components/schemas/ConfigPeerCreate'
        resources:
          $ref: '#/components/schemas/PeerResources'
        storage:
          type: object
          description: Disk space properties. This feature is not available if using a free Kubernetes cluster.
          required:
            - peer
          x-validate_paid_plan_feature: true
          properties:
            peer:
              $ref: '#/components/schemas/StorageObject'
            statedb: # storage uses "statedb" key, unlike resources ("couchdb")
              $ref: '#/components/schemas/StorageObject'
        zone:
          $ref: '#/components/schemas/k8s_zone'
        state_db:
          $ref: '#/components/schemas/state_db'
        tags:
          $ref: '#/components/schemas/tags'
        hsm:
          $ref: '#/components/schemas/hsm'
        region:
          $ref: '#/components/schemas/k8s_region'
        version:
          $ref: '#/components/schemas/version_desired'

    EditCaDataBody:
      description: Body schema to edit local data on a CA
      type: object
      x-validate_illegal_keys:
        - resources
        - storage
        - zone
        - config_override
        - replicas
        - version
        - _id
        - id
        - _rev
        - type
        - cluster_id
        - timestamp
        - edited_timestamp
      x-validate_no_extra_keys: true
      properties:
        display_name:
          $ref: '#/components/schemas/display_name_ca'
        api_url:
          $ref: '#/components/schemas/api_url_ca'
        operations_url:
          $ref: '#/components/schemas/operations_url_ca'
        ca_name:
          $ref: '#/components/schemas/ca_name'
        location:
          $ref: '#/components/schemas/location_saas'
        tags:
          $ref: '#/components/schemas/tags'

    EditOrdererDataBody:
      description: Body schema to edit local data on an orderer node
      type: object
      x-validate_no_extra_keys: true
      properties:
        cluster_name:
          $ref: '#/components/schemas/cluster_name_orderer'
        display_name:
          $ref: '#/components/schemas/display_name_orderer'
        api_url:
          $ref: '#/components/schemas/api_url_orderer'
        operations_url:
          $ref: '#/components/schemas/operations_url_orderer'
        grpcwp_url:
          $ref: '#/components/schemas/grpcwp_url_orderer'
        osnadmin_url:
          $ref: '#/components/schemas/osnadmin_url_orderer'
        msp:
          $ref: '#/components/schemas/msp_crypto_field'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        consenter_proposal_fin:
          $ref: '#/components/schemas/consenter_proposal_fin'
        location:
          $ref: '#/components/schemas/location_saas'
        systemless:
          $ref: '#/components/schemas/systemless'
        system_channel_id:
          $ref: '#/components/schemas/system_channel_id'
        tags:
          $ref: '#/components/schemas/tags'

    EditPeerBody:
      description: Body schema to edit local data on a peer
      type: object
      x-validate_no_extra_keys: true
      properties:
        display_name:
          $ref: '#/components/schemas/display_name_peer'
        api_url:
          $ref: '#/components/schemas/api_url_peer'
        operations_url:
          $ref: '#/components/schemas/operations_url_peer'
        grpcwp_url:
          $ref: '#/components/schemas/grpcwp_url_peer'
        msp:
          $ref: '#/components/schemas/msp_crypto_field'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        location:
          $ref: '#/components/schemas/location_saas'
        tags:
          $ref: '#/components/schemas/tags'

    EditMspBody:
      description: Body schema to edit local data on an MSP
      type: object
      properties:
        msp_id:
          $ref: '#/components/schemas/msp_id'
        display_name:
          $ref: '#/components/schemas/display_name_msp'
        root_certs:
          $ref: '#/components/schemas/MSPRootCerts'
        intermediate_certs:
          $ref: '#/components/schemas/IntermediateCerts'
        admins:
          $ref: '#/components/schemas/admin_certs'
        tls_root_certs:
          $ref: '#/components/schemas/TlsRootCerts'
        # removed 02/25/2020 - fields have no effect in the UI, even though they are valid MSP fields its confusing to list them in the api
        #revocation_list:
        #  $ref: '#/components/schemas/RevocationCerts'
        #organizational_unit_identifiers:
        #  $ref: '#/components/schemas/OrganizationalUnitIdentifiers'
        #fabric_node_ous:
        #  $ref: '#/components/schemas/FabricNodeOus'

    EditSettingsBody:
      description: Body schema to edit IBP console settings. Each setting field is optional.
      type: object
      x-validate_no_extra_keys: true
      properties:
        inactivity_timeouts:
          type: object
          properties:
            enabled:
              type: boolean
              description: Indicates if the auto log out logic is enabled or disabled. Defaults `false`. _Refresh browser after changes_
              example: false
            max_idle_time:
              type: number
              description: Maximum time in milliseconds for a browser client to be idle. Once exceeded the user is logged out. Defaults to `90000` ms (1.5 minutes). _Refresh browser after changes_
              minimum: 60000 # 1 minute - a "large" minimum delay prevents immediate logout (which would be a lockout of sorts)
              maximum: 28800000 # 8 hours
              example: 90000
        file_logging:
          $ref: '#/components/schemas/EditLogSettingsBody'
        max_req_per_min:
          type: number
          description: The base limit for the maximum number of `/api/*` API requests (aka UI requests) in 1 minute. Defaults `25`. [Rate Limits](#rate-limits). _Changes to this field will restart the IBP console server(s)_
          minimum: 1
          maximum: 1000
          example: 25
        max_req_per_min_ak:
          type: number
          description: The base limit for the maximum number of `/ak/api/*` API requests (aka external api key requests) in 1 minute. Defaults `25`. [Rate Limits](#rate-limits). _Changes to this field will restart the IBP console server(s)_
          minimum: 1
          maximum: 1000
          example: 25
        fabric_get_block_timeout_ms:
          type: number
          description: Maximum time in milliseconds to wait for a get-block transaction. Defaults to `10000` ms (10 seconds). _Refresh browser after changes_
          minimum: 1000 # 1 second - a "large" minimum delay prevents immediate timeout
          maximum: 36000000 # 10 hours - dsh shrug
          example: 10000
        fabric_instantiate_timeout_ms:
          type: number
          description: Maximum time in milliseconds to wait for a instantiate chaincode transaction. Defaults to `300000` ms (5 minutes). _Refresh browser after changes_
          minimum: 1000 # 1 second - a "large" minimum delay prevents immediate timeout
          maximum: 36000000 # 10 hours - dsh shrug
          example: 300000
        fabric_join_channel_timeout_ms:
          type: number
          description: Maximum time in milliseconds to wait for a join-channel transaction. Defaults to `25000` ms (25 seconds). _Refresh browser after changes_
          minimum: 1000 # 1 second - a "large" minimum delay prevents immediate timeout
          maximum: 36000000 # 10 hours - dsh shrug
          example: 25000
        fabric_install_cc_timeout_ms:
          type: number
          description: Maximum time in milliseconds to wait for a install chaincode transaction (Fabric v1.x). Defaults to `300000` ms (5 minutes). _Refresh browser after changes_
          minimum: 1000 # 1 second - a "large" minimum delay prevents immediate timeout
          maximum: 36000000 # 10 hours - dsh shrug
          example: 300000
        fabric_lc_install_cc_timeout_ms:
          type: number
          description: Maximum time in milliseconds to wait for a install chaincode transaction (Fabric v2.x). Defaults to `300000` ms (5 minutes). _Refresh browser after changes_
          minimum: 1000 # 1 second - a "large" minimum delay prevents immediate timeout
          maximum: 36000000 # 10 hours - dsh shrug
          example: 300000
        fabric_lc_get_cc_timeout_ms:
          type: number
          description: Maximum time in milliseconds to wait for a get-chaincode transaction (Fabric v2.x). Defaults to `180000` ms (3 minutes). _Refresh browser after changes_
          minimum: 1000 # 1 second - a "large" minimum delay prevents immediate timeout
          maximum: 36000000 # 10 hours - dsh shrug
          example: 180000
        fabric_general_timeout_ms:
          type: number
          description: Default maximum time in milliseconds to wait for a Fabric transaction. Defaults to `10000` ms (10 seconds). _Refresh browser after changes_
          minimum: 1000 # 1 second - a "large" minimum delay prevents immediate timeout
          maximum: 36000000 # 10 hours - dsh shrug
          example: 10000

    UpdateCaBody:
      description: Body schema for updating k8 attributes of a CA
      type: object
      x-validate_illegal_keys:
        - display_name
        - api_url
        - operations_url
        - ca_name
        - location
        - tags
        - _id
        - id
        - _rev
        - type
        - cluster_id
        - timestamp
        - edited_timestamp
        - storage
      x-validate_no_extra_keys: true
      x-validate_only_one_key: all
      x-validate_comp_not_imported: true
      properties:
        config_override:
          type: object
          description: |
            Update the [Fabric CA configuration file](https://hyperledger-fabric-ca.readthedocs.io/en/release-1.4/serverconfig.html) if you want use custom attributes to configure advanced CA features. Omit if not.

            *The nested field **names** below are not case-sensitive.*
            *The nested fields sent will be merged with the existing settings.*
          required:
            - ca
          properties:
            ca:
              $ref: '#/components/schemas/ConfigCAUpdate'
        dry_run_mode:
          $ref: '#/components/schemas/dry_run_mode'
        replicas:
          $ref: '#/components/schemas/replicas'
        resources:
          type: object
          description: CPU and memory properties. This feature is not available if using a free Kubernetes cluster.
          x-validate_paid_plan_feature: true
          required:
            - ca
          properties:
            ca:
              $ref: '#/components/schemas/ResourceObject'
        version:
          $ref: '#/components/schemas/version_edit'
        zone:
          $ref: '#/components/schemas/k8s_zone'

    UpdateOrdererBody:
      description: Body schema for updating k8 attributes of an orderer
      type: object
      x-validate_illegal_keys:
        - display_name
        - api_url
        - operations_url
        - ca_name
        - location
        - tags
        - _id
        - id
        - _rev
        - type
        - cluster_id
        - timestamp
        - edited_timestamp
        - storage
      x-validate_no_extra_keys: true
      x-validate_only_one_key: ak
      x-validate_comp_not_imported: true
      properties:
        admin_certs:
          type: array
          description: An array that contains *all* the base 64 encoded PEM identity certificates for administrators of this component. Also known as signing certificates of an organization administrator.
          # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
          example:
            [
              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
            ]
          minLength: 0
          maxLength: 100 # spam prevention limit
          items:
            $ref: '#/components/schemas/admin_cert'
        config_override:
          $ref: '#/components/schemas/ConfigOrdererUpdate'
        crypto: # update and create should follow a similar structure for simplicity, but the required fields are different
          type: object
          x-validate_no_extra_keys: true
          properties:
            enrollment:
              $ref: '#/components/schemas/UpdateEnrollmentCryptoField'
            msp:
              $ref: '#/components/schemas/UpdateMspCryptoField'
        dry_run_mode:
          $ref: '#/components/schemas/dry_run_mode'
        node_ou:
          $ref: '#/components/schemas/node_ou'
        replicas:
          $ref: '#/components/schemas/replicas'
        resources:
          type: object
          description: CPU and memory properties. This feature is not available if using a free Kubernetes cluster.
          x-validate_no_extra_keys: true
          x-validate_paid_plan_feature: true
          properties:
            orderer:
              $ref: '#/components/schemas/ResourceObject'
            proxy:
              $ref: '#/components/schemas/ResourceObject'
        version:
          $ref: '#/components/schemas/version_edit'
        zone:
          $ref: '#/components/schemas/k8s_zone'

    UpdatePeerBody:
      description: Body schema for updating k8 attributes of a peer
      type: object
      x-validate_illegal_keys:
        - display_name
        - api_url
        - operations_url
        - ca_name
        - location
        - tags
        - _id
        - id
        - _rev
        - type
        - cluster_id
        - timestamp
        - edited_timestamp
        - storage
      x-validate_no_extra_keys: true
      x-validate_only_one_key: ak
      x-validate_comp_not_imported: true
      properties:
        admin_certs:
          type: array
          description: An array that contains *all* the base 64 encoded PEM identity certificates for administrators of this component. Also known as signing certificates of an organization administrator.
          # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
          example:
            [
              'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
            ]
          minLength: 0
          maxLength: 100 # spam prevention limit
          items:
            $ref: '#/components/schemas/admin_cert'
        config_override:
          $ref: '#/components/schemas/ConfigPeerUpdate'
        crypto: # update and create should follow a similar structure for simplicity, but the required fields are different
          type: object
          x-validate_no_extra_keys: true
          properties:
            enrollment:
              $ref: '#/components/schemas/UpdateEnrollmentCryptoField'
            msp:
              $ref: '#/components/schemas/UpdateMspCryptoField'
        dry_run_mode:
          $ref: '#/components/schemas/dry_run_mode'
        node_ou:
          $ref: '#/components/schemas/node_ou'
        replicas:
          $ref: '#/components/schemas/replicas'
        resources:
          $ref: '#/components/schemas/PeerResources'
        version:
          $ref: '#/components/schemas/version_edit_peer'
        ignore_warnings:
          $ref: '#/components/schemas/ignore_warnings'
        zone:
          $ref: '#/components/schemas/k8s_zone'

    # ca property reference: https://github.com/hyperledger/fabric-ca/blob/master/docs/source/servercli.rst
    # also https://github.com/hyperledger/fabric-ca/blob/master/cmd/fabric-ca-server/config.go
    ConfigCAUpdate:
      type: object
      x-validate_illegal_keys:
        - version
        - port
        - signing
        - caount
        - cafiles
        - operations
        - ldap # temp adding field as invalid, issue https://github.ibm.com/IBM-Blockchain/OpTools/issues/3548
      x-validate_no_extra_keys: true
      x-validate_case_insensitive: true
      properties:
        cors:
          $ref: '#/components/schemas/ConfigCA_cors'
        debug:
          $ref: '#/components/schemas/ConfigCA_debug'
        crlsizelimit:
          $ref: '#/components/schemas/ConfigCA_crlsizelimit'
        tls:
          $ref: '#/components/schemas/ConfigCA_tls'
        ca:
          $ref: '#/components/schemas/ConfigCA_ca'
        crl:
          $ref: '#/components/schemas/ConfigCA_crl'
        registry:
          $ref: '#/components/schemas/ConfigCA_registry'
        db:
          $ref: '#/components/schemas/ConfigCA_db'
        #ldap: # removing for now, issue https://github.ibm.com/IBM-Blockchain/OpTools/issues/3548
        #  $ref: '#/components/schemas/ConfigCA_ldap'
        affiliations:
          $ref: '#/components/schemas/ConfigCA_affiliations'
        csr:
          $ref: '#/components/schemas/ConfigCA_csr'
        idemix:
          $ref: '#/components/schemas/ConfigCA_idemix'
        BCCSP: # using upper case even though ca's doc say lower (peer & orderer's bccsp uses upper case, so this is more consistent)
          $ref: '#/components/schemas/Bccsp'
        intermediate:
          $ref: '#/components/schemas/ConfigCA_intermediate'
        cfg:
          $ref: '#/components/schemas/ConfigCA_cfg'
        metrics:
          $ref: '#/components/schemas/Metrics'

    GetMultiComponentsResponse:
      description: Contains the details of multiple components the UI has onboarded.
      type: object
      properties:
        components:
          type: array
          description: Array of components the UI has onboarded.
          items:
            $ref: '#/components/schemas/GenericComponentResponse'

    GenericComponentResponse:
      type: object
      description: Contains the details of a component. Not all components have the same fields, see description of each field for details.
      properties:
        id:
          type: string
          description: The unique identifier of this component. [Available on all component types]
          example: myca-2
        type:
          type: string
          description: 'The type of this component [Available on all component types]'
          enum:
            - fabric-peer
            - fabric-ca
            - fabric-orderer
          example: fabric-ca
        display_name:
          type: string
          description: The displayed name of this component. [Available on all component types]
          example: Example CA
        cluster_id:
          type: string
          description: A unique id to identify this ordering service cluster. [Available on orderer components]
          example: mzdqhdifnl
        cluster_name:
          type: string
          description: A descriptive name for the ordering service. The parent IBP console orderer tile displays this name. [Available on orderer components]
          example: ordering service 1
        grpcwp_url:
          type: string
          description: The URL for the grpc web proxy for this component. [Available on peer/orderer components]
          example: https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084
        api_url:
          type: string
          description: The gRPC URL for the component. Typically, client applications would send requests to this URL. [Available on ca/peer/orderer components]
          example: grpcs://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:7051
        operations_url:
          type: string
          description: Used by Fabric health checker to monitor health status of the node. For more information, see [Fabric documentation](https://hyperledger-fabric.readthedocs.io/en/release-1.4/operations_service.html). [Available on ca/peer/orderer components]
          example: https://n3a3ec3-mypeer.ibp.us-south.containers.appdomain.cloud:9443
        msp:
          type: object
          properties:
            ca:
              type: object
              properties:
                name:
                  type: string
                  example: org1CA
                  description: The "name" to distinguish this CA from the TLS CA. [Available on ca components]
                root_certs:
                  type: array
                  description: An array that contains one or more base 64 encoded PEM root certificates for the CA. [Available on ca/peer/orderer components]
                  # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
                  example:
                    [
                      'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                    ]
                  items:
                    $ref: '#/components/schemas/root_cert'
            tlsca:
              type: object
              properties:
                name:
                  type: string
                  example: org1tlsCA
                  description: The "name" to distinguish this CA from the other CA. [Available on ca components]
                root_certs:
                  type: array
                  description: An array that contains one or more base 64 encoded PEM root certificates for the TLS CA. [Available on ca/peer/orderer components]
                  # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
                  example:
                    [
                      'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                    ]
                  items:
                    $ref: '#/components/schemas/root_cert'
            component:
              type: object
              properties:
                tls_cert:
                  $ref: '#/components/schemas/tls_cert'
                ecert:
                  type: string
                  description: An identity certificate (base 64 encoded PEM) for this component that was signed by the CA (aka enrollment certificate). [Available on peer/orderer components w/query parameter 'deployment_attrs']
                  example: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
                  x-validate_base64_certificate: true
                admin_certs:
                  type: array
                  description: An array that contains base 64 encoded PEM identity certificates for administrators. Also known as signing certificates of an organization administrator. [Available on peer/orderer components w/query parameter 'deployment_attrs']
                  # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
                  example:
                    [
                      'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                    ]
                  minLength: 0
                  maxLength: 100 # spam prevention limit
                  items:
                    $ref: '#/components/schemas/admin_cert'
        msp_id:
          type: string
          example: Org1
          description: The MSP id that is related to this component. [Available on all components]
        location:
          $ref: '#/components/schemas/location_saas'
        node_ou:
          $ref: '#/components/schemas/node_ou_general'
        resources:
          type: object
          description: The **cached** Kubernetes resource attributes for this component. [Available on ca/peer/orderer components w/query parameter 'deployment_attrs']
          properties:
            ca:
              $ref: '#/components/schemas/GenericResources'
            peer:
              $ref: '#/components/schemas/GenericResources'
            orderer:
              $ref: '#/components/schemas/GenericResources'
            proxy:
              $ref: '#/components/schemas/GenericResources'
            statedb:
              $ref: '#/components/schemas/GenericResources'
        scheme_version:
          $ref: '#/components/schemas/scheme_version'
        state_db:
          type: string
          description: The type of ledger database for a peer. [Available on peer components w/query parameter 'deployment_attrs']
          example: couchdb
        storage:
          type: object
          description: The **cached** Kubernetes storage attributes for this component. [Available on ca/peer/orderer components w/query parameter 'deployment_attrs']
          properties:
            ca:
              $ref: '#/components/schemas/StorageObject'
            peer:
              $ref: '#/components/schemas/StorageObject'
            orderer:
              $ref: '#/components/schemas/StorageObject'
            statedb:
              $ref: '#/components/schemas/StorageObject'
        timestamp:
          type: number
          description: UNIX timestamp of component creation, UTC, ms. [Available on all components]
          example: 1537262855753
        tags:
          $ref: '#/components/schemas/tags'
        version:
          type: string
          description: The cached Hyperledger Fabric version for this component. [Available on ca/peer/orderer components w/query parameter 'deployment_attrs']
          example: 1.4.6-1
        zone:
          type: string
          description: The Kubernetes zone of this component's deployment. [Available on ca/peer/orderer components w/query parameter 'deployment_attrs']
          example: '-'

    PeerResponse:
      type: object
      description: Contains the details of a peer.
      properties:
        id:
          $ref: '#/components/schemas/component_id'
        dep_component_id:
          $ref: '#/components/schemas/dep_component_id'
        api_url:
          $ref: '#/components/schemas/api_url_peer'
        display_name:
          $ref: '#/components/schemas/display_name_peer'
        grpcwp_url:
          $ref: '#/components/schemas/grpcwp_url_peer'
        location:
          $ref: '#/components/schemas/location_saas'
        operations_url:
          $ref: '#/components/schemas/operations_url_peer'
        config_override:
          $ref: '#/components/schemas/config_override_response'
        node_ou:
          $ref: '#/components/schemas/node_ou'
        msp:
          $ref: '#/components/schemas/msp_crypto_field'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        resources:
          type: object
          description: The **cached** Kubernetes resource attributes for this component. Not available if peer was imported.
          properties:
            peer:
              $ref: '#/components/schemas/GenericResources'
            proxy:
              $ref: '#/components/schemas/GenericResources'
            statedb:
              $ref: '#/components/schemas/GenericResources'
        scheme_version:
          $ref: '#/components/schemas/scheme_version'
        state_db:
          $ref: '#/components/schemas/state_db'
        storage:
          type: object
          description: The **cached** Kubernetes storage attributes for this component. Not available if peer was imported.
          properties:
            peer:
              $ref: '#/components/schemas/StorageObject'
            statedb:
              $ref: '#/components/schemas/StorageObject'
        tags:
          $ref: '#/components/schemas/tags'
        timestamp:
          $ref: '#/components/schemas/timestamp_creation'
        type:
          $ref: '#/components/schemas/type'
        version:
          $ref: '#/components/schemas/version'
        zone:
          $ref: '#/components/schemas/k8s_zone'

    CaResponse:
      type: object
      description: Contains the details of a CA.
      properties:
        id:
          $ref: '#/components/schemas/component_id'
        dep_component_id:
          $ref: '#/components/schemas/dep_component_id'
        display_name:
          $ref: '#/components/schemas/display_name_ca'
        api_url:
          $ref: '#/components/schemas/api_url_peer'
        operations_url:
          $ref: '#/components/schemas/operations_url_ca'
        config_override:
          $ref: '#/components/schemas/config_override_response'
        location:
          $ref: '#/components/schemas/location_saas'
        msp:
          $ref: '#/components/schemas/msp_crypto_field'
        resources:
          type: object
          description: The **cached** Kubernetes resource attributes for this component. Not available if CA was imported.
          properties:
            ca:
              $ref: '#/components/schemas/GenericResources'
        scheme_version:
          $ref: '#/components/schemas/scheme_version'
        storage:
          type: object
          description: The **cached** Kubernetes storage attributes for this component. Not available if CA was imported.
          properties:
            ca:
              $ref: '#/components/schemas/StorageObject'
        tags:
          $ref: '#/components/schemas/tags'
        timestamp:
          $ref: '#/components/schemas/timestamp_creation'
        version:
          $ref: '#/components/schemas/version'
        zone:
          $ref: '#/components/schemas/k8s_zone'

    CreateOrdererResponse:
      type: object
      properties:
        created:
          type: array
          description: Contains array of ordering nodes.
          items:
            $ref: '#/components/schemas/OrdererResponse'

    OrdererResponse:
      type: object
      description: Contains the details of an ordering node.
      properties:
        id:
          $ref: '#/components/schemas/component_id'
        dep_component_id:
          $ref: '#/components/schemas/dep_component_id'
        api_url:
          $ref: '#/components/schemas/api_url_orderer'
        display_name:
          $ref: '#/components/schemas/display_name_orderer'
        cluster_id:
          $ref: '#/components/schemas/cluster_id'
        cluster_name:
          $ref: '#/components/schemas/cluster_name_orderer'
        grpcwp_url:
          $ref: '#/components/schemas/grpcwp_url_orderer'
        osnadmin_url:
          $ref: '#/components/schemas/osnadmin_url_orderer'
        location:
          $ref: '#/components/schemas/location_saas'
        operations_url:
          $ref: '#/components/schemas/operations_url_orderer'
        orderer_type:
          $ref: '#/components/schemas/orderer_type'
        config_override:
          $ref: '#/components/schemas/config_override_response'
        consenter_proposal_fin:
          $ref: '#/components/schemas/consenter_proposal_fin'
        node_ou:
          $ref: '#/components/schemas/node_ou'
        msp:
          $ref: '#/components/schemas/msp_crypto_field'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        resources:
          type: object
          description: The **cached** Kubernetes resource attributes for this component. Not available if orderer was imported.
          properties:
            orderer:
              $ref: '#/components/schemas/GenericResources'
            proxy:
              $ref: '#/components/schemas/GenericResources'
        scheme_version:
          $ref: '#/components/schemas/scheme_version'
        storage:
          type: object
          description: The **cached** Kubernetes storage attributes for this component. Not available if orderer was imported.
          properties:
            orderer:
              $ref: '#/components/schemas/StorageObject'
        system_channel_id:
          $ref: '#/components/schemas/system_channel_id'
        tags:
          $ref: '#/components/schemas/tags'
        timestamp:
          $ref: '#/components/schemas/timestamp_creation'
        type:
          $ref: '#/components/schemas/type'
        version:
          $ref: '#/components/schemas/version'
        zone:
          $ref: '#/components/schemas/k8s_zone'

    MspResponse:
      type: object
      description: Contains the details of an MSP (Membership Service Provider).
      properties:
        id:
          $ref: '#/components/schemas/component_id'
        type:
          $ref: '#/components/schemas/type'
        display_name:
          $ref: '#/components/schemas/display_name_msp'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        timestamp:
          $ref: '#/components/schemas/timestamp_creation'
        tags:
          $ref: '#/components/schemas/tags'
        root_certs:
          $ref: '#/components/schemas/MSPRootCerts'
        intermediate_certs:
          $ref: '#/components/schemas/IntermediateCerts'
        admins:
          $ref: '#/components/schemas/admin_certs'
        scheme_version:
          $ref: '#/components/schemas/scheme_version'
        tls_root_certs:
          $ref: '#/components/schemas/TlsRootCerts'

    GetPublicSettingsResponse:
      type: object
      description: Contains the details of all public settings for the UI
      properties:
        ACTIVITY_TRACKER_PATH:
          type: string
          description: The path to the activity tracker file. This file holds details of all activity. Defaults to '?' (disabled).
          example: '/logs'
        ATHENA_ID:
          type: string
          description: Random/unique id for the process running the IBP console server.
          example: 17v7e
        AUTH_SCHEME:
          type: string
          description: The type of auth protecting the UI.
          example: iam
        CALLBACK_URI:
          type: string
          description: Route used for an SSO callback uri. Only used if AUTH_SCHEME is "iam".
          example: /auth/cb
        CLUSTER_DATA:
          type: object
          properties:
            type:
              type: string
              example: 'paid'
              description: Indicates whether this is a paid or free IBP console.
        CONFIGTXLATOR_URL:
          type: string
          description: URL used for a configtxlator rest server.
          example: https://n3a3ec3-configtxlator.ibp.us-south.containers.appdomain.cloud
        CRN:
          type: object
          description: metadata about the IBM Cloud service instance. [Only populated if using IBM Cloud]
          properties:
            account_id:
              type: string
              example: a/abcd
            c_name:
              type: string
              example: staging
            c_type:
              type: string
              example: public
            instance_id:
              type: string
              example: abc123
            location:
              type: string
              example: us-south
            resource_id:
              type: string
              example: '-'
            resource_type:
              type: string
              example: '-'
            service_name:
              type: string
              example: blockchain
            version:
              type: string
              example: v1
        CRN_STRING:
          type: string
          example: 'crn:v1:staging:public:blockchain:us-south:a/abcd:abc123::'
        CSP_HEADER_VALUES:
          type: array
          description: array of strings that define the Content Security Policy headers for the IBP console.
          items:
            type: string
            example: '-'
        DB_SYSTEM:
          type: string
          description: The id of the database for internal documents.
          example: 'system'
        DEPLOYER_URL:
          type: string
          example: https://api.dev.blockchain.cloud.ibm.com
          description: URL of the companion application for the IBP console.
        DOMAIN:
          type: string
          description: Browser cookies will use this value for their domain property. Thus it should match the URL's domain in the browser. `null` is valid if serving over http.
          example: localhost
        ENVIRONMENT:
          type: string
          description: Either "dev" "staging" or "prod". Controls different security settings and minor things such as the amount of time to cache content.
          example: prod
        FABRIC_CAPABILITIES:
          type: object
          description: Contains the Hyperledger Fabric capabilities flags that should be used.
          properties:
            application:
              type: array
              items:
                type: string
                example: 'V1_1'
            channel:
              type: array
              items:
                type: string
                example: 'V1_1'
            orderer:
              type: array
              items:
                type: string
                example: 'V1_1'
        FEATURE_FLAGS:
          type: object
          description: Configures th IBP console to enable/disable features.
          example: {}
        FILE_LOGGING:
          type: object
          properties:
            server:
              $ref: '#/components/schemas/LogSettingsResponse'
            client:
              $ref: '#/components/schemas/LogSettingsResponse'
          description: File logging settings.
        HOST_URL:
          type: string
          description: The external URL to reach the IBP console.
          example: http://localhost:3000
        IAM_CACHE_ENABLED:
          type: boolean
          description: If true an in memory cache will be used to interface with the IBM IAM (an authorization) service. [Only applies if IBP is running in IBM Cloud]
          example: true
        IAM_URL:
          type: string
          description: The URL to reach the IBM IAM service. [Only applies if IBP is running in IBM Cloud]
          example: '-'
        IBM_ID_CALLBACK_URL:
          type: string
          description: The URL to use during SSO login with the IBM IAM service. [Only applies if IBP is running in IBM Cloud]
          example: http://localhost:3000/auth/login
        IGNORE_CONFIG_FILE:
          type: boolean
          description: If true the config file will not be loaded during startup. Thus settings in the config file will not take effect.
          example: true
        INACTIVITY_TIMEOUTS:
          type: object
          properties:
            enabled:
              type: boolean
              example: true
            max_idle_time:
              type: number
              description: How long to wait before auto-logging out a user. In milliseconds.
              example: 60000
        INFRASTRUCTURE:
          type: string
          description: What type of infrastructure is being used to run the IBP console. "ibmcloud", "azure", "other"
          example: ibmcloud
        LANDING_URL:
          type: string
          example: http://localhost:3000
        LOGIN_URI:
          type: string
          example: /auth/login
          description: path for user login
        LOGOUT_URI:
          type: string
          example: /auth/logout
          description: path for user logout
        MAX_REQ_PER_MIN:
          type: number
          description: The number of `/api/*` requests per minute to allow. Exceeding this limit results in 429 error responses.
          example: 25
        MAX_REQ_PER_MIN_AK:
          type: number
          description: The number of `/ak/api/*` requests per minute to allow. Exceeding this limit results in 429 error responses.
          example: 25
        MEMORY_CACHE_ENABLED:
          type: boolean
          description: If true an in memory cache will be used against couchdb requests.
          example: true
        PORT:
          type: number
          description: Internal port that IBP console is running on.
          example: 3000
        PROXY_CACHE_ENABLED:
          type: boolean
          description: If true an in memory cache will be used for internal proxy requests.
          example: true
        PROXY_TLS_FABRIC_REQS:
          type: string
          description: |
            If `"always"` requests to Fabric components will go through the IBP console server.
            If `true` requests to Fabric components with IP based URLs will go through the IBP console server, while Fabric components with hostname based URLs will go directly from the browser to the component.
            If `false` all requests to Fabric components will go directly from the browser to the component.
          example: always
        PROXY_TLS_HTTP_URL:
          type: string
          description: The URL to use to proxy an http request to a Fabric component.
          example: http://localhost:3000
        PROXY_TLS_WS_URL:
          type: string
          description: The URL to use to proxy WebSocket request to a Fabric component.
          example: http://localhost:3000
        REGION:
          type: string
          description: If it's "local", things like https are disabled.
          example: us_south
        SESSION_CACHE_ENABLED:
          type: boolean
          description: If true an in memory cache will be used for browser session data.
          example: true
        TIMEOUTS:
          type: object
          description: Various timeouts for different Fabric operations
          example: {}
        TIMESTAMPS:
          $ref: '#/components/schemas/SettingsTimestampData'
        TRANSACTION_VISIBILITY:
          type: object
          description: Controls if Fabric transaction details are visible on the UI.
        TRUST_PROXY:
          type: string
          description: Controls if proxy headers such as `X-Forwarded-*` should be parsed to gather data such as the client's IP.
          example: loopback
        TRUST_UNKNOWN_CERTS:
          type: boolean
          description: Controls if signatures in a signature collection APIs should skip verification or not.
          example: true
        VERSIONS:
          type: object
          description: The various commit hashes of components powering this IBP console.
          properties:
            apollo:
              type: string
              example: 65f3cbfd
              description: The commit hash of Apollo code (front-end)
            athena:
              type: string
              example: 1198f94
              description: The commit hash of Athena code (back-end)
            stitch:
              type: string
              example: 0f1a0c6
              description: The commit hash of Stitch code (fabric-sdk)
            tag:
              type: string
              example: v0.4.31
              description: The tag of the build powering this IBP console

    GetNotificationsResponse:
      type: object
      properties:
        total:
          type: number
          description: Number of notifications in database.
          example: 10
        returning:
          type: number
          description: Number of notifications returned.
          example: 3
        notifications:
          type: array
          description: This array is ordered by creation date.
          items:
            $ref: '#/components/schemas/NotificationData'

    ImportCaBody:
      type: object
      description: Body schema to import a CA
      required:
        - display_name
        - api_url
        - msp
      x-validate_no_extra_keys: true
      properties:
        id:
          $ref: '#/components/schemas/component_id'
        display_name:
          type: string
          description: A descriptive name for this component.
          example: Sample CA
        location:
          $ref: '#/components/schemas/location_saas'
        api_url:
          $ref: '#/components/schemas/api_url_ca'
        operations_url:
          $ref: '#/components/schemas/operations_url_ca'
        tags:
          $ref: '#/components/schemas/tags'
        tls_cert:
          $ref: '#/components/schemas/tls_cert'
        msp:
          type: object
          x-validate_no_extra_keys: true
          required:
            - component
            - tlsca
            - ca
          properties:
            ca:
              type: object
              x-validate_no_extra_keys: true
              required:
                - name
              properties:
                name:
                  type: string
                  example: org1CA
                  description: The "name" to distinguish this CA from the TLS CA.
                root_certs:
                  type: array
                  description: An array that contains one or more base 64 encoded PEM root certificates for the CA.
                  # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
                  example:
                    [
                      'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                    ]
                  minLength: 1
                  maxLength: 100 # dsh spam prevention limit
                  items:
                    $ref: '#/components/schemas/root_cert'
            tlsca:
              type: object
              x-validate_no_extra_keys: true
              required:
                - name
              properties:
                name:
                  type: string
                  example: org1tlsCA
                  description: The "name" to distinguish this CA from the other CA.
                root_certs:
                  type: array
                  description: An array that contains one or more base 64 encoded PEM root certificates for the TLS CA.
                  # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
                  example:
                    [
                      'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
                    ]
                  minLength: 1
                  maxLength: 100 # dsh spam prevention limit
                  items:
                    $ref: '#/components/schemas/root_cert'
            component:
              type: object
              x-validate_no_extra_keys: true
              required:
                - tls_cert
              properties:
                tls_cert:
                  $ref: '#/components/schemas/tls_cert'

    ImportOrdererBody:
      type: object
      description: Body schema to import an orderer cluster (raft)
      required:
        - msp_id
        - cluster_name
        - display_name
        - grpcwp_url
        - msp
      x-validate_no_extra_keys: true
      properties:
        api_url:
          $ref: '#/components/schemas/api_url_orderer'
        cluster_id:
          $ref: '#/components/schemas/cluster_id'
        cluster_name:
          $ref: '#/components/schemas/cluster_name_orderer'
        id:
          $ref: '#/components/schemas/component_id'
        display_name:
          $ref: '#/components/schemas/display_name_orderer'
        grpcwp_url:
          $ref: '#/components/schemas/grpcwp_url_orderer'
        osnadmin_url:
          $ref: '#/components/schemas/osnadmin_url_orderer'
        location:
          $ref: '#/components/schemas/location_saas'
        msp:
          $ref: '#/components/schemas/msp_crypto_field'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        operations_url:
          $ref: '#/components/schemas/operations_url_orderer'
        systemless:
          $ref: '#/components/schemas/systemless'
        system_channel_id:
          $ref: '#/components/schemas/system_channel_id'
        tags:
          $ref: '#/components/schemas/tags'

    ImportPeerBody:
      type: object
      description: Body schema to import a peer
      required:
        - msp_id
        - display_name
        - grpcwp_url
        - msp
      x-validate_no_extra_keys: true
      properties:
        id:
          $ref: '#/components/schemas/component_id'
        api_url:
          $ref: '#/components/schemas/api_url_peer'
        display_name:
          $ref: '#/components/schemas/display_name_peer'
        grpcwp_url:
          $ref: '#/components/schemas/grpcwp_url_peer'
        location:
          $ref: '#/components/schemas/location_saas'
        msp:
          $ref: '#/components/schemas/msp_crypto_field'
        msp_id:
          $ref: '#/components/schemas/msp_id'
        operations_url:
          $ref: '#/components/schemas/operations_url_peer'
        tags:
          $ref: '#/components/schemas/tags'

    msp_crypto_field:
      type: object
      description: The msp crypto data.
      x-validate_no_extra_keys: true
      required:
        - component
        - tlsca
      properties:
        ca:
          type: object
          x-validate_no_extra_keys: true
          properties:
            name:
              $ref: '#/components/schemas/ca_name'
            root_certs:
              $ref: '#/components/schemas/ca_root_certs'
        tlsca:
          type: object
          x-validate_no_extra_keys: true
          required:
            - root_certs
          properties:
            name:
              $ref: '#/components/schemas/tls_ca_name'
            root_certs:
              $ref: '#/components/schemas/tlsca_root_certs'
        component:
          type: object
          x-validate_no_extra_keys: true
          required:
            - tls_cert
          properties:
            tls_cert:
              $ref: '#/components/schemas/tls_cert'
            ecert:
              $ref: '#/components/schemas/ecert'
            admin_certs:
              $ref: '#/components/schemas/admin_certs'

    UpdateMspCryptoField:
      type: object
      description: Edit the `msp` crypto data of this component. Editing the `msp` field is only possible if this component was created using the `crypto.msp` field, else see the `crypto.enrollment` field.
      x-validate_no_extra_keys: true
      #x-validate_key_combination:
      #  config.enrollment: # don't need this defined twice, the config.enrollment validation covers it
      #    key_should_not_exist: true
      properties:
        ca:
          type: object
          properties:
            root_certs:
              $ref: '#/components/schemas/ca_root_certs'
            ca_intermediate_certs:
              $ref: '#/components/schemas/ca_intermediate_certs'
        tlsca:
          type: object
          properties:
            root_certs:
              $ref: '#/components/schemas/ca_root_certs'
            ca_intermediate_certs:
              $ref: '#/components/schemas/ca_intermediate_certs'
        component:
          type: object
          properties:
            ekey:
              $ref: '#/components/schemas/ekey'
            ecert:
              $ref: '#/components/schemas/ecert'
            admin_certs:
              $ref: '#/components/schemas/admin_certs'
            tls_key:
              $ref: '#/components/schemas/tls_key'
            tls_cert:
              $ref: '#/components/schemas/tls_cert'
            client_auth:
              $ref: '#/components/schemas/client_auth'

    UpdateEnrollmentCryptoField:
      type: object
      description: Edit the `enrollment` crypto data of this component. Editing the `enrollment` field is only possible if this component was created using the `crypto.enrollment` field, else see the `crypto.msp` field.
      x-validate_no_extra_keys: true
      x-validate_key_combination:
        crypto.msp:
          key_should_not_exist: true
      properties:
        component:
          $ref: '#/components/schemas/CryptoEnrollmentComponent'
        ca:
          type: object
          properties:
            host:
              $ref: '#/components/schemas/cahost'
            port:
              $ref: '#/components/schemas/caport'
            name:
              $ref: '#/components/schemas/ca_name'
            tls_cert:
              $ref: '#/components/schemas/tls_cert'
            enroll_id:
              $ref: '#/components/schemas/enroll_id'
            enroll_secret:
              $ref: '#/components/schemas/enroll_secret'
        tlsca:
          type: object
          properties:
            host:
              $ref: '#/components/schemas/cahost'
            port:
              $ref: '#/components/schemas/caport'
            name:
              $ref: '#/components/schemas/tls_ca_name'
            tls_cert:
              $ref: '#/components/schemas/tls_cert'
            enroll_id:
              $ref: '#/components/schemas/enroll_id'
            enroll_secret:
              $ref: '#/components/schemas/enroll_secret'
            csr_hosts:
              $ref: '#/components/schemas/csr_hosts'

    DeleteComponentResponse:
      type: object
      properties:
        message:
          type: string
          example: deleted
        type:
          $ref: '#/components/schemas/type'
        id:
          $ref: '#/components/schemas/component_id'
        display_name:
          $ref: '#/components/schemas/display_name_peer'

    DeleteMultiComponentsResponse:
      type: object
      properties:
        deleted:
          type: array
          items:
            $ref: '#/components/schemas/DeleteComponentResponse'

    RemoveMultiComponentsResponse:
      type: object
      properties:
        removed:
          type: array
          items:
            $ref: '#/components/schemas/DeleteComponentResponse'

    DeleteAllNotificationsResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/message_ok'
        details:
          type: string
          description: Text showing what was deleted.
          example: deleted 101 notification(s)

    RestartAthenaResponse:
      type: object
      properties:
        message:
          type: string
          example: restarting - give me 5-30 seconds
          description: Text describing the outcome of the api.

    DeleteAllSessionsResponse:
      type: object
      properties:
        message:
          type: string
          example: delete submitted
          description: Response message. Indicates the api completed successfully.

    LoggingSettingsClient:
      type: object
      description: The client side (browser) logging settings. _Changes to this field will restart the IBP console server(s)_
      properties:
        enabled:
          type: boolean
          description: If `true` logging will be stored to a file on the file system.
          example: true
        level:
          $ref: '#/components/schemas/log_levels'
        unique_name:
          type: boolean
          description: If `true` log file names will have a random suffix.
          example: false

    LoggingSettingsServer:
      type: object
      description: The server side logging settings. _Changes to this field will restart the IBP console server(s)_
      properties:
        enabled:
          type: boolean
          description: If `true` logging will be stored to a file on the file system.
          example: true
        level:
          $ref: '#/components/schemas/log_levels'
        unique_name:
          type: boolean
          description: If `true` log file names will have a random suffix.
          example: false

    GenericResourcesRequests:
      type: object
      properties:
        cpu:
          type: string
          example: 100m
        memory:
          type: string
          example: 256M

    GenericResourceLimits:
      type: object
      properties:
        cpu:
          type: string
          example: 8000m
        memory:
          type: string
          example: 16384M

    GenericResources:
      type: object
      properties:
        requests:
          $ref: '#/components/schemas/GenericResourcesRequests'
        limits:
          $ref: '#/components/schemas/GenericResourceLimits'

    SettingsTimestampData:
      type: object
      properties:
        now:
          type: number
          description: UTC UNIX timestamp of the current time according to the server. In milliseconds.
          example: 1542746836056
        born:
          type: number
          description: UTC UNIX timestamp of when the server started. In milliseconds.
          example: 1542746836056
        next_settings_update:
          type: string
          description: Time remaining until the server performs a hard-refresh of its settings.
          example: 1.2 mins
        up_time:
          type: string
          description: Total time the IBP console server has been running.
          example: 30 days

    NotificationData:
      type: object
      properties:
        id:
          type: string
          description: Unique id for the notification.
          example: '60d84819bfa17adb4174ff3a1c52b5d6'
        type:
          type: string
          description: Values can be "notification", "webhook_tx" or "other".
          example: notification
        status:
          type: string
          description: Values can be "pending", "error", or "success".
          example: pending
        by:
          type: string
          description: The end user who initiated the action for the notification.
          example: d******a@us.ibm.com
        message:
          type: string
          description: Text describing the outcome of the transaction.
          example: Restarting application
        ts_display:
          type: number
          description: UTC UNIX timestamp of the notification's creation. In milliseconds.
          example: 1537262855753

    CacheData:
      type: object
      properties:
        hits:
          type: number
          description: Number of cache hits
          example: 42
        misses:
          type: number
          description: Number of cache misses
          example: 11
        keys:
          type: number
          description: Number of entries in the cache
          example: 100
        cache_size:
          type: string
          description: Approximate size of the in memory cache
          example: 4.19 KiB

    GetAthenaHealthStatsResponse:
      type: object
      description: Contains various health statistics like up time and cache sizes.
      properties:
        OPTOOLS:
          type: object
          properties:
            instance_id:
              type: string
              example: p59ta
              description: Random/unique id for a process running IBP console.
            now:
              type: number
              description: UTC UNIX timestamp of the current time according to the server. In milliseconds.
              example: 1542746836056
            born:
              type: number
              description: UTC UNIX timestamp of when the server started. In milliseconds.
              example: 1542746836056
            up_time:
              type: string
              description: Total time the IBP console server has been running.
              example: 30 days
            memory_usage:
              type: object
              properties:
                rss:
                  type: string
                  example: 56.1 MB
                  description: Resident set size - total memory allocated for the process
                heapTotal:
                  type: string
                  example: 34.4 MB
                  description: Memory allocated for the heap of V8
                heapUsed:
                  type: string
                  example: 28.4 MB
                  description: Current heap used by V8
                external:
                  type: string
                  example: 369.3 KB
                  description: Memory used by bound C++ objects
            session_cache_stats:
              $ref: '#/components/schemas/CacheData'
            couch_cache_stats:
              $ref: '#/components/schemas/CacheData'
            iam_cache_stats:
              $ref: '#/components/schemas/CacheData'
            proxy_cache:
              $ref: '#/components/schemas/CacheData'
        OS:
          type: object
          properties:
            arch:
              type: string
              example: x64
              description: CPU architecture
            type:
              type: string
              example: Windows_NT
              description: Operating system name
            endian:
              type: string
              example: LE
              description: Endianness of the CPU. LE = Little Endian, BE = Big Endian
            loadavg:
              type: array
              description: CPU load in 1, 5, & 15 minute averages. n/a on windows
              items:
                type: number
                example: 0
            cpus:
              type: array
              items:
                $ref: '#/components/schemas/CpuHealthStats'
            total_memory:
              type: string
              example: 31.7 GB
              description: Total memory known to the operating system
            free_memory:
              type: string
              example: 21.9 GB
              description: Free memory on the operating system
            up_time:
              type: string
              example: 4.9 days
              description: Time operating system has been running

    CpuHealthStats:
      type: object
      properties:
        model:
          type: string
          example: Intel(R) Core(TM) i7-8850H CPU @ 2.60GHz
          description: Model of CPU core
        speed:
          type: number
          example: 2592
          description: Speed of core in MHz
        times:
          type: object
          properties:
            idle:
              type: number
              example: 131397203
              description: ms CPU is in idle
            irq:
              type: number
              example: 6068640
              description: ms CPU is in irq
            nice:
              type: number
              example: 0
              description: ms CPU is in nice
            sys:
              type: number
              example: 9652328
              description: ms CPU is in sys
            user:
              type: number
              example: 4152187
              description: ms CPU is in user

    GetMSPCertificateResponse:
      type: object
      properties:
        msps:
          type: array
          items:
            $ref: '#/components/schemas/MspPublicData'

    MspPublicData:
      type: object
      properties:
        msp_id:
          $ref: '#/components/schemas/msp_id'
        root_certs:
          $ref: '#/components/schemas/MSPRootCerts'
        admins:
          $ref: '#/components/schemas/admin_certs'
        tls_root_certs:
          $ref: '#/components/schemas/TlsRootCerts'

    PeerResources:
      type: object
      description: CPU and memory properties. This feature is not available if using a free Kubernetes cluster.
      x-validate_paid_plan_feature: true
      x-validate_no_extra_keys: true
      properties:
        chaincodelauncher:
          $ref: '#/components/schemas/ResourceObjectFabV2'
        couchdb: # even if this peer is using level db, the key was "couchdb", 07-15-2020 now legacy, use statedb
          $ref: '#/components/schemas/ResourceObjectCouchDb'
        statedb:
          $ref: '#/components/schemas/ResourceObject'
        dind:
          $ref: '#/components/schemas/ResourceObjectFabV1'
        fluentd:
          $ref: '#/components/schemas/ResourceObjectFabV1'
        peer:
          $ref: '#/components/schemas/ResourceObject'
        proxy:
          $ref: '#/components/schemas/ResourceObject'

    ResourceObjectFabV1:
      type: object
      description: This field requires the use of Fabric v1.4.* and **lower**.
      required:
        - requests
      properties:
        requests:
          $ref: '#/components/schemas/ResourceRequests'
        limits:
          $ref: '#/components/schemas/ResourceLimits'

    ResourceObjectFabV2:
      type: object
      description: This field requires the use of Fabric v2.1.* and higher.
      required:
        - requests
      properties:
        requests:
          $ref: '#/components/schemas/ResourceRequests'
        limits:
          $ref: '#/components/schemas/ResourceLimits'

    ResourceObject:
      type: object
      description: This field requires the use of Fabric v1.4.* and higher.
      required:
        - requests
      properties:
        requests:
          $ref: '#/components/schemas/ResourceRequests'
        limits:
          $ref: '#/components/schemas/ResourceLimits'

    ResourceObjectCouchDb:
      type: object
      description: |
        *Legacy field name* Use the field `statedb` instead. This field requires the use of Fabric v1.4.* and higher.
      required:
        - requests
      properties:
        requests:
          $ref: '#/components/schemas/ResourceRequests'
        limits:
          $ref: '#/components/schemas/ResourceLimits'

    ResourceRequests:
      type: object
      properties:
        cpu:
          type: string
          example: 100m
          x-validate_cpu: true
          x-minimum: 0.01
          x-maximum: 100
          description: Desired CPU for subcomponent. [Resource details](/docs/blockchain?topic=blockchain-ibp-console-govern-components#ibp-console-govern-components-allocate-resources)
        memory:
          type: string
          example: 256MiB
          x-validate_memory: true
          x-minimum: 1
          x-maximum: 107374182400
          description: Desired memory for subcomponent. [Resource details](/docs/blockchain?topic=blockchain-ibp-console-govern-components#ibp-console-govern-components-allocate-resources)

    ResourceLimits:
      type: object
      properties:
        cpu:
          type: string
          example: 100m
          x-validate_cpu: true
          x-minimum: 0.01
          x-maximum: 100
          description: Maximum CPU for subcomponent. Must be >= "requests.cpu". Defaults to the same value in "requests.cpu". [Resource details](/docs/blockchain?topic=blockchain-ibp-console-govern-components#ibp-console-govern-components-allocate-resources)
        memory:
          type: string
          example: 256MiB
          x-validate_memory: true
          x-minimum: 1
          x-maximum: 107374182400
          description: Maximum memory for subcomponent. Must be >= "requests.memory". Defaults to the same value in "requests.memory". [Resource details](/docs/blockchain?topic=blockchain-ibp-console-govern-components#ibp-console-govern-components-allocate-resources)

    StorageObject:
      type: object
      properties:
        size:
          type: string
          example: 4GiB
          x-minimum: 1
          x-maximum: 10995116277760
          x-validate_storage: true
          description: Maximum disk space for subcomponent. [Resource details](/docs/blockchain?topic=blockchain-ibp-console-govern-components#ibp-console-govern-components-allocate-resources)
        class:
          type: string
          example: default
          description: Kubernetes storage class for subcomponent's disk space.

    CryptoObject:
      type: object
      #dsh todo get with pam on new doc page
      description: See this [topic](/docs/blockchain?topic=blockchain-ibp-v2-apis#ibp-v2-apis-config) for instructions on how to build a crypto object.
      x-validate_no_extra_keys: true
      properties:
        enrollment:
          type: object
          description: This `enrollment` field contains data that allows a component to enroll an identity for itself. Use `enrollment` or `msp`, not both.
          required:
            - component
            - ca
            - tlsca
          x-validate_key_combination:
            config.msp:
              key_should_not_exist: true
          properties:
            component:
              $ref: '#/components/schemas/CryptoEnrollmentComponent'
            ca:
              type: object
              required:
                - host
                - port
                - name
                - tls_cert
                - enroll_id
                - enroll_secret
              properties:
                host:
                  $ref: '#/components/schemas/cahost'
                port:
                  $ref: '#/components/schemas/caport'
                name:
                  $ref: '#/components/schemas/ca_name'
                tls_cert:
                  $ref: '#/components/schemas/tls_cert'
                enroll_id:
                  $ref: '#/components/schemas/enroll_id'
                enroll_secret:
                  $ref: '#/components/schemas/enroll_secret'
            tlsca:
              type: object
              required:
                - host
                - port
                - name
                - tls_cert
                - enroll_id
                - enroll_secret
              properties:
                host:
                  $ref: '#/components/schemas/cahost'
                port:
                  $ref: '#/components/schemas/caport'
                name:
                  $ref: '#/components/schemas/tls_ca_name'
                tls_cert:
                  $ref: '#/components/schemas/tls_cert'
                enroll_id:
                  $ref: '#/components/schemas/enroll_id'
                enroll_secret:
                  $ref: '#/components/schemas/enroll_secret'
                csr_hosts:
                  $ref: '#/components/schemas/csr_hosts'
        msp:
          type: object
          description: The `msp` field contains data to allow a component to configure its MSP with an already enrolled identity. Use `msp` or `enrollment`, not both.
          required:
            - component
            - ca
            - tlsca
          #x-validate_key_combination:
          #  config.enrollment: # don't need this defined twice, the config.enrollment validation covers it
          #    key_should_not_exist: true
          properties:
            component:
              $ref: '#/components/schemas/MspCryptoComp'
            ca:
              $ref: '#/components/schemas/MspCryptoCa'
            tlsca:
              $ref: '#/components/schemas/MspCryptoCa'

    CryptoEnrollmentComponent:
      type: object
      properties:
        admincerts:
          $ref: '#/components/schemas/admin_certs'

    MspCryptoCa:
      type: object
      required:
        - root_certs
      properties:
        root_certs:
          $ref: '#/components/schemas/ca_root_certs'
        ca_intermediate_certs:
          $ref: '#/components/schemas/ca_intermediate_certs'

    MspCryptoComp:
      type: object
      required:
        - ekey
        - ecert
        - tls_key
        - tls_cert
      properties:
        ekey:
          $ref: '#/components/schemas/ekey'
        ecert:
          $ref: '#/components/schemas/ecert'
        admin_certs:
          $ref: '#/components/schemas/admin_certs'
        tls_key:
          $ref: '#/components/schemas/tls_key'
        tls_cert:
          $ref: '#/components/schemas/tls_cert'
        client_auth:
          $ref: '#/components/schemas/client_auth'

    MSPRootCerts:
      type: array
      description: An array that contains one or more base 64 encoded PEM root certificates for the MSP.
      # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
      example:
        [
          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
        ]
      minLength: 1
      maxLength: 100 # dsh spam prevention limit
      items:
        $ref: '#/components/schemas/root_cert'

    IntermediateCerts: # dsh should this be removed?
      type: array
      description: An array that contains base 64 encoded PEM intermediate certificates.
      # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
      example:
        [
          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
        ]
      minLength: 0
      maxLength: 100 # dsh spam prevention limit
      items:
        type: string
        description: A certificate as base 64 encoded PEM.
        x-validate_base64_certificate: true
        example: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K'

    TlsRootCerts:
      type: array
      description: An array that contains one or more base 64 encoded PEM TLS root certificates.
      # ibm cloud api-docs does not show the "example" defined in a item reference, so making the example at this level
      example:
        [
          'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K',
        ]
      minLength: 1
      maxLength: 100 # dsh spam prevention limit
      items:
        $ref: '#/components/schemas/tls_root_cert'

    # removed 02/25/2020 - fields have no effect in the UI, even though they are valid MSP fields its confusing to list them in the api
    #RevocationCerts: # dsh should this be removed?
    #  type: array
    #  items:
    #    type: string
    #    description: A certificate as base 64 encoded PEM. These certificates are no longer valid. For X.509-based identities, these identifiers are pairs of strings known as Subject Key Identifier (SKI) and Authority Access Identifier (AKI), and are checked whenever the X.509 certificate is being used to verify that the certificate has not been revoked.
    #    example: '["LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkRhdGEgaGVyZSBpZiB0aGlzIHdhcyByZWFsCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K"]'

    #OrganizationalUnitIdentifiers: # dsh should this be removed?
    #  type: array
    #  items:
    #    type: string
    #    description: A list of Organizational Units (OU) that members of this MSP should include in their X.509 certificate. An organization is often divided up into multiple organizational units (OUs), each of which has a certain set of responsibilities. When a CA issues X.509 certificates, the OU field in the certificate specifies the line of business to which the identity belongs.
    #    example: '["oui id 1"]'

    #FabricNodeOus: # dsh should this be removed?
    #  type: array
    #  items:
    #    type: string
    #    description: Fabric-specific OUs that enable identity classification. NodeOUs contain information on how to distinguish clients, peers, and orderers based on their OU. If the check is enforced, by setting Enabled to `true`, the MSP will consider an identity valid if it is an identity of a client or a peer. An identity should have only one of these special OUs.
    #    example: '["ous id 1"]'

    CacheFlushResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/message_ok'
        flushed:
          type: array
          description: The name of the caches that were cleared.
          items:
            type: string
            example: iam_cache
            enum:
              - couch_cache
              - iam_cache
              - proxy_cache
              - session_cache

    EditAdminCertsBody:
      type: object
      x-validate_no_extra_keys: true
      properties:
        append_admin_certs:
          type: array
          minLength: 0
          maxLength: 100 # dsh spam prevention limit
          description: The admin certificates to add to the file system.
          items:
            $ref: '#/components/schemas/admin_cert'
        remove_admin_certs:
          type: array
          minLength: 0
          maxLength: 100 # dsh spam prevention limit
          description: The admin certificates to remove from the file system. To see the current list run the [Get a component](#get-component) API with the `deployment_attrs=included` parameter.
          items:
            $ref: '#/components/schemas/admin_cert'

    EditAdminCertsResponse:
      type: object
      properties:
        changes_made:
          type: number
          example: 1
          description: The total number of admin certificate additions and deletions.
        set_admin_certs:
          type: array
          description: Array of certs there were set.
          items:
            type: object
            properties:
              base_64_pem:
                $ref: '#/components/schemas/admin_cert'
              issuer:
                type: string
                description: The issuer string in the certificate
                example: /C=US/ST=North Carolina/O=Hyperledger/OU=Fabric/CN=fabric-ca-server
              not_after_ts:
                type: number
                description: UTC timestamp of the last ms the certificate is valid
                example: 1597770420000
              not_before_ts:
                type: number
                description: UTC timestamp of the earliest ms the certificate is valid
                example: 1566234120000
              serial_number_hex:
                type: string
                description: The "unique" id of the certificates
                example: 649a1206fd0bc8be994886dd715cecb0a7a21276
              signature_algorithm:
                type: string
                description: The crypto algorithm that signed the public key in the certificate
                example: SHA256withECDSA
              subject:
                type: string
                description: The subject string in the certificate
                example: /OU=client/CN=admin
              X509_version:
                type: number
                description: The X.509 version/format
                example: 3
              time_left:
                type: string
                description: A friendly (human readable) duration until certificate expiration
                example: 10 hrs

    GetFabricVersionsResponse:
      type: object
      properties:
        versions:
          type: object
          properties:
            ca:
              $ref: '#/components/schemas/FabricVersionDictionary'
            peer:
              $ref: '#/components/schemas/FabricVersionDictionary'
            orderer:
              $ref: '#/components/schemas/FabricVersionDictionary'

    FabricVersionDictionary:
      type: object
      description: A supported release of Fabric for this component type.
      additionalProperties: true
      properties:
        1.4.6-2:
          $ref: '#/components/schemas/FabVersionObject'
        2.1.0-0:
          $ref: '#/components/schemas/FabVersionObject'

    FabVersionObject:
      type: object
      properties:
        default:
          type: boolean
          description: Indicates if this is the Fabric version that will be used if none is selected.
          example: true
        version:
          type: string
          description: The Fabric version.
          example: 1.4.6-2
        image:
          type: object
          description: Detailed image information for this Fabric release.

    Unauthorized:
      type: string
      example: Unauthorized
      description: The client has failed to authenticate the request

    Forbidden:
      type: object
      description: The client has failed to authorize the request
      properties:
        authorized:
          type: boolean
          example: false
        error:
          type: string
          example: user is not authorized for these action(s)
        attempted_actions:
          type: array
          description: Array of actions that are needed for this api
          items:
            type: string
        iid:
          type: string
          description: The service's instance id
          example: abc123
        tx_id:
          type: string
          example: abcde
          description: A transaction ID that can help debug this api failure

    Bad:
      type: string
      example: Bad Input
      description: The client has sent an invalid request.

    NotFound:
      type: object
      description: The component id was not found
      properties:
        statusCode:
          type: number
          example: 404
          enum:
            - 404
        msg:
          type: string
          example: no components by this id exist
          enum:
            - no components by this id exist
            - no components by tag exist
        reason:
          type: string
          description: "'missing' if the id never existed. 'deleted' if the id has been deleted."
          example: deleted
          enum:
            - missing
            - deleted

    EmptyArrayResponse:
      type: object
      description: No components were found or exist.
      properties:
        components:
          type: array
          items:
            type: object
        msg:
          type: string
          example: no components exist
          enum:
            - no components exist
            - no components by tag exist
            - no components by type exist
        reason:
          type: string
          example: missing

    DistributionResponse:
      type: array
      items:
        type: object
        properties:
          msp_id:
            $ref: '#/components/schemas/msp_id'
          resp:
            type: object
            properties:
              statusCode:
                type: number
                example: 200
                description: The http status code from the distribution request

    org2signEdit:
      type: array
      description: The details for a MSP/Org that is adding their signature.
      items:
        type: object
        required:
          - msp_id
          - signature
        properties:
          admin:
            $ref: '#/components/schemas/SignatureAdmin'
          certificate:
            $ref: '#/components/schemas/root_cert'
          optools_url:
            $ref: '#/components/schemas/SignatureOptools_url'
          package_id:
            $ref: '#/components/schemas/SigTxPackageId'
          peers:
            $ref: '#/components/schemas/SigTxPeer'
          msp_id:
            $ref: '#/components/schemas/msp_id'
          signature: # do not base64 validation to this field, for a ccd tx it will be a simple string
            $ref: '#/components/schemas/SignatureSignature'
          timestamp:
            $ref: '#/components/schemas/SignatureTimestamp'

    org2sign:
      type: array
      description: The details for a MSP/Org that should be asked to sign.
      items:
        type: object
        required:
          - msp_id
          - optools_url
        properties:
          admin:
            $ref: '#/components/schemas/SignatureAdmin'
          certificate:
            $ref: '#/components/schemas/root_cert'
          optools_url:
            $ref: '#/components/schemas/SignatureOptools_url'
          package_id:
            $ref: '#/components/schemas/SigTxPackageId'
          peers:
            $ref: '#/components/schemas/SigTxPeer'
          msp_id:
            $ref: '#/components/schemas/msp_id'
          signature: # do not base64 validation to this field, for a ccd tx it will be a simple string
            $ref: '#/components/schemas/SignatureSignature'
          timestamp:
            $ref: '#/components/schemas/SignatureTimestamp'

    SignatureAdmin:
      type: boolean
      example: true
      description: '**(exclusive param for channel txs)** Indicates if this MSP/Org is an administrator on the channel.'

    SignatureOptools_url:
      type: string
      description: The url of the IBP console for this org. Include protocol, port, & hostname. Field is parsed during request distribution. The path/route to use during request distribution will be decided internally by the paths availability.
      example: http://localhost:3000

    SignatureSignature: # do not base64 validation to this field, for a ccd tx it will be a simple string
      type: string
      example: 'LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkNlcnQgZGF0YSB3b3VsZCBiZSBoZXJlIGlmIHRoaXMgd2FzIHJlYWwKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo='
      description: |
        - channel transaction - the signature for this MSP/Org over the proposal formatted in base 64.
        - ccd transaction - the string "signed"

    SignatureTimestamp:
      type: number
      description: UNIX timestamp of when the signature was created. UTC, ms.
      example: 1537262855753

    GetSignatureCollectionsResponse:
      type: object
      properties:
        signature_collections:
          $ref: '#/components/schemas/SignatureCollections'

    SignatureCollections:
      type: array
      items:
        $ref: '#/components/schemas/SignatureCollectionObj'

    SignatureCollectionObj:
      type: object
      properties:
        ccd:
          $ref: '#/components/schemas/SigTxCcd'
        channel:
          $ref: '#/components/schemas/SigTxChannel'
        current_policy:
          $ref: '#/components/schemas/SigTxCurrentPolicy'
        consenters:
          $ref: '#/components/schemas/SigTxConsenters'
        distribution_responses:
          type: array
          description: Details about the outcome of each signature collection distribution attempt.
          items:
            $ref: '#/components/schemas/SigDistribution'
        reference_component_ids:
          $ref: '#/components/schemas/SigTxRefs'
        orderers:
          $ref: '#/components/schemas/SigTxOrderers'
        orderers2sign:
          $ref: '#/components/schemas/org2sign'
        orgs2sign:
          $ref: '#/components/schemas/org2sign'
        originator_msp:
          $ref: '#/components/schemas/SigTxOriginator'
        proposal:
          $ref: '#/components/schemas/SigTxProposal'
        status:
          $ref: '#/components/schemas/SigTxStatus'
        timestamp:
          $ref: '#/components/schemas/SigTxTimestamp'
        tx_id:
          $ref: '#/components/schemas/SigTxId'
        tx_type:
          $ref: '#/components/schemas/SigTxType'
        visibility:
          $ref: '#/components/schemas/SigTxVisibility'

    SigTxPackageId:
      type: string
      description: '**(exclusive param for ccd txs)** Id of the chaincode package (only present if the org has installed the cc)'
      example: marbles_1:92321c359d1efcd65dc34c6ee334e37870a4a2130889473173fad3ddf7c02249

    SigTxPeer:
      type: array
      description: '**(exclusive param for ccd txs)** array of peer urls. can be an empty array'
      items:
        type: string
        description: A peer grpc web proxy url including the protocol, hostname & port.
        example: https://n3a3ec3-mypeer-proxy.ibp.us-south.containers.appdomain.cloud:8084

    SigTxChannel:
      type: string
      description: The name of the channel where this transaction applies.
      example: MyFirstChannel

    SigTxConsenters:
      type: array
      items:
        type: string
        description: '**(exclusive param for channel txs)** A current/existing channel consenter.'
        example: 192.168.5.0:3000

    SigTxCurrentPolicy:
      type: object
      description: 'Contains details of the current channel signature policy.'
      properties:
        number_of_signatures:
          type: number
          example: 1
          description: The number of signatures to edit the channel's policy.

    SigTxRefs:
      type: array
      items:
        type: string
        description: '**(exclusive param for channel txs)** Component ids of the raft nodes that are being added as a consenter in this update.'
        example: MyPeer1

    SigTxOrderers:
      type: array
      items:
        type: string
        description: The orderer hostname + port to submit this transaction to when it is complete.
        example: https://n3a3ec3-myorderer.ibp.us-south.containers.appdomain.cloud:7050

    SigTxOriginator:
      type: string
      example: Org1
      description: The MSP id who created the signature collection transaction.

    SigTxProposal:
      type: string
      description: '**(exclusive param for channel txs)** The Fabric proposal to create or edit a channel. Encoded as base 64.'
      example: ZmFrZSBkYXRh

    SigTxStatus:
      type: string
      description: The state of the transaction. Either 'open' or 'closed'.
      example: open
      enum:
        - open
        - closed

    SigTxTimestamp:
      type: number
      description: UNIX timestamp of the creation of this transaction. UTC, ms.
      example: 1537262855753

    SigTxVisibility:
      type: string
      description: Where the transaction appears in the IBP console. Either `inbox` or `archive`.
      example: inbox
      enum:
        - inbox
        - archive

    SigTxType:
      type: string
      description: The type of transaction. Channel updates use `channel`, ChainCode Definitions use `ccd`.
      example: channel
      enum:
        - channel
        - ccd

    SigTxId:
      type: string
      description: The unique transaction ID of this signature collection. Must start with a letter.
      example: abcde
      x-validate_regex_must_fail: starts_with_non_letter
      x-validate_regex_error_msg: regex_fail_start_non_letter

    SigDistribution:
      type: object
      properties:
        distribute:
          $ref: '#/components/schemas/SigDistribute'
        errors:
          $ref: '#/components/schemas/DistributionResponse'
        successes:
          $ref: '#/components/schemas/DistributionResponse'
        timestamp:
          type: number
          description: UNIX timestamp of the distribution attempt. UTC, ms.
          example: 1537262855753

    SigDistribute:
      type: string
      description: The type of distribution or redistribution that was performed (`'none'`, `'all'`, `'missing'`).
      example: all

    SigTxCcd:
      type: object
      description: '**(exclusive param for ccd txs)** The chaincode definition that needs to be approved.'
      required:
        - chaincode_sequence
        - chaincode_id
        - chaincode_version
      x-validate_key_combination:
        proposal:
          key_should_not_exist: true
        consenters:
          key_should_not_exist: true
      properties:
        chaincode_sequence:
          type: number
          description: Tracks the number of times a chaincode def has been defined or updated
          example: 1
        chaincode_id:
          type: string
          description: The chaincode id/name
          example: marbles
        chaincode_version:
          type: string
          description: The chaincode version
          example: v1
        endorsement_plugin:
          type: string
          description: The system chaincode id/name to use to check endorsements
          example: escc
        init_required:
          type: boolean
          description: Controls if the first invoke should be "init" or not
          example: true
        # removed b/c it will vary org to org, moved to orgs2sign entry
        #package_id:
        #  type: string
        #  description: Id of the chaincode package (only present if the org has installed the cc)
        #  example: marbles_1:92321c359d1efcd65dc34c6ee334e37870a4a2130889473173fad3ddf7c02249
        validation_plugin:
          type: string
          description: The system chaincode id/name to use to validate
          example: vscc
        validation_parameter:
          $ref: '#/components/schemas/ApplicationPolicy'
        collections_obj:
          type: array
          items:
            type: object
            description: The static collection config (scc) to apply to this chaincode. Conforms to the Fabric message in `peer/collection.proto `.
            required:
              - name
            properties:
              name:
                type: string
                description: Name of the StaticCollectionConfig message
                example: myCollection-v1
              required_peer_count:
                type: number
                description: Minimum number of peers that must get the private data to successfully endorse
                example: 1
              maximum_peer_count:
                type: number
                description: Max number of peers the endorsing peer can try to send private data to
                example: 1
              member_orgs_policy:
                type: string
                description: Signature policy controlling which orgs must endorse private data changes.
                example: AND('Org1.admin', 'Org2.member')
              block_to_live:
                type: number
                description: When to expire private data.
                example: 10
              member_only_read:
                type: boolean
                description: If true, only collection member clients can read private data
                example: false
              member_only_write:
                type: boolean
                description: If true, only collection member clients can read private data
                example: false
              endorsement_policy:
                $ref: '#/components/schemas/ApplicationPolicy'

    ApplicationPolicy:
      type: string
      description: |
        Signature policy controlling which orgs must endorse chaincode proposals.

        Two formats are supported.
        This can be either the name of a channel's signature policy (string) such as:
        `"/Channel/Application/Endorsement"`.
        Or it can be a signature policy in the peer CLI format (string) such as:
        `"AND('Org1.admin', 'Org2.member')"`.

        [CLI format docs](https://hyperledgendary.github.io/unstable-fabric-docs/endorsement-policies.html#endorsement-policy-syntax)
      example: AND('Org1.admin', 'Org2.member')

    GetSignatureCollectionsByChannelResponse:
      type: object
      properties:
        signature_collections:
          type: object
          properties:
            channels:
              type: object
              description: The keys are channel names. The values hold the signature collection transaction details.
              properties:
                MyFirstChannel:
                  $ref: '#/components/schemas/SignatureCollections'

    CreateSignatureCollectionBody:
      type: object
      required:
        - authorize
        - channel
        - orderers
        - orgs2sign
        - originator_msp
        - tx_id
      properties:
        authorize:
          $ref: '#/components/schemas/SigTxAuth'
        ccd:
          $ref: '#/components/schemas/SigTxCcd'
        channel:
          $ref: '#/components/schemas/SigTxChannel'
        current_policy:
          $ref: '#/components/schemas/SigTxCurrentPolicy'
        consenters:
          $ref: '#/components/schemas/SigTxConsenters'
        #distribute: # this field can be a string or an object, swagger won't accept that so not going to doc this field. ok b/c api is hidden.
        #  type: any
        reference_component_ids:
          $ref: '#/components/schemas/SigTxRefs'
        orderers:
          $ref: '#/components/schemas/SigTxOrderers'
        orderers2sign:
          $ref: '#/components/schemas/org2sign'
        orgs2sign:
          $ref: '#/components/schemas/org2sign'
        originator_msp:
          $ref: '#/components/schemas/SigTxOriginator'
        proposal:
          $ref: '#/components/schemas/SigTxProposal'
        tx_id:
          $ref: '#/components/schemas/SigTxId'
        tx_type:
          $ref: '#/components/schemas/SigTxType'
        visibility:
          $ref: '#/components/schemas/SigTxVisibility'

    SigTxAuth:
      type: object
      required:
        - msp_id
        - certificate
      properties:
        msp_id:
          type: string
          description: The msp of the identity that created the authorization header.
          example: PeerOrg1
        certificate:
          type: string
          description: The matching certificate for the identity that created the authorization header. Base 64 encoded PEM.
          x-validate_base64_certificate: true
        hash_ver:
          type: string
          description: The version of the hash function over this request. IBP consoles v2.5.* and higher should use "v2".
          example: v2
          enum:
            - v2
            - v1

    EditSignatureCollectionBody:
      type: object
      required:
        - authorize
      properties:
        authorize:
          $ref: '#/components/schemas/SigTxAuth'
        #distribute: # this field can be a string or an object, swagger won't accept that so not going to doc this field. ok b/c api is hidden.
        #  type: any
        orderers2sign:
          $ref: '#/components/schemas/org2signEdit'
        orgs2sign:
          $ref: '#/components/schemas/org2signEdit'
        status:
          $ref: '#/components/schemas/SigTxStatus'
        visibility:
          $ref: '#/components/schemas/SigTxVisibility'

    DeleteSignatureCollectionResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/message_ok'
        tx_id:
          $ref: '#/components/schemas/SigTxId'

    SignatureCollectionResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/message_ok'
        distribution_responses:
          $ref: '#/components/schemas/SigDistribution'
        ccd:
          $ref: '#/components/schemas/SigTxCcd'
        channel:
          $ref: '#/components/schemas/SigTxChannel'
        current_policy:
          $ref: '#/components/schemas/SigTxCurrentPolicy'
        consenters:
          $ref: '#/components/schemas/SigTxConsenters'
        reference_component_ids:
          $ref: '#/components/schemas/SigTxRefs'
        orderers:
          $ref: '#/components/schemas/SigTxOrderers'
        orderers2sign:
          $ref: '#/components/schemas/org2sign'
        orgs2sign:
          $ref: '#/components/schemas/org2sign'
        originator_msp:
          $ref: '#/components/schemas/SigTxOriginator'
        proposal:
          $ref: '#/components/schemas/SigTxProposal'
        tx_id:
          $ref: '#/components/schemas/SigTxId'
        tx_type:
          $ref: '#/components/schemas/SigTxType'
        visibility:
          $ref: '#/components/schemas/SigTxVisibility'

    GetPostmanResponse:
      type: object
      description: Response contains JSON following the Postman v2.1 collection spec. The Postman JSON structure is not documented here for brevity. Save the JSON as a file and import the file into your [Postman](https://www.postman.com/downloads) desktop application.

    GetSwaggerResponse:
      type: string
      description: Response contains a YAML file following the OpenAPI v3.0.0 spec. The OpenAPI/Swagger structure is not documented here for brevity. Once the YAML file is saved it could be imported into various OpenAPI tools.

    GetBackupsResponse:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            description: A backup id.
            example: 03_ibp_db_backup_1592924104038

    StartBackupResponse:
      type: object
      properties:
        message:
          type: string
          description: Indicates if this backup was started or not.
          example: in-progress
        id:
          type: string
          description: The identifier for this backup.
          example: 03_ibp_db_backup_1592924104038
        url:
          type: string
          description: A api url to use to download the backup and see its progress.
          example: http://localhost:3000/ak/api/v3/backups/03_ibp_db_backup_1592924104038

    AttachBackupResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/message_ok'
        att_name:
          type: string
          description: The name of the attachment.
          example: my-attachment

    AttachBackupBody:
      type: object
      required:
        - attachment
      x-validate_no_extra_keys: true
      properties:
        attachment:
          type: string
          description: The data to attach. Binary data should be hex or base 64 encoded.
          example: dGhpcyBpcyBzb21lIGRhdGEgaSB3YW50ZWQgc3RvcmVk

    LinkClusterBody:
      type: object
      required:
        - cluster
      properties:
        cluster:
          type: string
          description: The name of your cluster.
          example: mycluster

    LinkClusterResponse:
      type: object
      properties:
        message:
          type: string
          description: Description of the API's outcome.
          example: Your service instance was successfully created on cluster mycluster
        endpoint:
          type: string
          description: The IBP console endpoint that was created.
          example: https://12345-optools.so01.blockchain.cloud.ibm.com

    StartRestoreResponse:
      type: object
      properties:
        message:
          type: string
          description: Indicates if this restore was started or not.
          example: in-progress
        url:
          type: string
          description: A api url to use to checkup on the status of the restore.
          example: http://localhost:3000/ak/api/v1/webhooks/txs/nboqur

    RestoreBackupDataBody:
      type: object
      properties:
        dbs:
          type: object
          properties:
            athena_components:
              $ref: '#/components/schemas/DbBackupObject'
            athena_sessions:
              $ref: '#/components/schemas/DbBackupObject'
            athena_system:
              $ref: '#/components/schemas/DbBackupObject'

    DbBackupObject:
      type: object
      properties:
        docs:
          type: array
          items:
            type: object
            description: A couchdb document (JSON).

    RestoreBackupIdBody:
      type: object
      x-validate_no_extra_keys: true
      properties:
        client_webhook_url:
          type: string
          description: Provide a webhook url. This url will receive a POST request when the restore is complete. Embedded basic auth supported.
          example: http://localhost:3000/api/v3/example/webhooks/asdf"

    GetBackupResponse:
      type: object

    ArchiveNotificationsBody:
      type: object
      required:
        - notification_ids
      properties:
        notification_ids:
          type: array
          description: Array of notification IDs to archive.
          minLength: 1
          maxLength: 1024 # spam prevention limiter
          items:
            type: string
            description: An id.
            example: c9d00ebf849051e4f102008dc0be2488
            minLength: 1
            maxLength: 64

    ArchiveResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/message_ok'
        details:
          type: string
          description: Text with the number of notifications that were archived.
          example: archived 3 notification(s)

    CaActionsBody:
      type: object
      x-validate_no_extra_keys: true
      x-validate_invalid_params_for_import: true
      properties:
        restart:
          $ref: '#/components/schemas/action_restart'
        renew:
          $ref: '#/components/schemas/action_renew'

    PeerActionsBody:
      type: object
      x-validate_no_extra_keys: true
      x-validate_invalid_params_for_import: true
      properties:
        restart:
          $ref: '#/components/schemas/action_restart'
        reenroll:
          $ref: '#/components/schemas/action_reenroll'
        enroll:
          $ref: '#/components/schemas/action_enroll'
        upgrade_dbs:
          type: boolean
          description: Set to `true` to start the peer's db migration.
          example: true

    OrdererActionsBody:
      type: object
      x-validate_no_extra_keys: true
      x-validate_invalid_params_for_import: true
      properties:
        restart:
          $ref: '#/components/schemas/action_restart'
        reenroll:
          $ref: '#/components/schemas/action_reenroll'
        enroll:
          $ref: '#/components/schemas/action_enroll'

    action_restart:
      type: boolean
      description: Set to `true` to restart the component.
      example: true

    action_renew:
      type: object
      x-validate_no_extra_keys: true
      properties:
        tls_cert:
          type: boolean
          description: Set to `true` to renew the tls cert for this component.
          example: true

    action_reenroll:
      type: object
      x-validate_no_extra_keys: true
      properties:
        tls_cert:
          type: boolean
          description: Set to `true` to generate a new tls cert for this component via re-enrollment.
          example: true
        ecert:
          type: boolean
          description: Set to `true` to generate a new ecert for this component via re-enrollment.
          example: true

    action_enroll:
      type: object
      x-validate_no_extra_keys: true
      properties:
        tls_cert:
          type: boolean
          description: Set to `true` to generate a new tls cert for this component via enrollment.
          example: true
        ecert:
          type: boolean
          description: Set to `true` to generate a new ecert for this component via enrollment.
          example: true

    ActionsResponse:
      type: object
      properties:
        message:
          type: string
          example: accepted
        id:
          type: string
          description: The id of the component.
          example: myca
        actions:
          type: array
          items:
            type: string
            description: The name of an action that was received.
            example: restart

    #
    #
    #
    #.
    # ---------------------------------------------------------------------------------------------------------------------------------------------------------
    # Software Schemas - ! not applicable for IBP SaaS on IBM Cloud !
    # ---------------------------------------------------------------------------------------------------------------------------------------------------------
    api_key:
      type: string
      description: The api key. Used to authenticate APIs on IBP Software.
      example: <api_key here>
    api_roles:
      type: array
      description: Array of all roles for the api key.
      items:
        type: string
        description: A role for the api key.
        example: reader
        enum:
          - reader
          - writer
          - manager
    api_key_description:
      type: string
      description: User defined description can go here.
      example: Batman's key
    user_ids:
      type: array
      minLength: 1
      maxLength: 128 # spam prevention limit
      items:
        type: string
        description: A unique user id of a user (uuid).
        example: b26e67a3-8f4c-40e4-b5e2-6303ad2979fc
        minLength: 8
        maxLength: 40 # node uuids are 36 characters
    CreateApiKeyBody:
      type: object
      required:
        - roles
      properties:
        roles:
          $ref: '#/components/schemas/api_roles'
        description:
          $ref: '#/components/schemas/api_key_description'
    CreateApiKeyResponse:
      type: object
      properties:
        api_key:
          $ref: '#/components/schemas/api_key'
        api_secret:
          type: string
          example: <api_secret here>
        roles:
          $ref: '#/components/schemas/api_roles'
    GetApiKeyResponse:
      type: object
      properties:
        keys:
          type: array
          items:
            $ref: '#/components/schemas/KeysResponse'
    KeysResponse:
      type: object
      properties:
        api_key:
          $ref: '#/components/schemas/api_key'
        ts_created:
          type: number
          description: UNIX timestamp of component creation, UTC, ms.
          example: 1549490200312
        roles:
          $ref: '#/components/schemas/api_roles'
        description:
          $ref: '#/components/schemas/api_key_description'
    DeleteApiKeyResponse:
      type: object
      properties:
        deleted:
          type: string
          description: The value of the api key that was deleted.
          example: <api_key here>
    AddUserBody:
      type: object
      required:
        - users
      properties:
        users:
          type: object
          description: The keys in this object are usernames that should be added.
          properties:
            someone@gmail.com:
              type: object
              description: The keys in this object are usernames that should be added.
              additionalProperties: true
              required:
                - roles
              properties:
                roles:
                  $ref: '#/components/schemas/api_roles'
    AddUserResponse:
      type: object
      properties:
        message:
          $ref: '#/components/schemas/message_ok'
    DeleteUserResponse:
      type: object
      properties:
        uuids:
          $ref: '#/components/schemas/user_ids'
    EditUserBody:
      type: object
      required:
        - uuids
      properties:
        uuids:
          type: object
          description: The keys in this object are uuids.
          properties:
            b26e67a3-8f4c-40e4-b5e2-6303ad2979fc:
              type: object
              properties:
                roles:
                  $ref: '#/components/schemas/api_roles'
    EditUserResponse:
      type: object
      properties:
        uuids:
          $ref: '#/components/schemas/user_ids'
    GetUsersResponse:
      type: object
      properties:
        uuids:
          $ref: '#/components/schemas/user_ids'
    ResetPassBody:
      type: object
      required:
        - uuids
      properties:
        uuids:
          $ref: '#/components/schemas/user_ids'
    ResetPassResponse:
      type: object
      properties:
        uuids:
          $ref: '#/components/schemas/user_ids'

    SubmitConfigBlock:
      type: object
      properties:
        b64_block:
          type: string
          description: The latest config block of the system channel. Base 64 encoded. To obtain this block, you must use a **Fabric API**. This config block should list this ordering node as a valid consenter on the system-channel.
          example: bWFzc2l2ZSBiaW5hcnkgb2YgYSBjb25maWcgYmxvY2sgd291bGQgYmUgaGVyZSBpZiB0aGlzIHdhcyByZWFsLCBwbGVhc2UgZG9udCBzZW5kIHRoaXM=
  #
  #
  #
  #.
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------
  # Parameters
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------
  parameters:
    PathIdEdit:
      name: id
      in: path
      description: The `id` of the component to modify. Use the [Get all components](#list_components) API to determine the component id.
      required: true
      schema:
        type: string

    PathTag:
      name: tag
      in: path
      description: The tag to filter components on. Not case-sensitive.
      required: true
      schema:
        type: string

    PathType:
      name: type
      in: path
      description: The type of component to filter components on.
      required: true
      schema:
        type: string
        enum:
          - fabric-peer
          - fabric-orderer
          - fabric-ca
          - msp

    PathIdGet:
      name: id
      in: path
      description: The `id` of the component to retrieve. Use the [Get all components](#list_components) API to determine the component id.
      required: true
      schema:
        type: string

    PathTxId:
      name: id
      in: path
      description: The unique transaction ID of this signature collection.
      required: true
      schema:
        type: string

    QueryDeploymentAttrs:
      name: deployment_attrs
      in: query
      description: |
        Set to 'included' if the response should include Kubernetes deployment attributes such as 'resources', 'storage', 'zone', 'region', 'admin_certs', etc. Default responses will not include these fields.

        **This parameter will not work on *imported* components.**

        It's recommended to use `cache=skip` as well if up-to-date deployment data is needed.
      required: false
      schema:
        type: string
        example: included
        enum:
          - included
          - omitted
        x-validate_invalid_params_for_import: true

    QueryParsedCerts:
      name: parsed_certs
      in: query
      description: Set to 'included' if the response should include parsed PEM data along with base 64 encoded PEM string. Parsed certificate data will include fields such as the serial number, issuer, expiration, subject, subject alt names, etc. Default responses will not include these fields.
      required: false
      schema:
        type: string
        example: included
        enum:
          - included
          - omitted

    QueryCache:
      name: cache
      in: query
      description: Set to 'skip' if the response should skip local data and fetch live data wherever possible. Expect longer response times if the cache is skipped. Default responses will use the cache.
      required: false
      schema:
        type: string
        example: skip
        enum:
          - skip
          - use

    QuerySigTxDetails:
      name: full_details
      in: query
      description: Set to 'omitted' if the responses should be kept short and include only a summary of the transaction. The default response will include the long details.
      required: false
      schema:
        type: string
        example: included
        enum:
          - included
          - omitted

    QueryGroupByChannelName:
      name: group_by
      in: query
      description: Set to 'channels' if an alternative response format should be used where transactions are bucketed by channel names (A 210 status code and response will be sent). The default response will not group transactions.
      required: false
      schema:
        type: string
        example: included
        enum:
          - channels
          - none

    QueryFilterByOrderers:
      name: filter_orderers
      in: query
      description: Filter response to only contain transactions of certain orderer hostnames. Include the hostname and port of one or more orderers. The default response will not filter out transactions. The query parameter should resemble an array of strings.
      required: false
      schema:
        type: string
        example: '["my-orderer.ibp.us-south.containers.appdomain.cloud:3010"]'

    QueryStatus:
      name: status
      in: query
      description: Filter response to only contain transactions in a desired status state. The default response will not filter out transactions.
      required: false
      schema:
        type: string
        example: all
        enum:
          - all
          - closed
          - open

    QueryComponentId:
      name: component_id
      in: query
      description: Filter response to only contain notifications for a particular component id. The default response will include all notifications.
      required: false
      schema:
        type: string
        example: MyPeer

    QueryCaAttrs:
      name: ca_attrs
      in: query
      description: |
        Set to 'included' if the response should fetch CA attributes, inspect certificates, and append extra fields to CA and MSP component responses.
        - CA components will have fields appended/updated with data fetched from the `/cainfo?ca=ca` endpoint of a CA, such as: `ca_name`, `root_cert`, `fabric_version`, `issuer_public_key` and `issued_known_msps`. The field `issued_known_msps` indicates imported IBP MSPs that this CA has issued. Meaning the MSP's root cert contains a signature that is derived from this CA's root cert. Only imported MSPs are checked. Default responses will not include these fields.
        - MSP components will have the field `issued_by_ca_id` appended. This field indicates the id of an IBP console CA that issued this MSP. Meaning the MSP's root cert contains a signature that is derived from this CA's root cert. Only imported/created CAs are checked. Default responses will not include these fields.
      required: false
      schema:
        type: string
        example: included
        enum:
          - included
          - omitted

    QueryUuids:
      name: uuids
      in: query
      description: Pass the desired uuids to delete. The query parameter should resemble an array of strings.
      required: true
      schema:
        type: string
        example: '["b26e67a3-8f4c-40e4-b5e2-6303ad2979fc"]'

    AuthType:
      name: auth_type
      in: query
      description: |
        - **bearer** - IAM Bearer Auth - *[Available on IBM Cloud]* - The same bearer token used to authenticate this request will be copied into the Postman collection examples. The query parameter `token` must also be set with your IAM bearer/access token value.
        - **api_key** - IAM Api Key Auth - *[Available on IBM Cloud]* - The IAM api key will be copied into the Postman collection examples. The query parameter `api_key` must also be set with your IAM API Key value.
        - **basic** - Basic Auth - *[Available on OpenShift & IBM Cloud Private]* - A basic auth username and password will be copied into the Postman collection examples. The query parameters `username` & `password` must also be set with your IBP api key credentials. The IBP api key is the username and the api secret is the password.
      required: true
      schema:
        type: string
        example: bearer
        enum:
          - bearer
          - api_key
          - basic

    AuthUsername:
      name: username
      in: query
      description: The basic auth username to use for auth in the collection.
      required: false
      schema:
        type: string
        example: admin

    AuthPassword:
      name: password
      in: query
      description: The basic auth password to use for auth in the collection.
      required: false
      schema:
        type: string
        example: password

    AuthToken:
      name: token
      in: query
      description: The IAM access/bearer token to use for auth in the collection.
      required: false
      schema:
        type: string

    AuthApiKey:
      name: api_key
      in: query
      description: The IAM api key to use for auth in the collection.
      required: false
      schema:
        type: string

    PathBackupId:
      name: id
      in: path
      description: The `id` of the backup.
      required: true
      schema:
        type: string

    PathBackupAttachment:
      name: att_name
      in: path
      description: The name of the attachment.
      required: true
      schema:
        type: string

    EncodedCrn:
      name: encoded_crn
      in: path
      description: The CRN (Cloud Resource Name) string for you IBP service instance. It should be encoded with JavasScripts' `encodeURIComponent()` or something equivalent.
      required: true
      schema:
        type: string
  #
  #
  #
  #.
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------
  # Security
  # -----------------------------------------------------------------------------------------------------------------------------------------------------------
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
